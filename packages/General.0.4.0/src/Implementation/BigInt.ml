module OCSB = OCamlStandard.Big_int

module SelfA = struct
  type t = OCSB.big_int

  let zero = OCSB.zero_big_int
  let one = OCSB.unit_big_int

  let of_int = OCSB.big_int_of_int
  let to_int = OCSB.int_of_big_int

  let of_float x =
    let of_small_float x =
      x
      |> Int64.of_float
      |> OCSB.big_int_of_int64
    and breakpoint =
      58 (* Any integer between 53 and 63 (included) works, because floats have 53 significant bits and int64s have 63 significant bits *)
    in
    let (significand, exponent) = Float.to_parts x in
    if exponent <= breakpoint then
      of_small_float x
    else
      OCSB.shift_left_big_int
        (of_small_float (Float.of_parts ~significand ~exponent:breakpoint))
        (exponent - breakpoint)

  let to_float = OCSB.float_of_big_int
  let of_string = OCSB.big_int_of_string
  let try_of_string s =
    Exception.or_none (lazy (of_string s))
  let to_string = OCSB.string_of_big_int

  let repr = to_string

  let abs = OCSB.abs_big_int

  let negate = OCSB.minus_big_int
  let add = OCSB.add_big_int
  let substract = OCSB.sub_big_int
  let multiply = OCSB.mult_big_int
  let divide = OCSB.div_big_int
  let modulo = OCSB.mod_big_int
  let square = OCSB.square_big_int
  let exponentiate x n =
    if n < 0 then
      Exception.invalid_argument "BigInt.exponentiate: Negative exponent: %i" n
    else
      OCSB.power_big_int_positive_int x n

  let pred = OCSB.pred_big_int
  let succ = OCSB.succ_big_int

  let equal = OCSB.eq_big_int

  let compare = Compare.of_standard OCSB.compare_big_int
  let less_than = OCSB.lt_big_int
  let less_or_equal = OCSB.le_big_int
  let greater_than = OCSB.gt_big_int
  let greater_or_equal = OCSB.ge_big_int
end

module SelfB = struct
  include SelfA

  include Traits.Comparable.Between.Make0(SelfA)
  include Traits.Comparable.MinMax.Make0(SelfA)
  include Traits.Equatable.Different.Make0(SelfA)
end

module Self = struct
  include SelfB

  module O = struct
    include Traits.Comparable.Operators.Make0(SelfB)
    include Traits.Equatable.Operators.Make0(SelfB)
    include Traits.Ringoid.Operators.Make0(SelfB)

    let (mod) = modulo
  end
end

include Self

module Examples = struct
  let i = OCSB.big_int_of_int
  let s = OCSB.big_int_of_string

  let succ = [
    (i 4, i 5);
    (i (-6), i (-5));
  ]

  let equal = [
    [i 4];
    [i (-10)];
  ]

  let ordered = [
    [i (-3); i (-1); zero; one; i 5];
  ]

  let exponentiate = [
    (i 10, 10, s "10000000000");
    (i 10, 40, s "10000000000000000000000000000000000000000");
  ]

  let divide = [
    (i 45, i 9, i 5);
  ]

  let multiply = [
    (i 7, i 3, i 21);
  ]

  let negate = [
    (i (-12), i 12);
  ]

  let add_substract = [
    (i 100, i 27, i 127);
  ]

  let repr = [
    (i 10, "10");
    (s "10000000000000000000000000000000000000000", "10000000000000000000000000000000000000000");
  ]

  let to_string = repr

  let different = [
    (i 10, i 11);
  ]

  let of_string = [
    ("100000", i 100000);
  ]
end

module Tests = struct
  open Testing

  let test = "BigInt" >:: [
    (let module T = Concepts.Integer.Tests.Make0(Self)(Examples) in T.test);
    (let module T = Traits.Parsable.Tests.Make0(Self)(Examples) in T.test);
    "exponentiate (of_int 2) (-4)" >: (lazy (expect_exception ~expected:(Exception.InvalidArgument "BigInt.exponentiate: Negative exponent: -4") (lazy (exponentiate (of_int 2) (-4)))));
    "of_float" >:: (
      let check ~expected x =
        check ~repr ~equal ~expected:(of_string expected) (of_float x)
      in
      let make_2p p expected =
        (* This tests only the most significant bit *)
        ~: "2 ^ %i" p (lazy (check ~expected (2. ** (Float.of_int p))))
      and make_2pm2q p q expected =
        (* This can test all bits if q = max 0 (p - 53) *)
        ~: "2 ^ %i - 2 ^ %i" p q (lazy (check ~expected (2. ** (Float.of_int p) -. 2. ** (Float.of_int q))))
      in
      [
        (* http://www.wolframalpha.com/input/?i=2^95+-+2^42 *)
        make_2pm2q 0 0 "0";
        make_2pm2q 1 0 "1";
        make_2pm2q 2 0 "3";
        make_2pm2q 3 0 "7";
        make_2pm2q 50 0 "1125899906842623";
        make_2pm2q 51 0 "2251799813685247";
        make_2pm2q 52 0 "4503599627370495";
        make_2pm2q 53 0 "9007199254740991";
        make_2pm2q 54 1 "18014398509481982";
        make_2pm2q 55 2 "36028797018963964";
        make_2pm2q 56 3 "72057594037927928";
        make_2pm2q 57 4 "144115188075855856";
        make_2pm2q 95 42 "39614081257132164398725464064";
        (* http://www.tsm-resources.com/alists/pow2.html *)
        make_2p 1 "2";
        make_2p 2 "4";
        make_2p 3 "8";
        make_2p 4 "16";
        make_2p 5 "32";
        make_2p 6 "64";
        make_2p 7 "128";
        make_2p 8 "256";
        make_2p 9 "512";
        make_2p 10 "1024";
        make_2p 11 "2048";
        make_2p 12 "4096";
        make_2p 13 "8192";
        make_2p 14 "16384";
        make_2p 15 "32768";
        make_2p 16 "65536";
        make_2p 17 "131072";
        make_2p 18 "262144";
        make_2p 19 "524288";
        make_2p 20 "1048576";
        make_2p 21 "2097152";
        make_2p 22 "4194304";
        make_2p 23 "8388608";
        make_2p 24 "16777216";
        make_2p 25 "33554432";
        make_2p 26 "67108864";
        make_2p 27 "134217728";
        make_2p 28 "268435456";
        make_2p 29 "536870912";
        make_2p 30 "1073741824";
        make_2p 31 "2147483648";
        make_2p 32 "4294967296";
        make_2p 33 "8589934592";
        make_2p 34 "17179869184";
        make_2p 35 "34359738368";
        make_2p 36 "68719476736";
        make_2p 37 "137438953472";
        make_2p 38 "274877906944";
        make_2p 39 "549755813888";
        make_2p 40 "1099511627776";
        make_2p 41 "2199023255552";
        make_2p 42 "4398046511104";
        make_2p 43 "8796093022208";
        make_2p 44 "17592186044416";
        make_2p 45 "35184372088832";
        make_2p 46 "70368744177664";
        make_2p 47 "140737488355328";
        make_2p 48 "281474976710656";
        make_2p 49 "562949953421312";
        make_2p 50 "1125899906842624";
        make_2p 51 "2251799813685248";
        make_2p 52 "4503599627370496";
        make_2p 53 "9007199254740992";
        make_2p 54 "18014398509481984";
        make_2p 55 "36028797018963968";
        make_2p 56 "72057594037927936";
        make_2p 57 "144115188075855872";
        make_2p 58 "288230376151711744";
        make_2p 59 "576460752303423488";
        make_2p 60 "1152921504606846976";
        make_2p 61 "2305843009213693952";
        make_2p 62 "4611686018427387904";
        make_2p 63 "9223372036854775808";
        make_2p 64 "18446744073709551616";
        make_2p 65 "36893488147419103232";
        make_2p 66 "73786976294838206464";
        make_2p 67 "147573952589676412928";
        make_2p 68 "295147905179352825856";
        make_2p 69 "590295810358705651712";
        make_2p 70 "1180591620717411303424";
        make_2p 71 "2361183241434822606848";
        make_2p 72 "4722366482869645213696";
        make_2p 73 "9444732965739290427392";
        make_2p 74 "18889465931478580854784";
        make_2p 75 "37778931862957161709568";
        make_2p 76 "75557863725914323419136";
        make_2p 77 "151115727451828646838272";
        make_2p 78 "302231454903657293676544";
        make_2p 79 "604462909807314587353088";
        make_2p 80 "1208925819614629174706176";
        make_2p 81 "2417851639229258349412352";
        make_2p 82 "4835703278458516698824704";
        make_2p 83 "9671406556917033397649408";
        make_2p 84 "19342813113834066795298816";
        make_2p 85 "38685626227668133590597632";
        make_2p 86 "77371252455336267181195264";
        make_2p 87 "154742504910672534362390528";
        make_2p 88 "309485009821345068724781056";
        make_2p 89 "618970019642690137449562112";
        make_2p 90 "1237940039285380274899124224";
        make_2p 91 "2475880078570760549798248448";
        make_2p 92 "4951760157141521099596496896";
        make_2p 93 "9903520314283042199192993792";
        make_2p 94 "19807040628566084398385987584";
        make_2p 95 "39614081257132168796771975168";
        make_2p 96 "79228162514264337593543950336";
        make_2p 97 "158456325028528675187087900672";
        make_2p 98 "316912650057057350374175801344";
        make_2p 99 "633825300114114700748351602688";
        make_2p 100 "1267650600228229401496703205376";
        make_2p 101 "2535301200456458802993406410752";
        make_2p 102 "5070602400912917605986812821504";
        make_2p 103 "10141204801825835211973625643008";
        make_2p 104 "20282409603651670423947251286016";
        make_2p 105 "40564819207303340847894502572032";
        make_2p 106 "81129638414606681695789005144064";
        make_2p 107 "162259276829213363391578010288128";
        make_2p 108 "324518553658426726783156020576256";
        make_2p 109 "649037107316853453566312041152512";
        make_2p 110 "1298074214633706907132624082305024";
        make_2p 111 "2596148429267413814265248164610048";
        make_2p 112 "5192296858534827628530496329220096";
        make_2p 113 "10384593717069655257060992658440192";
        make_2p 114 "20769187434139310514121985316880384";
        make_2p 115 "41538374868278621028243970633760768";
        make_2p 116 "83076749736557242056487941267521536";
        make_2p 117 "166153499473114484112975882535043072";
        make_2p 118 "332306998946228968225951765070086144";
        make_2p 119 "664613997892457936451903530140172288";
        make_2p 120 "1329227995784915872903807060280344576";
        make_2p 121 "2658455991569831745807614120560689152";
        make_2p 122 "5316911983139663491615228241121378304";
        make_2p 123 "10633823966279326983230456482242756608";
        make_2p 124 "21267647932558653966460912964485513216";
        make_2p 125 "42535295865117307932921825928971026432";
        make_2p 126 "85070591730234615865843651857942052864";
        make_2p 127 "170141183460469231731687303715884105728";
        make_2p 128 "340282366920938463463374607431768211456";
        make_2p 129 "680564733841876926926749214863536422912";
        make_2p 130 "1361129467683753853853498429727072845824";
        make_2p 131 "2722258935367507707706996859454145691648";
        make_2p 132 "5444517870735015415413993718908291383296";
        make_2p 133 "10889035741470030830827987437816582766592";
        make_2p 134 "21778071482940061661655974875633165533184";
        make_2p 135 "43556142965880123323311949751266331066368";
        make_2p 136 "87112285931760246646623899502532662132736";
        make_2p 137 "174224571863520493293247799005065324265472";
        make_2p 138 "348449143727040986586495598010130648530944";
        make_2p 139 "696898287454081973172991196020261297061888";
        make_2p 140 "1393796574908163946345982392040522594123776";
        make_2p 141 "2787593149816327892691964784081045188247552";
        make_2p 142 "5575186299632655785383929568162090376495104";
        make_2p 143 "11150372599265311570767859136324180752990208";
        make_2p 144 "22300745198530623141535718272648361505980416";
        make_2p 145 "44601490397061246283071436545296723011960832";
        make_2p 146 "89202980794122492566142873090593446023921664";
        make_2p 147 "178405961588244985132285746181186892047843328";
        make_2p 148 "356811923176489970264571492362373784095686656";
        make_2p 149 "713623846352979940529142984724747568191373312";
        make_2p 150 "1427247692705959881058285969449495136382746624";
        make_2p 151 "2854495385411919762116571938898990272765493248";
        make_2p 152 "5708990770823839524233143877797980545530986496";
        make_2p 153 "11417981541647679048466287755595961091061972992";
        make_2p 154 "22835963083295358096932575511191922182123945984";
        make_2p 155 "45671926166590716193865151022383844364247891968";
        make_2p 156 "91343852333181432387730302044767688728495783936";
        make_2p 157 "182687704666362864775460604089535377456991567872";
        make_2p 158 "365375409332725729550921208179070754913983135744";
        make_2p 159 "730750818665451459101842416358141509827966271488";
        make_2p 160 "1461501637330902918203684832716283019655932542976";
        make_2p 161 "2923003274661805836407369665432566039311865085952";
        make_2p 162 "5846006549323611672814739330865132078623730171904";
        make_2p 163 "11692013098647223345629478661730264157247460343808";
        make_2p 164 "23384026197294446691258957323460528314494920687616";
        make_2p 165 "46768052394588893382517914646921056628989841375232";
        make_2p 166 "93536104789177786765035829293842113257979682750464";
        make_2p 167 "187072209578355573530071658587684226515959365500928";
        make_2p 168 "374144419156711147060143317175368453031918731001856";
        make_2p 169 "748288838313422294120286634350736906063837462003712";
        make_2p 170 "1496577676626844588240573268701473812127674924007424";
        make_2p 171 "2993155353253689176481146537402947624255349848014848";
        make_2p 172 "5986310706507378352962293074805895248510699696029696";
        make_2p 173 "11972621413014756705924586149611790497021399392059392";
        make_2p 174 "23945242826029513411849172299223580994042798784118784";
        make_2p 175 "47890485652059026823698344598447161988085597568237568";
        make_2p 176 "95780971304118053647396689196894323976171195136475136";
        make_2p 177 "191561942608236107294793378393788647952342390272950272";
        make_2p 178 "383123885216472214589586756787577295904684780545900544";
        make_2p 179 "766247770432944429179173513575154591809369561091801088";
        make_2p 180 "1532495540865888858358347027150309183618739122183602176";
        make_2p 181 "3064991081731777716716694054300618367237478244367204352";
        make_2p 182 "6129982163463555433433388108601236734474956488734408704";
        make_2p 183 "12259964326927110866866776217202473468949912977468817408";
        make_2p 184 "24519928653854221733733552434404946937899825954937634816";
        make_2p 185 "49039857307708443467467104868809893875799651909875269632";
        make_2p 186 "98079714615416886934934209737619787751599303819750539264";
        make_2p 187 "196159429230833773869868419475239575503198607639501078528";
        make_2p 188 "392318858461667547739736838950479151006397215279002157056";
        make_2p 189 "784637716923335095479473677900958302012794430558004314112";
        make_2p 190 "1569275433846670190958947355801916604025588861116008628224";
        make_2p 191 "3138550867693340381917894711603833208051177722232017256448";
        make_2p 192 "6277101735386680763835789423207666416102355444464034512896";
        make_2p 193 "12554203470773361527671578846415332832204710888928069025792";
        make_2p 194 "25108406941546723055343157692830665664409421777856138051584";
        make_2p 195 "50216813883093446110686315385661331328818843555712276103168";
        make_2p 196 "100433627766186892221372630771322662657637687111424552206336";
        make_2p 197 "200867255532373784442745261542645325315275374222849104412672";
        make_2p 198 "401734511064747568885490523085290650630550748445698208825344";
        make_2p 199 "803469022129495137770981046170581301261101496891396417650688";
        make_2p 200 "1606938044258990275541962092341162602522202993782792835301376";
        make_2p 201 "3213876088517980551083924184682325205044405987565585670602752";
        make_2p 202 "6427752177035961102167848369364650410088811975131171341205504";
        make_2p 203 "12855504354071922204335696738729300820177623950262342682411008";
        make_2p 204 "25711008708143844408671393477458601640355247900524685364822016";
        make_2p 205 "51422017416287688817342786954917203280710495801049370729644032";
        make_2p 206 "102844034832575377634685573909834406561420991602098741459288064";
        make_2p 207 "205688069665150755269371147819668813122841983204197482918576128";
        make_2p 208 "411376139330301510538742295639337626245683966408394965837152256";
        make_2p 209 "822752278660603021077484591278675252491367932816789931674304512";
        make_2p 210 "1645504557321206042154969182557350504982735865633579863348609024";
        make_2p 211 "3291009114642412084309938365114701009965471731267159726697218048";
        make_2p 212 "6582018229284824168619876730229402019930943462534319453394436096";
        make_2p 213 "13164036458569648337239753460458804039861886925068638906788872192";
        make_2p 214 "26328072917139296674479506920917608079723773850137277813577744384";
        make_2p 215 "52656145834278593348959013841835216159447547700274555627155488768";
        make_2p 216 "105312291668557186697918027683670432318895095400549111254310977536";
        make_2p 217 "210624583337114373395836055367340864637790190801098222508621955072";
        make_2p 218 "421249166674228746791672110734681729275580381602196445017243910144";
        make_2p 219 "842498333348457493583344221469363458551160763204392890034487820288";
        make_2p 220 "1684996666696914987166688442938726917102321526408785780068975640576";
        make_2p 221 "3369993333393829974333376885877453834204643052817571560137951281152";
        make_2p 222 "6739986666787659948666753771754907668409286105635143120275902562304";
        (* http://www.wolframalpha.com/input/?i=2^1023 *)
        make_2p 1023 "89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608";
      ]
    );
  ]
end
