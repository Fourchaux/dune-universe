module Right: sig
  module Basic
  module type S0 = sig
    type elt
    type t
    val fold_short_right: t -> init:'b -> f:(elt -> 'b -> General.Shorten.t * 'b) -> 'b
    val fold_short_right_i: t -> init:'b -> f:(i:int -> elt -> 'b -> General.Shorten.t * 'b) -> 'b
    val fold_short_right_acc: acc:'acc -> t -> init:'b -> f:(acc:'acc -> elt -> 'b -> 'acc * General.Shorten.t * 'b) -> 'b
    val reduce_short_right: t -> f:(elt -> elt -> General.Shorten.t * elt) -> elt
    val reduce_short_right_i: t -> f:(i:int -> elt -> elt -> General.Shorten.t * elt) -> elt
    val reduce_short_right_acc: acc:'acc -> t -> f:(acc:'acc -> elt -> elt -> 'acc * General.Shorten.t * elt) -> elt
    val try_reduce_short_right: t -> f:(elt -> elt -> General.Shorten.t * elt) -> elt option
    val try_reduce_short_right_i: t -> f:(i:int -> elt -> elt -> General.Shorten.t * elt) -> elt option
    val try_reduce_short_right_acc: acc:'acc -> t -> f:(acc:'acc -> elt -> elt -> 'acc * General.Shorten.t * elt) -> elt option
    val iter_short_right: t -> f:(elt -> General.Shorten.t) -> unit
    val iter_short_right_i: t -> f:(i:int -> elt -> General.Shorten.t) -> unit
    val iter_short_right_acc: acc:'acc -> t -> f:(acc:'acc -> elt -> 'acc * General.Shorten.t) -> unit
  end
  module type S1 = sig
    type 'a t
    val fold_short_right: 'a t -> init:'b -> f:('a -> 'b -> General.Shorten.t * 'b) -> 'b
    val fold_short_right_i: 'a t -> init:'b -> f:(i:int -> 'a -> 'b -> General.Shorten.t * 'b) -> 'b
    val fold_short_right_acc: acc:'acc -> 'a t -> init:'b -> f:(acc:'acc -> 'a -> 'b -> 'acc * General.Shorten.t * 'b) -> 'b
    val reduce_short_right: 'a t -> f:('a -> 'a -> General.Shorten.t * 'a) -> 'a
    val reduce_short_right_i: 'a t -> f:(i:int -> 'a -> 'a -> General.Shorten.t * 'a) -> 'a
    val reduce_short_right_acc: acc:'acc -> 'a t -> f:(acc:'acc -> 'a -> 'a -> 'acc * General.Shorten.t * 'a) -> 'a
    val try_reduce_short_right: 'a t -> f:('a -> 'a -> General.Shorten.t * 'a) -> 'a option
    val try_reduce_short_right_i: 'a t -> f:(i:int -> 'a -> 'a -> General.Shorten.t * 'a) -> 'a option
    val try_reduce_short_right_acc: acc:'acc -> 'a t -> f:(acc:'acc -> 'a -> 'a -> 'acc * General.Shorten.t * 'a) -> 'a option
    val iter_short_right: 'a t -> f:('a -> General.Shorten.t) -> unit
    val iter_short_right_i: 'a t -> f:(i:int -> 'a -> General.Shorten.t) -> unit
    val iter_short_right_acc: acc:'acc -> 'a t -> f:(acc:'acc -> 'a -> 'acc * General.Shorten.t) -> unit
  end
end
