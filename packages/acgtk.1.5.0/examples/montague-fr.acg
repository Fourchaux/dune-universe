(* This files gives an example of how to use the ACG toolkit to illustrate
   Montague's semantics on a bilingual fragment (French, English). *)

(* First we define the syntactic categories and the syntactic terms. *)
signature syntax =
	(* the syntactic types *)
	np, n, s, sc : type;

	(* the syntactic constants that correspond to proper names *)
	JEAN, MARIE : np;

	(* verbs *)
	AIMER : np -> np -> s;

        (* NB : The verbal argument to vouloir/want should be in the
           infinitive, however we ignore the distinction in this
           fragment. *)
        VOULOIR_CV : (np -> s) -> np => s;
        VOULOIR_SC : sc -> np -> s;

	(* articles and other determiners *)
	CHAQUE, UN, UNE : n -> (np -> s) -> s;

	(* common nouns *)
	HOMME, FEMME : n;
        PERE, MERE : n;

        (* sentential complementizer *)
        QUE : s -> sc;

        (* possessives, for masculine and feminine nouns *)
        POSS_M : np -> n -> np;
        POSS_F : np -> n -> np;
end


(* Then we define the signature containing the strings that will be used in
   the French translation. *)

signature francais =
	string : type;
	
	(* the infix concatenation operator + *)
	infix [Right] + : string -> string -> string;

	(* the empty string e *)
	e : string;

	(* all the other strings *)
	Jean, Marie, aime, chaque, un, une, homme, femme, pere, mere, le, la, de, veut, que:string;
end


(* The lexicon that associates the French strings to the syntactic terms. *)

lexicon realisation_francais (syntax) : francais =
	(* all the syntactic types are interpreted as strings *)
	np, n, s, sc := string;

	JEAN := Jean;
	MARIE := Marie;

	(* LOVE is interpreted as a function taking two arguments. The
	   first one is the object and the second one is the subject. It
	   returns the concatenation subject+loves+object *)
	AIMER := lambda o s.s + aime + o;

        VOULOIR_CV := lambda vp. Lambda s. s + veut + vp e;
        VOULOIR_SC := lambda sc s. s + veut + sc;

	CHAQUE := lambda n P. P (chaque + n);
	UN := lambda n P. P (un + n);
	UNE := lambda n P. P (une + n);
	
	HOMME := homme;
	FEMME := femme;

        QUE := lambda s. que + s;
    
        PERE := pere;
        MERE := mere;

        POSS_M := lambda np n. le + n + de + np;
        POSS_F := lambda np n. la + n + de + np;
end
	

(* Then we do the same for English *)

signature anglais =
	string : type;
	
	(* the infix concatenation operator + *)
	infix + : string -> string -> string;

	(* the empty string e *)
	e : string;

	(* all the other strings *)
	John, Mary, loves, every, some, man, woman, father, mother, s, wants, to, that:string;
end


lexicon realisation_anglais (syntax) : anglais =
	(* all the syntactic types are interpreted as strings *)
	np, n, s, sc := string;

	JEAN := John;
	MARIE := Mary;

	(* LOVE is interpreted as a function taking two arguments. The first one is the object and the second one is the subject. It returns the concatenation subject+loves+object *)
	AIMER := lambda o s.s + loves + o;

        VOULOIR_CV := lambda vp. Lambda s. s + wants + to + vp e;
        VOULOIR_SC := lambda sc s. s + wants + sc;

	CHAQUE := lambda n P. P (every + n);
	UN := lambda n P. P (some + n);
	UNE := lambda n P. P (some + n);
	
	HOMME := man;
	FEMME := woman;
        QUE := lambda s. that + s;
        PERE := father;
        MERE := mother;

        POSS_M := lambda np n. np + s + n;
        POSS_F := lambda np n. np + s + n;
end
	

(* Let's now look at the semantics. *)

signature logique =

	(* We define the usual types *)

	e, t : type;

	(* Then a few non logical-constants *)
	aime : e -> e -> t;
        veut : e -> t -> t;
	j, m : e;
	homme, femme : e -> t;
        pere, mere : e -> t;
        

	(* And finally, here are the logical constants *)

	(* Conjunction *)
	infix & : t -> t -> t;	
	
	(* Implication *)
	infix > : t -> t -> t;

	(* Quantifiers *)
	binder All : (e => t) -> t;
	binder Ex : (e => t ) -> t;

        (* The iota operator *)
        binder The : (e => t) -> e;

        
        (* A mock-up for the meaning of possessive constructions. [de]
           takes a property of being a [something] and it returns a
           relation that of being a [something] to someone else, i.e. [de
           pere j m] is true if [j] is considered to be the designated
           [pere] of [m]. This is however just a mock-up, the proposal
           would make sense only in an intensional setting. *)
        de : (e -> t) -> e -> e -> t;

        (* The meaning of the definite description formed by a possessive
           is modelled using the iota operator (The), which gives us the
           unique individual satisfying some given property.  Since this
           meaning is shared by both the POSS_M and POSS_F, we define it
           here so that we don't have to copy the lambda term. *)
        poss = lambda ind rel. The x. (de rel x ind) : e -> (e -> t) -> e;
end

lexicon semantique (syntax) : logique =
	
	(* We interpret np as entity, n as properties (s -> t) and of
	   course s (and sc) as propositions (truth values) *)
	np := e;
	n := e -> t;
	s, sc := t;

	JEAN := j;
	MARIE := m;

	HOMME := homme;
	FEMME := femme;

        PERE := pere;
        MERE := mere;
	
	(* Note that we interpret LOVE whose first argument is the object
	   and the second one as a suject using the predicate "love" for
	   which love x y is true whenever x loves y *)
	AIMER := lambda x y. aime y x;

        VOULOIR_CV := lambda vp. Lambda s. veut s (vp s);
        VOULOIR_SC := lambda sc s. veut s sc;

	CHAQUE := lambda P Q. All x. (P x) > (Q x); 
	UN :=  lambda P Q. Ex x. (P x) & (Q x) ;
	UNE :=  lambda P Q. Ex x. (P x) & (Q x) ;

        QUE := lambda s. s;

        POSS_M := poss;
        POSS_F := poss;
end
