(**************************************************************************)
(*                                                                        *)
(*                 ACG development toolkit                                *)
(*                                                                        *)
(*                  Copyright 2008-2021 INRIA                             *)
(*                                                                        *)
(*  More information on "http://acg.gforge.inria.fr/"                     *)
(*  License: CeCILL, see the LICENSE file or "http://www.cecill.info"     *)
(*  Authors: see the AUTHORS file                                         *)
(*                                                                        *)
(*                                                                        *)
(*                                                                        *)
(*                                                                        *)
(*  $Rev::                              $:  Revision of last commit       *)
(*  $Author::                           $:  Author of last commit         *)
(*  $Date::                             $:  Date of last commit           *)
(*                                                                        *)
(**************************************************************************)

(* We first provide a signature for the derivation trees. *)

signature derivation_trees =

    (* Types "Xa" with an "a" index (such as "Sa") are meant
       for adjunction. See https://hal.inria.fr/inria-00141913 for further
       explanation of the encoding of TAG to ACG. *)

    Sa, Na, Na_d, N, VPa, S, WH : type;

    (* Declaration of abstract constants together with their
       types. -> stands for the linear implication and => (not used in this
       signature) stands for the intuitionistic implication. *)

    C_chien, C_chat : Na_d -> Na-> N;
    C_dort : Sa -> VPa -> N -> S;
    C_chasse, C_aime, C_aimer : Sa -> VPa -> N -> N -> S;
    C_chaque, C_un, C_une : Na_d;
    C_lentement, C_semble : VPa -> VPa;
    C_nouveau, C_grand, C_noir : Na -> Na;
    C_affirme_que, C_a_dit_que : Sa -> VPa -> N -> Sa;
    C_jean, C_paul, C_marie, C_francois : N;
    C_qui : WH;
    C_est_ce_que_aime : Sa -> VPa -> WH -> N -> S;
    C_est_ce_que_croit_que : Sa -> VPa -> N -> Sa;

    (* Dummy element to specify the end of adjunctions. *)
    I_vp : VPa;
    I_n : Na;
    I_s : Sa;
end


(* Now we specify the signature for derived trees *)

signature derived_trees =

    (* It uses only one type: the type of trees. *)

    tree : type;

    (* Here are the non-terminal symbols we find in the trees, with
       an index indicating their arity *)
    WH1, N1, VP1 : tree -> tree;
    N2, S2, VP2 : tree -> tree -> tree;

    (* Here are the terminal symbols. *)

    chaque, chien, chasse, un, une, chat, dort, lentement, nouveau, grand,
    noir, semble, jean, marie, francois, paul, affirme, aime, aimer,
    qui, que, a, dit, est_ce_que, croit : tree;

    (* We define a few constants that will make the lexicon definitions
       easier. *)

    n = lambda n. lambda d a. d (a (N1 n))
      : tree -> (tree -> tree) -> (tree -> tree) -> tree;
    iv = lambda v. lambda s a np0. s (S2 np0 (a (VP1 v)))
       : tree -> (tree -> tree)  -> (tree -> tree) -> tree -> tree;
    tv = lambda v. lambda s a np0 np1. s (S2 np0 (a (VP2 v np1)))
       : tree -> (tree -> tree) -> (tree -> tree) -> tree -> tree -> tree;
    ph_arg_v = lambda v. lambda s_root a np0 s_foot. s_root (S2 np0 (a (VP2 v (S2 que s_foot))))
             : tree -> (tree -> tree) -> (tree -> tree) -> tree -> tree -> tree;
    ph_arg_v_aux = lambda aux v. lambda s_root a np0 s_foot. s_root (S2 np0 (a (VP2 aux (VP2 v (S2 que s_foot)))))
             : tree -> tree -> (tree -> tree) -> (tree -> tree) -> tree -> tree -> tree;
    det = lambda d. lambda n. N2 d n
        : tree -> (tree -> tree);
    adv = lambda adv. lambda a v. a (VP2 v adv)
        : tree -> (tree -> tree) -> (tree -> tree);
    l_adj = lambda adj. lambda a n. a (N2 adj n)
          : tree -> (tree -> tree) -> (tree -> tree);
    r_adj = lambda adj. lambda a n. a (N2 n adj)
          : tree -> (tree -> tree) -> (tree -> tree);
    ctrl_v = lambda v. lambda v_root v_foot. v_root (VP2 v v_foot)
           : tree -> (tree -> tree) -> (tree -> tree);
    np = lambda proper_name. N1 proper_name
       : tree -> tree;
    inf_tv = lambda v. lambda s a np0 np1 .S2 np1 (s (S2 np0 (a (VP1 v))))
           : tree -> (tree -> tree) -> (tree -> tree) -> tree -> tree -> tree;
    wh_extract_tv = lambda v. lambda s adv wh subj. S2 wh (s (S2 subj (adv (VP1 v))))
                  : tree -> (tree -> tree) -> (tree -> tree) -> tree -> tree -> tree;
end


(* Then a signature for the strings. *)
signature strings =
    o : type;
    string = o -> o : type;

    (* We can define infix and prefix symbols.
       Note that as for now, the length of symbols can only be 1. *)

    infix + = lambda a b. lambda z. a (b z) : string -> string -> string;

    chaque, chien, chasse, un, une, chat, dort, lentement, nouveau, grand,
    noir, semble, jean, marie, francois, paul, affirme, qui, que, aime,
    aimer, a, dit, est, ce, croit : string;
end


(* Ok. Now we look at our first lexicon. It translates derived trees into
   strings. *)

lexicon tag_strings (derived_trees) : strings =

    (* So every tree results in a string. *)
    tree := string;

    chaque := chaque;
    chien := chien;
    chasse := chasse;
    un := un;
    une := une;
    chat := chat;
    dort := dort;
    lentement := lentement;
    nouveau := nouveau;
    grand := grand;
    noir := noir;
    semble := semble;
    jean := jean;
    marie := marie;
    francois := francois;
    paul := paul;

    affirme := affirme;
    aime := aime;
    aimer := aimer;
    qui := qui;
    que := que;
    a := a;
    dit := dit;
    est_ce_que := est + ce + que;
    croit := croit;


    WH1, N1, VP1 := lambda f. f;
    N2, S2, VP2 := lambda f g. f + g;

end


(* We also provide a signature for the semantics. *)

signature semantics =

    (* We define the usual types. *)

    e, t:type;

    (* Then a few non-logical constants. *)
    chien, chat, dort : e -> t;
    aime, chasse : e -> e -> t;
    j, m, f, p : e;
    lentement : t -> t;
    semble : (e -> t) -> e -> t;
    nouveau, grand, noir : e ->t;
    affirme, dit, croit : e -> t -> t;

    QUI : (e -> t) -> t;

    (* And finally, here are the logical constants. *)

    infix & : t -> t -> t;
    infix > : t -> t -> t;
    binder All : (e => t) -> t;
    binder Ex : (e => t) -> t;

end


(* We now define the semantics associated to each derivation tree. *)

lexicon tag_semantics (derivation_trees) : semantics =

    S := t;
    N := (e -> t) -> t;
    Sa := t -> t;
    Na := (e => t) -> (e => t);
    VPa := (e -> t) -> (e -> t);
    Na_d := (e => t) -> (e -> t) -> t;
    WH := (e ->t) -> t;


    C_chaque := lambda n P. All x. (n x) > (P x);
    C_un := lambda n P. Ex x. (n x) & (P x);
    C_une := lambda n P. Ex x. (n x) & (P x);

    C_chien := lambda d a. d (a (Lambda x. chien x));
    C_chat := lambda d a. d (a (Lambda x. chat x));
    C_dort := lambda s a S. s (S (a (lambda x. dort x)));
    C_chasse := lambda s a S O. s (S (a (lambda x. O (lambda y.chasse x y))));
    C_aime := lambda s a S O. s (S (a (lambda x. O (lambda y.aime x y))));
    C_aimer := lambda s a O S. s (S (a (lambda x. O (lambda y.aime x y))));
    C_lentement := lambda vp r. vp (lambda x. lentement (r x));
    C_semble := lambda vp r. vp (lambda x. semble r x);
    C_nouveau := lambda a n. a (Lambda x.(nouveau x) & (n x));
    C_grand := lambda a n. a (Lambda x. (grand x) & (n x));
    C_noir := lambda a n. a (Lambda x. (noir x) & (n x));
    C_affirme_que := lambda sa a S comp. sa (S (a (lambda x. affirme x comp)));
    C_a_dit_que := lambda sa a S comp. sa (S (a (lambda x. dit x comp)));
    C_jean := lambda P. P j;
    C_marie := lambda P. P m;
    C_paul := lambda P. P p;
    C_francois := lambda P. P f;
    C_qui := QUI;
    C_est_ce_que_aime := lambda sa a w S. w (lambda y. sa (S (a (lambda x. aime x y))));
    C_est_ce_que_croit_que := lambda sa a S comp. sa (S (a (lambda x. croit x comp)));
    I_vp := lambda x. x;
    I_n := lambda x. x;
    I_s := lambda x. x;
end


(* And a lexicon from derivation trees to derived trees. *)

lexicon tag_syntax (derivation_trees) : derived_trees =

    N, S, WH := tree;
    Sa, Na, VPa, Na_d := tree -> tree ;
    C_jean := np jean;
    C_marie := np marie;
    C_francois := np francois;
    C_paul := np paul;
    C_chien := n chien;
    C_chat := n chat;
    C_chasse := tv chasse;
    C_aime := tv aime;
    C_aimer := inf_tv aimer;
    C_dort := iv dort;
    C_semble := ctrl_v semble;
    C_affirme_que := ph_arg_v affirme;
    C_a_dit_que := ph_arg_v_aux a dit;
    C_chaque := det chaque;
    C_un := det un;
    C_une := det une;
    C_lentement := adv lentement;
    C_nouveau := l_adj nouveau;
    C_grand := l_adj grand;
    C_noir := r_adj noir;

    C_qui := WH1 qui;
    C_est_ce_que_aime := lambda s adv wh subj. S2 wh (S2 est_ce_que (s (S2 subj (adv (VP1 aime)))));
    C_est_ce_que_croit_que := lambda s_root a subj s_foot. s_root (S2 est_ce_que (S2 subj (a (VP2 croit (S2 que s_foot)))));

    I_n, I_vp, I_s := lambda x. x;
end


lexicon tag_yields = tag_strings << tag_syntax
