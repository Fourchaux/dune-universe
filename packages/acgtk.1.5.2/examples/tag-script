##########################################################################
#                                                                        #
#                 ACG development toolkit                                #
#                                                                        #
#                  Copyright 2008-2021 INRIA                             #
#                                                                        #
#  More information on "http://acg.gforge.inria.fr/"                     #
#  License: CeCILL, see the LICENSE file or "http://www.cecill.info"     #
#  Authors: see the AUTHORS file                                         #
#                                                                        #
#                                                                        #
#                                                                        #
#                                                                        #
#  $Rev::                              $:  Revision of last commit       #
#  $Author::                           $:  Author of last commit         #
#  $Date::                             $:  Date of last commit           #
#                                                                        #
##########################################################################

# Comments are from # symbols to the end of the line

# First print the help message that describes the commands
help;

# Require a user interaction (press return) to continue
# between commands
wait;

# First load an acg. It requires having first compiled tag.acg
# with the acgc.opt compiler with:
# acgc.opt tag.acg
load o tag.acgo;

# Alternatively, you can just load the data with the command
#load d tag.acg;


# List the available data
list;

# Ok. We are ready to try to realize some abstract terms.
# We require to realize in the context of 3 lexicons (tag_syntax,
# tag_yields and tag_semantics) a term
# build on the *SHARED* abstract vocabulary of the 3 lexicons
tag_syntax tag_yields tag_semantics realize C_sleeps I_s I_vp (C_dog C_a (C_black (C_big (C_new I_n)))) : S;

# Look at the result. Can we parse the string generated by this term?
# Yes. Just run:
tag_yields parse a + new + big + black + dog + sleeps :S;

# Ok, now we're ready to do the same for another term
tag_syntax tag_yields tag_semantics realize C_chases I_s I_vp (C_dog C_every I_n) (C_cat C_a I_n) : S;

# And now let's see if we can get long distance dependencies
tag_syntax tag_yields tag_semantics realize C_loves (C_claims I_s I_vp C_paul) I_vp C_john C_mary : S;

tag_syntax tag_yields tag_semantics realize C_to_love (C_claims I_s I_vp C_paul) (C_seems I_vp) C_john C_mary : S;

tag_syntax tag_yields  tag_semantics realize C_liked ( C_said (C_does_think I_s I_vp C_paul) I_vp C_john) I_vp C_who C_bill : S;

# And we can recover this term from its semantic realization:
tag_semantics parse WHO (lambda y. think p (say j (like b y))) : S;

tag_semantics parse  All x. (dog x) > (Ex x'. (cat x') & (chase x x')) :S;

