(* -*- tuareg -*- *)

let template =
"
(executables (
  (names (NAMES))
  (libraries (amqp-client.TYPE))
))

(alias (
  (name runtest)
  (deps (BINARIES))
  (action (bash \"ACTIONS\"))
))
";;

let action = "(./BINARY && echo BINARY ok || (echo BINARY failed; false))"
;;

let ends_with s str =
  let l = String.length s in
  match String.length str with
  | n when n >= l ->
    String.sub str (n - l) l = s
  | _ -> false
;;

let is_test_file name =
  ends_with "_test.ml" name
;;

let files =
  Sys.readdir "."
  |> Array.to_list
  |> List.filter is_test_file
;;

let strip_suffix name =
  (* Find last index of '.' *)
  match String.rindex name '.' with
  | n -> String.sub name 0 n
  | exception Not_found -> name
;;

(* Replace a string in larger text. How??? *)
let replace_string s ~by str =
  let rec nsplit ~from ~by str =
    let by_len = String.length by in
    match String.sub str from by_len = by with
    | true -> String.sub str 0 from :: nsplit ~from:0 ~by (String.sub str (from + by_len) (String.length str - by_len - from))
    | false -> nsplit ~from:(from + 1) ~by str
    | exception Invalid_argument _ -> [ str ]
  in
  nsplit ~from:0 ~by:s str
  |> String.concat by

let tests () =
  let names = List.map strip_suffix files in
  let binaries = List.map (fun x -> x ^ ".exe") names in
  let actions = List.map (fun bin -> replace_string "BINARY" ~by:bin action) binaries in

  template
  |> replace_string "NAMES" ~by:(String.concat " " names)
  |> replace_string "BINARIES" ~by:(String.concat " " binaries)
  |> replace_string "ACTIONS" ~by:(String.concat "&&" actions)
;;

let tap f x =
  f x; x

let () =
  tests ()
  (* |> tap (Printf.printf "%s\n") *)
  |> Jbuild_plugin.V1.send
;;
