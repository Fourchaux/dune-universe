theory Types

  use int.Int

  (* default type mapping *)
  type key     = int
  type role    = int
  type address = int
  type tez     = int
  type date    = int
  type astring = int
  type bytes   = int

  exception Break
  exception NotFound
  exception KeyExist
  exception InvalidCaller
  exception InvalidCondition
  exception NoTransfer
  exception InvalidState
  exception Invalid string
end

module Utils
  use int.Int
  use Types

  (* ------------------------------------------------------------------------ *)
  (* Tuples *)

  let function fst (a : (int, int)) : int
  =
  match a with
  | (l,_) -> l
  end

  let function snd (a: (int, int)) : int
  =
  match a with
  | (_,r) -> r
  end

  (* ------------------------------------------------------------------------ *)
  (* Math *)

  let function abs (a : int) : int
  ensures { result >= 0 }
  =
  if a >= 0 then a else -a

  use int.EuclideanDivision

  let function floor (a : (int,int)) : int
  =
  match a with
  | (n,d) ->
   if d > 0 then
     div n d
   else
     (div n d) - 1
  end

  let function ceil (a : (int,int)) : int
  =
  match a with
  | (n,d) ->
   if d > 0 then
     (div n d) + 1
   else
     div n d
  end

  (* ------------------------------------------------------------------------ *)
  (* Rational *)

  type op_cmp =
   | OpCmpLt
   | OpCmpLe
   | OpCmpGt
   | OpCmpGe

  let function rat_cmp (op : op_cmp) (lhs : (int, int)) (rhs : (int, int)) : bool
  =  let a = (fst lhs) * (snd rhs) in
     let b = (snd lhs) * (fst rhs) in
     let pos = (fst lhs) * (fst rhs) > 0 in
     match op with
     | OpCmpLt -> if pos then
                    a < b
                  else
                    a > b
     |OpCmpLe -> if pos then
                   a <= b
                 else
                   a >= b
     |OpCmpGt -> if pos then
                   a > b
                 else
                   a < b
     |OpCmpGe -> if pos then
                   a >= b
                 else
                   a <= b
     end

  let function rat_eq (lhs : (int, int)) (rhs : (int, int)) : bool
  = fst lhs * snd rhs = fst rhs * snd lhs

  type op_arith =
   | OpArithPlus
   | OpArithMinus
   | OpArithMult
   | OpArithDiv

  let function rat_arith (op : op_arith) (lhs : (int, int)) (rhs : (int, int)) : (int, int)
  =  match op with
     | OpArithPlus -> (((fst lhs) * (snd rhs)) + ((snd rhs) * (snd lhs)) , (snd lhs) * (snd rhs))
     | OpArithMinus -> (((fst lhs) * (snd rhs)) - ((snd rhs) * (snd lhs)) , (snd lhs) * (snd rhs))
     | OpArithMult -> ((fst lhs) * (fst rhs) , (snd lhs) * (snd rhs))
     | OpArithDiv -> ((fst lhs) * (snd rhs) , (snd lhs) * (fst rhs))
     end

  let function rat_tez (c : (int, int)) (t : tez) : tez
  =  div ((abs (fst c)) * t) (abs (snd c))

  let function abs_rat (a : (int, int)) : (int, int)
  =
  match a with
  | (l,r) -> (abs l, abs r)
  end

  let function int_to_rat (a : int) : (int, int)
  = (a,1)

  let function rat_uminus (r : (int, int)) : (int, int)
  =
  match r with
  | (l,r) -> (-l,r)
  end

  let function rat_min (a : (int, int)) (b : (int, int)) : (int, int)
  = if rat_cmp OpCmpLe a b then a else b

  let function rat_max (a : (int, int)) (b : (int, int)) : (int, int)
  = if rat_cmp OpCmpLe a b then b else a

  (* ----------------------------------------------------------------------- *)
  (* String *)

  let function str_concat (s1 : astring) (s2 : astring) : astring = s1 + s2

  let function substring  (s : astring) (i1 : int) (i2 : int) = 0

  let function str_length (s : astring) : int = 0

  let function byt_concat (b1 : bytes) (b2 : bytes) : bytes = b1 + b2

  (* ----------------------------------------------------------------------- *)
  (* Option *)
  use option.Option

  let function issome (v : option 'a) : bool
  =
  match v with
  | Some _ -> true
  | None -> false
  end

  let function isnone (v : option 'a) : bool
  =
  match v with
  | Some _ -> false
  | None -> true
  end

  let getopt (o : option 'a) : 'a
  raises { NotFound }
  =
  match o with
  | Some v -> v
  | None -> raise NotFound
  end

end

module Trace

  use Types
  use list.List
  use list.Mem
  use option.Option

  type _asset
  type _entry
  type _field

  type _action =
  | TrRm_ _asset
  | TrAdd_ _asset
  | TrUpdate_ _field
  | TrGet_ _asset
  | TrIterate _asset
  | TrTransfer int
  | TrCallContract int

  type _traces = list _action

  predicate changes_performed_by (changes : _traces) (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  mem x changes ->
  p

  predicate performed_by  (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  p

end

theory Contract

  use Types
  use int.Int
  use list.List
  use list.Mem as L

  type transfer = {
     destination_ : address;
     amount_      : tez;
  }

  let mk_transfer (d : address) (a : tez) : transfer = {
    destination_ = d;
    amount_ = a;
  }

  type transfers = list transfer

  let no_transfer : transfers = Nil

  let mk_call (c : address) : transfer = {
    destination_ = c;
    amount_ = 0;
  }

end

(* source : http://toccata.lri.fr/gallery/insertion_sort_list.fr.html *)
module InsertionSort

  type elt
  val predicate le elt elt

  clone relations.TotalPreOrder with
    type t = elt, predicate rel = le, axiom .
  clone export list.Sorted with
    type t = elt, predicate le  = le, goal Transitive.Trans

  use list.List
  use list.Permut

  let rec function insert (x: elt) (l: list elt) : list elt
    requires { sorted l }
    ensures  { sorted result }
    ensures  { permut (Cons x l) result }
    variant  { l }
  = match l with
    | Nil -> Cons x Nil
    | Cons y r -> if le x y then Cons x l else Cons y (insert x r)
    end

  let rec function insertion_sort (l: list elt) : list elt
    ensures { sorted result }
    ensures { permut l result }
    variant { l }
  = match l with
    | Nil -> Nil
    | Cons x r -> insert x (insertion_sort r)
    end

end

module AssetCollection

  use Types
  use int.Int
  use list.List
  use list.Length as L
  use list.Append as A
  use list.Mem as M
  use option.Option
  use fset.Undup

  (* ------------------------------------------------------------------------ *)
  type t = abstract {}        (* asset type           *)

  (* ------------------------------------------------------------------------ *)
  val function fkey  t : key  (* asset key function   *)

  (* ------------------------------------------------------------------------ *)
  val function feq t t : bool (* asset equality *)

  (* ------------------------------------------------------------------------ *)
  let predicate ple t1 t2 = fkey t1 <= fkey t2

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as IS with type elt = t,
                                 val le = ple

  let rec function fmem (a : t) (l : list t) : bool =
    match l with
    | Nil -> false
    | Cons e tl -> feq a e || fmem a tl
    end

  let rec function undup (l : list t) : list t =
    match l with
    | Nil -> Nil
    | Cons e tl ->
        if fmem e tl then undup tl else Cons e (undup tl)
    end

  let function norm (l : list t) : list t =
    IS.insertion_sort (undup l)

  clone fset.FSet      as F with type t     = t,
                                 val  eqt   = feq,
                                 val  norm  = norm,
                                 axiom .

  (* fkey is injective *)
  predicate key_injective (f : F.fset) =
    forall e1 e2.
    F.fmem e1 f -> F.fmem e2 f ->
    fkey e1 = fkey e2 -> e1 = e2

  type collection = {
    content : F.fset
  } invariant {
    key_injective content
  } by {
    content = F.fset0;
  }

  (* ------------------------------------------------------------------------ *)
  type view = list key

  (* ------------------------------------------------------------------------ *)
  let rec function eq_view (v1 v2 : view) : bool
  variant { v1, v2 }
  = match v1,v2 with
  | Cons k1 tl1, Cons k2 tl2 ->
    if k1 = k2 then
      eq_view tl1 tl2
    else false
  | Nil,Nil -> true
  | _ -> false
  end

  (* ------------------------------------------------------------------------ *)
  let function mk (s : F.fset) : collection
  requires { key_injective s }
  ensures { F.(==) s (content result) }
  = { content = s }

  (* ------------------------------------------------------------------------ *)
  let function elts (c : collection) : list t
  ensures { IS.sorted result }
  (* ensures { F.sorted result } *)
  =
  F.content c.content

  (* Set theory ************************************************************* *)

  (* ------------------------------------------------------------------------ *)
  let function empty : collection = mk F.fset0

  (* ------------------------------------------------------------------------ *)
  predicate is_empty (c : collection) = is_nil (elts c)

  (* ------------------------------------------------------------------------ *)
  predicate mem (a : t) (c : collection) = F.fmem a c.content

  (* ------------------------------------------------------------------------ *)
  lemma mem_empty : is_empty empty

  (* ------------------------------------------------------------------------ *)
  let function card (c : collection) : int
  ensures { result >= 0 }
  = F.fcard c.content

  (* ------------------------------------------------------------------------ *)
  predicate (==) (c1 c2 : collection) = F.(==) c1.content c2.content

  (* shall this be a lemma ? *)
  axiom eqEquality : forall c1 c2. c1 == c2 <-> c1 = c2

  (* ------------------------------------------------------------------------ *)
  lemma mk_content: forall c.
  (mk (c.content)) == c

  (* ------------------------------------------------------------------------ *)
  lemma content_mk: forall s.
  F.(==) (content (mk s)) s

  (* ------------------------------------------------------------------------ *)
  lemma mk_injective: forall s1 s2.
  mk s1 == mk s2 -> F.(==) s1 s2

  (* ------------------------------------------------------------------------ *)
  predicate subset (c1 c2 : collection) = F.fsubset c1.content c2.content

  (* ------------------------------------------------------------------------ *)
  function diff (c1 c2 : collection) : collection
  = mk (F.fsetD c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function inter (c1 c2 : collection) : collection
  = mk (F.fsetI c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function union (c1 c2 : collection) : collection
  = mk (F.fsetU c1.content c2.content)

  (* Singleton ************************************************************** *)

  (* ------------------------------------------------------------------------ *)
  lemma one_unary_injective: forall a. key_injective (F.mk (Cons a Nil))

  (* ------------------------------------------------------------------------ *)
  let function singleton (a : t) : collection = mk (F.mk (Cons a Nil))

  (* ------------------------------------------------------------------------ *)
  lemma mem_singleton: forall a1 a2 : t.
  mem a1 (singleton a2) -> a1 = a2

  (* ------------------------------------------------------------------------ *)
  lemma card_singleton: forall a : t. card (singleton a) = 1

  (* ------------------------------------------------------------------------ *)
  lemma subset_singleton: forall a : t, c : collection.
  subset (singleton a) c <-> mem a c

  (* Collection API ********************************************************* *)

  (* ------------------------------------------------------------------------ *)
  let rec function list_to_view (l : list t) : view
  variant { l }
  ensures { forall k. M.mem k result <-> exists e. M.mem e l /\ fkey e = k }
  ensures { L.length result = L.length l }
  =
  match l with
  | Cons e tl -> Cons (fkey e) (list_to_view tl)
  | Nil -> Nil
  end

  (* ------------------------------------------------------------------------ *)
  let rec function to_view (c : collection) : view
  ensures { forall k. M.mem k result <-> exists e. mem e c /\ fkey e = k }
  ensures { L.length result = card c }
  =
  list_to_view (elts c)

  (* ------------------------------------------------------------------------ *)
  let rec function vmem (k: key) (v: view) : bool
  variant { v }
  ensures { result <-> M.mem k v }
  =
  match v with
    | Nil      -> false
    | Cons e tl -> k = e || vmem k tl
  end

  let function contains (k : key) (c : collection)
  ensures { result <-> exists e. mem e c /\ fkey e = k }
  = vmem k (to_view c)

  (* ------------------------------------------------------------------------ *)
  let function length (v : view) : int = L.length v

  (* ------------------------------------------------------------------------ *)
  let rec function internal_get (l : list t) (k : key) : option t
  variant { l }
  ensures { vmem k (list_to_view l) ->
    exists e. result = Some e  /\ fkey e = k
  }
  =
  match l with
  | Cons e tl ->
    if fkey e = k
    then Some e
    else internal_get tl k
  | Nil -> None
  end

  let function get (c : collection) (k : key) : option t
  ensures { contains k c -> exists e. result = Some e /\ fkey e = k }
  = internal_get (elts c) k

  (* ------------------------------------------------------------------------ *)
  let function view_to_list (v : view) (c : collection) : list t
  =
  let rec function internal_view_to_list (v : view) (l : list t) : list t
  variant { v }
  =
  match v with
  | Cons k tl ->
    match get c k with
    | Some e -> internal_view_to_list tl (Cons e l)
    | None -> internal_view_to_list tl l
    end
  | Nil -> l
  end in
  internal_view_to_list v Nil

  (* ------------------------------------------------------------------------ *)
  let function to_coll (v : view) (c : collection) : collection
  =
  mk (F.mk (view_to_list v c))

  (* ------------------------------------------------------------------------ *)
  lemma union_insert: forall a s.
  F.fmem a (F.fsetU (F.mk (Cons a Nil)) s)

  lemma eq_col_set: forall s1 s2.
  F.(==) s1 s2 <-> mk s1 == mk s2

  let add (c : collection) (a : t)
  requires { not (contains (fkey a) c) }
  ensures { mem a result }
  ensures { result == union (singleton a) c }
  = mk (F.mk (IS.insert a (elts c)))

  (* ------------------------------------------------------------------------ *)
  let set (c : collection) (k : key) (a : t) : collection
  requires { mem a c }
  ensures { get result k = Some a }
  =
  let rec internal_set (l : list t) (k : key) (a : t) : list t
  variant { l }
  requires { M.mem a (elts c) }
  ensures { internal_get l k = Some a }
  =
  match l with
  | Cons e tl ->
    if fkey e = k
    then Cons a tl
    else Cons e (internal_set tl k a)
  | Nil -> Nil
  end in
  mk (F.mk (internal_set (elts c) k a))

  (* ------------------------------------------------------------------------ *)
  let remove (c : collection) (k : key) : collection
  requires { contains k c }
  ensures { card result = card c - 1 }
  ensures { exists e. result = diff c (singleton e) /\ fkey e = k }
  =
  let rec internal_remove (l : list t) (k : key) : list t
  variant { l }
  ensures { L.length result = L.length l - 1 }
  ensures { exists e. M.mem e l /\ not (M.mem e result) /\ fkey e = k }
  =
  match l with
  | Cons e tl ->
    if fkey e = k
    then tl
    else Cons e (internal_remove tl k)
  | Nil -> Nil
  end in
  mk (F.mk (internal_remove (elts c) k))

  (* View API --------------------------------------------------------------- *)

  (* ------------------------------------------------------------------------ *)
  predicate view_is_empty (v : view) = v = Nil

  (* ------------------------------------------------------------------------ *)
  let rec function vremove (k : int) (v : view) : view
  variant { v }
  =
  match v with
  | Cons i tl ->
    if i = k then
      vremove k tl
    else
      Cons i (vremove k tl)
  | Nil -> Nil
  end

  (* ------------------------------------------------------------------------ *)
  let rec function nth (i : int) (v : view) : option key
  variant { v }
  ensures {
    0 <= i < L.length v ->
    exists k. result = Some k /\ M.mem k v
  }
  =
  match v with
  | Cons k tl -> if i = 0 then Some k else nth (i - 1) tl
  | Nil -> None
  end

  (* ------------------------------------------------------------------------ *)
  lemma nth_singleton: forall a. nth 0 (Cons a Nil) = Some a

  (* ------------------------------------------------------------------------ *)
   (* keep first i elements *)
  let function keep (i : int) (v : view) : view
  ensures { forall k. M.mem k result -> M.mem k v }
  ensures {
    0 <= i <= L.length v ->
    L.length result = i
  }
  =
  let rec function internal_keep (k : int) (v : view) : view
  variant { v }
  ensures { forall k. M.mem k result -> M.mem k v }
  ensures {
    0 <= i <= L.length v ->
    L.length result = i
  }
  =
  match v with
  | Cons e tl ->
    if k < i then
      Cons e (internal_keep (k+1) tl)
    else Nil
  | Nil -> Nil
  end in
  internal_keep 0 v

  (* ------------------------------------------------------------------------ *)
  lemma keep_none: forall v. keep 0 v = Nil

  (* ------------------------------------------------------------------------ *)
  lemma keep_next: forall v : view, i : int.
  0 <= i < L.length v ->
  exists e. nth i v = Some e /\ keep (i+1) v = A.(++) (keep i v)  (Cons e Nil)

  (* ------------------------------------------------------------------------ *)
  lemma keep_all: forall v : view, i : int.
  i >= L.length v -> keep i v = v

  (* ------------------------------------------------------------------------ *)
  (* drop first i elements *)
  let function drop (i : int) (v : view) : view
  ensures { forall k. M.mem k result -> M.mem k v }
  ensures {
    0 <= i <= L.length v ->
    L.length result = L.length v - i
  }
  =
  let rec function internal_drop (k : int) (v : view) : view
  variant { v }
  ensures { forall k. M.mem k result -> M.mem k v }
  ensures {
    0 <= i <= L.length v ->
    L.length result = i
  }
  =
  match v with
  | Cons e tl ->
    if k < i then
      internal_drop (k+1) tl
    else
      Cons e (internal_drop (k+1) tl)
  | Nil -> Nil
  end in
  internal_drop 0 v

  (* ------------------------------------------------------------------------ *)
  lemma drop_none: forall c. drop 0 c = c

  (* ------------------------------------------------------------------------ *)
  lemma drop_next: forall v, i : int.
  0 <= i < L.length v ->
  exists e. drop i v = Cons e (drop (i+1) v)

  (* ------------------------------------------------------------------------ *)
  lemma drop_all: forall v. drop (L.length v) v = Nil

  goal sanity_check : false

end

module Sort
  use list.List
  use int.Int

  (* ------------------------------------------------------------------------ *)
  type collection

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  type view = list int

  (* ------------------------------------------------------------------------ *)
  val function cmp (a b : t) : bool

  (* ------------------------------------------------------------------------ *)
  val function view_to_list (v : view) (c : collection) : list t

  (* ------------------------------------------------------------------------ *)
  val function list_to_view (l : list t) : view

  (* ------------------------------------------------------------------------ *)
  let predicate ple (a b : t) = cmp a b

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as IS with type elt = t,
                                 val le = ple

  let function sort (v : view) (c : collection)
  =
  list_to_view (IS.insertion_sort (view_to_list v c))

end

module Sum

  use  int.Int
  use  list.List
  use  list.Length
  use  option.Option

  (* ------------------------------------------------------------------------ *)
  type collection

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  type view = list int

  (* ------------------------------------------------------------------------ *)
  val function field t : int
  (* ------------------------------------------------------------------------ *)
  val function get collection int : option t

  (* ------------------------------------------------------------------------ *)
  let function sum (v : view) (c : collection) : int
  =
  let rec function internal_sum (l : view) (acc : int) : int
  variant { l }
  =
    match l with
     | Cons k tl ->
      match get c k with
      | Some e -> internal_sum tl (acc + field e)
      | None -> internal_sum tl acc
      end
     | Nil -> acc
    end
  in
  internal_sum v 0

  (* ------------------------------------------------------------------------ *)
  lemma sum_empty:
    forall v : view, c : collection. length v = 0 -> sum v c = 0

  (* ------------------------------------------------------------------------ *)
  lemma sum_singleton: forall k : int, a : t, c : collection.
  get c k = Some a ->
  sum (Cons k Nil) c = field a

end


theory Lib

  use export int.Int
  use export option.Option
  use export Utils
  use export Types
  use export Contract
  use export AssetCollection
  use export Trace

end