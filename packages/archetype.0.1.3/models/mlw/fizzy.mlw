theory Fizzy

  use archetype3.Contract
  use archetype3.Types
  use archetype3.Map
  use archetype3.Asset
  use int.Int
  use list.List
  use list.Append
  use list.List
  use list.Nth
  use option.Option
  use list.Mem

  (* TRACES ********************************************************************)

  type entry =
  | Addflightinsurance
  | Updatestatus
  | Manual

  (* asset type is built with asset key value *)
  type asset =
  | Insurance string
  | Flight string

  type field =
  | Limit
  | Premium
  | Indemnity
  | Stat
  | Product
  | Insurances

  type action =
  | Add
  | Rm
  | Get
  | Update field
  | Loop

  type trace = {
    entry : entry;
    asset : asset;
    action : action;
  }

  type traces = list trace

  let mk_trace (e : entry) (a : asset) (c : action) : traces = Cons ({
    entry = e;
    asset = a;
    action = c;
  }) Nil

  predicate performed_by_role  (tr : traces) (e : env)  (a: list action) (r:list address) =
  forall x:trace. Mem.mem (action x) a -> Mem.mem x tr -> Mem.mem (caller e) r

  predicate performed_by_tx (tr : traces) (tx2 : option entry) (tx1 : entry) (a:action) (l : list entry) =
  forall x:trace. Mem.mem x tr ->
                  Some tx1 = tx2 ->
                  action x = a ->
                  Mem.mem tx1 l

  predicate is_empty (l : list 'a) = l = Nil

  (* CONTRACT ******************************************************************)

  type status =
  | Created
  | Before
  | After
  | Cancelled
  | FlightCancelled
  | Redirected
  | Diverted

 type storage = {
   mutable owner        : address;
   (* internal insruance key generator *)
   mutable ikey         : int;
   (* asset key lists  *)
   mutable insurances   : list string;
   mutable flights      : list string;
   (* insurance fields *)
   mutable limit        : map date;
   mutable premium      : map tez;
   mutable indemnity    : map tez;
   mutable stat         : map status;
   mutable productid    : map string;
   (* flight fields *)
   mutable finsurances  : map (list string);
   (* others *)
   mutable e            : env;
   mutable ops          : transfers;
   mutable tr           : traces;
   mutable ename        : option entry;
 } by { owner = 0; ikey = 0; insurances = Nil; flights = Nil;
        limit = const 0; premium = const 0; indemnity = const 0;
        stat = const Created; productid = const 0; finsurances = const Nil;
        e = empty_env (); ops = Nil; tr = Nil; ename = None }

 let function get_transfer_amount (s : {storage}) (l : {list transfer}) (i : int) : int
 = match Nth.nth i l with
   | Some t -> t.amount
   | None   -> 0
   end

 clone archetype3.Sum as Transfers with type storage = storage,
                                  type t       = transfer,
                                  function f   = get_transfer_amount

 let all_entries (s   : storage)
                 (fi  : string)
                 (li  : date)
                 (pre : tez)
                 (ind : tez)
                 (pro : string)
                 (fk      : string)
                 (arrival : string)
                 (st  : status): unit
 raises  { NotFound }
 ensures { forall a:action. performed_by_role s.tr s.e (Cons a Nil) (Cons s.owner Nil) }
 ensures { forall tx:entry. Some tx = s.ename ->
           Transfers.sum s.ops 0 (length s.ops) = 0 }
 ensures { forall tx:entry, x:trace. Mem.mem x s.tr ->
                                     Some tx = s.ename ->
                                     Mem.mem (action x) (Cons (Update Stat) Nil) ->
                                     Mem.mem tx (Cons Updatestatus (Cons Manual Nil)) }

 =
 s.tr  <- Nil;
 s.ops <- Nil;
 match s.ename with
 | Some Addflightinsurance ->
   if caller s.e = s.owner
   then (
     let f = fi in
     s.flights <- addifnotexist fi s.flights;
     (* add insurance *)
     s.insurances <- add s.ikey s.insurances;
     s.limit      <- set s.limit f li;
     s.premium    <- set s.premium f pre;
     s.indemnity  <- set s.indemnity f ind;
     s.stat       <- set s.stat f Created;
     s.productid  <- set s.productid f pro;
     (* update finsurance *)
     s.finsurances <- set s.finsurances fi (add s.ikey (get s.finsurances f));
     s.ikey        <- s.ikey + 1;
     s.tr          <- s.tr ++ mk_trace Addflightinsurance (Insurance (s.ikey-1)) Add;
     s.tr          <- s.tr ++ mk_trace Addflightinsurance (Flight f) Add)
   else ()
  | Some Updatestatus ->
   if caller s.e = s.owner
   then
     let l = get s.finsurances fk in
     for i=0 to (length l) - 1 do
     invariant { forall a:action. performed_by_role s.tr s.e (Cons a Nil) (Cons s.owner Nil) }
     invariant { forall tx:entry. Some tx = s.ename ->
                 Transfers.sum s.ops 0 (length s.ops) = 0 }

     invariant { forall tx:entry, x:trace. Mem.mem x s.tr ->
                                           Some tx = s.ename ->
                                           Mem.mem (action x) (Cons (Update Stat) Nil) ->
                                           Mem.mem tx (Cons Updatestatus (Cons Manual Nil)) }

       let k = Asset.nth i l in
       match get s.stat k with
       | Created ->
         if arrival > get s.limit k
         then (
           s.stat <- set s.stat k After;
           s.tr   <- s.tr ++ mk_trace Updatestatus (Insurance k) (Update Stat)
         )
         else ()
       | _ -> ()
       end
     done
   else ()
 | Some Manual ->
   if caller s.e = s.owner
   then
     let l = get s.finsurances fk in
     for i=0 to (length l) - 1 do
     invariant { forall a:action. performed_by_role s.tr s.e (Cons a Nil) (Cons s.owner Nil) }
     invariant { forall tx:entry. Some tx = s.ename ->
                 Transfers.sum s.ops 0 (length s.ops) = 0 }

     invariant { forall tx:entry, x:trace. Mem.mem x s.tr ->
                                           Some tx = s.ename ->
                                           Mem.mem (action x) (Cons (Update Stat) Nil) ->
                                           Mem.mem tx (Cons Updatestatus (Cons Manual Nil)) }

       let k = Asset.nth i l in
       match get s.stat k with
       | Created ->
         s.stat <- set s.stat k st;
         s.tr   <- s.tr ++ mk_trace Updatestatus (Insurance k) (Update Stat)
       | _ -> ()
       end
     done
   else ()
 | None -> ()
 end

end