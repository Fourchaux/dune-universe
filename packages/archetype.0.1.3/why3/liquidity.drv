(** Liquidity driver *)

printer "liquidity"

prelude "[%%version 1.01]\n
let[@inline] empty_ops = ([] : operation list)

let[@inline] list_add (e, l) = e::l

let[@inline] to_key x = get x 0

let[@inline] to_val x = get x 1
"

module HighOrd
  syntax type (->) "%1 -> %2"
  syntax val  ( @ )  "%1 %2"
end

theory option.Option
  syntax type     option "%1 option"
  syntax function None   "None"
  syntax function Some   "Some %1"
end

theory Bool
  syntax type     bool  "bool"
  syntax function True  "true"
  syntax function False "false"
end

theory bool.Ite
  syntax function ite "(if %1 then %2 else %3)"
end

theory bool.Bool
  syntax function andb  "%1 && %2"
  syntax function orb   "%1 || %2"
  syntax function xorb  "%1 <> %2"
  syntax function notb  "not %1"
  syntax function implb "not %1 || %2"
end

module liquidity.Int
  syntax val toint      "%1:int"

  syntax val int_eq    "%1 = %2"
  syntax val int_ne    "%1 <> %2"

  syntax val int_ge    "%1 >= %2"
  syntax val int_le    "%1 <= %2"
  syntax val int_gt    "%1 > %2"
  syntax val int_lt    "%1 < %2"
end

module liquidity.Nat

  syntax val tonat     "%1:nat"
  syntax val nat_zero  "(0:nat)"
  syntax val nat_one   "(1:nat)"

  syntax val nat_eq    "%1 = %2"
  syntax val nat_ne    "%1 <> %2"

  syntax val nat_ge    "%1 >= %2"
  syntax val nat_le    "%1 <= %2"
  syntax val nat_gt    "%1 > %2"
  syntax val nat_lt    "%1 < %2"

end

module liquidity.Tez
  syntax val totez     "%1tz"

  syntax val tez_eq    "%1 = %2"
  syntax val tez_ne    "%1 <> %2"

  syntax val tez_gt    "%1 > %2"
  syntax val tez_ge    "%1 >= %2"
  syntax val tez_lt    "%1 < %2"
  syntax val tez_le    "%1 <= %2"

  syntax val tez_plus  "%1 + %2"
  syntax val tez_minus "%1 - %2"
end

module liquidity.Address

  syntax val key_to_addr "Contract.address (Account.default %1)"

  syntax val toaddress "%1"

  syntax val add_eq    "%1 = %2"
  syntax val add_ne    "%1 <> %2"

  syntax val kh_eq     "%1 = %2"
  syntax val kh_ne     "%1 <> %2"

end

module liquidity.Timestamp
  syntax val tim_eq    "%1 = %2"
  syntax val tim_ne    "%1 <> %2"

  syntax val tim_ge    "%1 >= %2"
  syntax val tim_le    "%1 <= %2"
  syntax val tim_gt    "%1 > %2"
  syntax val tim_lt    "%1 < %2"
end

module liquidity.Utils
  syntax val get_0_1   "%1"

  syntax val get_0_2   "(get %1 0)"
  syntax val get_1_2   "(get %1 1)"

  syntax val get_0_3   "(get %1 0)"
  syntax val get_1_3   "(get %1 1)"
  syntax val get_2_3   "(get %1 2)"

  syntax val get_0_4   "(get %1 0)"
  syntax val get_1_4   "(get %1 1)"
  syntax val get_2_4   "(get %1 2)"
  syntax val get_3_4   "(get %1 3)"

  syntax val get_0_5   "(get %1 0)"
  syntax val get_1_5   "(get %1 1)"
  syntax val get_2_5   "(get %1 2)"
  syntax val get_3_5   "(get %1 3)"
  syntax val get_4_5   "(get %1 4)"

  syntax val get_0_6   "(get %1 0)"
  syntax val get_1_6   "(get %1 1)"
  syntax val get_2_6   "(get %1 2)"
  syntax val get_3_6   "(get %1 3)"
  syntax val get_4_6   "(get %1 4)"
  syntax val get_5_6   "(get %1 5)"

  syntax val get_0_7   "(get %1 0)"
  syntax val get_1_7   "(get %1 1)"
  syntax val get_2_7   "(get %1 2)"
  syntax val get_3_7   "(get %1 3)"
  syntax val get_4_7   "(get %1 4)"
  syntax val get_5_7   "(get %1 5)"
  syntax val get_6_7   "(get %1 6)"

  syntax val get_0_8   "(get %1 0)"
  syntax val get_1_8   "(get %1 1)"
  syntax val get_2_8   "(get %1 2)"
  syntax val get_3_8   "(get %1 3)"
  syntax val get_4_8   "(get %1 4)"
  syntax val get_5_8   "(get %1 5)"
  syntax val get_6_8   "(get %1 6)"
  syntax val get_7_8   "(get %1 7)"

  syntax val get_0_9   "(get %1 0)"
  syntax val get_1_9   "(get %1 1)"
  syntax val get_2_9   "(get %1 2)"
  syntax val get_3_9   "(get %1 3)"
  syntax val get_4_9   "(get %1 4)"
  syntax val get_5_9   "(get %1 5)"
  syntax val get_6_9   "(get %1 6)"
  syntax val get_7_9   "(get %1 7)"
  syntax val get_8_9   "(get %1 8)"

  syntax val update_storage "%2 <- %3"
  syntax val update_record  "%2 <- %3"
  syntax val update_simple "%2"

  syntax val to_key    "(to_key %1)"
  syntax val to_val    "(to_val %1)"

end

module liquidity.Msg

  syntax val required                "\"required\""
  syntax val not_accept_transfer     "\"not_accept_transfer\""
  syntax val not_found               "\"not found\""
  syntax val check_condition_failed  "\"check condition failed\""
  syntax val not_valid_state         "\"not_valid_state\""
  syntax val not_supported_yet       "\"not supported yet\""
  syntax val already_exists          "\"already exists\""
  syntax val not_authorized_fun      "\"not authorized to call this function\""
  syntax val not_valid_condition     "\"not valid condition\""

end

module liquidity.List

  syntax val fold "List.fold %1 %2 %3"

  syntax val mem "list_mem %1"

  syntax val append "list_append %1"

  syntax val add "list_add %1"

  syntax val remove "list_remove %1"

  syntax val Nil "[]"

end

module liquidity.Map

  syntax val find       "Map.find %1 %2"

  syntax val mem        "Map.mem %1 %2"

  syntax val add        "Map.add %1 %2 %3"

  syntax val remove     "Map.remove %1 %2"

  syntax val update     "Map.update %1 %2 %3"

  syntax val fold       "Map.fold %1 %2 %3"

  syntax val empty_map  "empty_map"

end

module liquidity.Set

  syntax val mem           "Set.mem %1 %2"

  syntax val add           "Set.add %1 %2"

  syntax val remove        "Set.remove %1 %2"

  syntax val empty_set     "empty_set"

end

module liquidity.Current

  syntax val failwith  "Current.failwith %1"
  syntax val sender    "Current.sender %1"
  syntax val balance   "Current.balance %1"
  syntax val amount    "Current.amount %1"
  syntax val time_     "Current.time %1"

end

module liquidity.Contract

  syntax val transfer  "Account.transfer ~dest:%1 ~amount:%2"

end
