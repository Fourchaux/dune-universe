archetype competition

variable[%transferable%] organiser role

(* start date *)
variable[%mutable organiser (instate (Created))%] startdate date

(* deadline *)
variable[%mutable organiser (instate (Created))%] deadline date

variable[%traceable%] prize tez from organizer = 3500tz

variable competitor role

variable oracle role

asset submission = {
  competitor : role;
  score      : int;
  date       : date;
}

(* state machine *)
states =
 | Created     initial
 | InProgress
 | Done        with { s1 : balance = 0mtz; }
 | Closed

transition confirm from Created = {
   to InProgress when { now > startdate }
}

action submit (competitor : competitor) (score[%signedby oracle%] : int) = {
  require {
    c1 : state = InProgress;
  }

  effect {
    submission.add ({ competitor = competitor;
                      score = score;
                      date = now })
  }
}

transition decide from InProgress = {

  require {
    c2 : now > deadline;
  }
  to Done
  with effect {
    let submissions = submission.sort(asc(date)).sort(desc(score)) in
      if submissions.count() >= 3
      then (
        let first = submissions.nth(0).competitor in
        let second = submissions.nth(1).competitor in
        let third = submissions.nth(2).competitor in
        let q1 = 0.5 * prize in
        let q2 = 0.3 * prize in
        let q3 = 0.2 * prize in
        transfer q1 to first;
        transfer q2 to second;
        transfer q3 to third;
        transfer (prize - q1 - q2 - q3) to organizer)
        else if (submissions.count() >= 2)
             then (
               let first = submissions.nth(0).competitor in
               let second = submissions.nth(1).competitor in
               let q1 = 0.6 * prize in
               let q2 = 0.4 * prize in
               transfer q1 to first;
               transfer q2 to second;
               transfer (prize - q1 - q2) to organizer)
             else if (submissions.count() >= 1)
               then (
                 let first = submissions.nth(0).competitor in
                 transfer prize to first)
               else transfer back prize
  }
}
