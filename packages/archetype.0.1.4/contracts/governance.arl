archetype governance

variable[%transferable%] chairperson role

(* vote start *)
variable[%mutable chairperson (instate (Created))%] startDate date

(* vote deadline *)
variable[%mutable chairperson (instate (Created))%] deadline date

asset voter identified by address = {
  address : role;
  hasVoted : bool;
}

asset ballot identified by value = {
  value   : string;
  nbvotes : int;
}

asset winner = {
  value : string;
}

(* state machine *)
states =
 | Created initial with { s1 : isempty(winner); }
 | Voting          with { s2 : isempty(winner); }
 | Buried

action register (v : role) = {
  called by chairperson
  require {
    c1 : state = Created;
  }
  effect {
    voter.add({ address = v; hasVoted = false })
  }
}

transition start from Created = {
   to Vote when { now > startDate }
}

action vote (val : string) = {
   called by voter
   require {
     c2 : state = Voting;
     c3 : voter.get(caller).hasVoted = false;
   }

   effect {
     voter.get(caller).hasVoted := true;
     ballot.update (value, { nbvotes += 1 }, { nbvotes = 0 })
   }
}

transition bury from Voting = {
  require {
    c4 : now > deadline;
  }
  to Buried
  with effect {
    let nbvotesMax = ballot.max(nbvotes) in
    for (b in ballot) (
      if (b.nbvotes = nbvotesMax)
      then winner.add({ value = b.val })
    )
  }
}

specification {
  postcondition s3 = {
    startdate < deadline
  }
  postcondition s4 = {
    (voter.select(voter.hasVoted = true)).count() = ballot.sum(nbvotes)
  }
  postcondition s5 = {
    forall w in winner,
           forall b in ballot,
             b.nbvotes <= ballot.get(w.value).nbvotes
  }
}
