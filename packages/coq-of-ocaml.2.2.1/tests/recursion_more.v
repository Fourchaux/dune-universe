(** Generated by coq-of-ocaml *)
Require Import OCaml.OCaml.

Local Set Primitive Projections.
Local Open Scope string_scope.
Local Open Scope Z_scope.
Local Open Scope type_scope.
Import ListNotations.

Fixpoint f_map {A B : Set} (f : A -> B) (l : list A) : list B :=
  match l with
  | [] => nil
  | cons x l => cons (f x) (f_map f l)
  end.

Definition n : int :=
  let fix sum (l : list int) : int :=
    match l with
    | [] => 0
    | cons x l => Z.add x (sum l)
    end in
  sum [ 1; 2; 3 ].
