let between(x, min, max : real) : bool = 
	((min < x) and (x < max))

let abs(x : real) : real = 
    if x > 0.0 then x else -x


node toto(t:real) returns ( y:real [ -1e50 ; 1e50]) =
     loop {y = t}

node main(Heat_on : bool) returns ( 
   T : real;
   T1 : real;
   T2 : real;
   T3 : real) =
assert abs(T-T1) < 0.5 in
assert abs(T-T2) < 0.5 in
assert abs(T-T3) < 0.5 in

    between(T, 6.0, 9.0)
  fby
    assert (abs(T - pre T) < 1.0 ) in
    
  loop 
    { if Heat_on then T >= pre T else T <= pre T }


-- Split main in 2 to check if it's still working...
node main1(Heat_on : bool) returns (
   T : real;
   T1 : real;
   T2 : real) = 

  assert abs(T-T1) < 0.5 in
  assert abs(T-T2) < 0.5 in

    between(T, 6.0, 9.0)
  fby
    assert (abs(T - pre T) < 1.0 ) in
    
  loop 
    { if Heat_on then T >= pre T else T <= pre T }


node main2(Heat_on : bool) returns (T3 : real) =
   loop T3 = 0.0

--------------------------------------------------------
node draw_temp(h:bool; t:real) returns (nt:real) =
    assert (abs(t - nt) < 1.0 ) in
     loop    { if h then nt >= t else nt <= t }


node main3(Heat_on : bool) returns ( 
   T : real;
   T1 : real;
   T2 : real;
   T3 : real) =

exist r:real in
assert abs(T-T1) < 0.5 in
assert abs(T-T2) < 0.5 in
assert abs(T-T3) < 0.5 in

    between(T, 6.0, 9.0)
  fby
    
  loop 
    run T := draw_temp(Heat_on, pre T)


