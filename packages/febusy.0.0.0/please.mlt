;;
#use "tools/please_lib.ml"

let version = "0.0.0"

let main_libs = ["nonstd"; "sosa"; "rresult"]

let config_merlin = Merlin.lines ~s:["."; "tools"] ~pkg:main_libs ()

let meta_content =
  String.concat ~sep:"\n"
    [ "(** Metadata Module Generated by the Build System *)"
    ; ""
    ; sprintf "let version = %S" version ]

let synopsis = "Embedded build system library"

let description () =
  let lines = Util.read_lines "README.md" in
  let recording = ref false in
  let desc = ref [] in
  List.iteri lines ~f:(fun idx l ->
      if l = "<!--end:description-->" then recording := false ;
      if !recording then desc := l :: !desc ;
      if l = "<!--begin:description-->" then recording := true ) ;
  List.rev !desc |> String.concat ~sep:"\n"

let opam_file name deps =
  Opam.v2 name ~maintainer:"Seb Mondet <seb@mondet.org>"
    ~homepage:"https://gitlab.com/smondet/febusy" ~license:"ISC" ~version
    ~ocaml_min_version:"4.03.0" ~synopsis ~description:(description ())
    ~deps:
      ( Opam.dep ~qualify:(`Version (`GT, "1.0+beta20")) ~build:true "jbuilder"
      :: List.map deps ~f:Opam.dep )

let files =
  let open File in
  [ file ".merlin" Merlin.(lines ~s:["."; "tools"] ~pkg:main_libs ())
  ; file "src/lib/jbuild"
      Jbuilder.(
        jbuild
          [ rule ~targets:["meta.ml"] [write_file "meta.ml" meta_content]
          ; lib "febusy" ~deps:("unix" :: main_libs) ])
  ; file "src/test/jbuild"
      Jbuilder.(
        jbuild [executable "main" ~libraries:["febusy"; "cmdliner"; "unix"]])
  ; repo_file "febusy.opam" (opam_file "febusy" main_libs) ]

let () = Main.make ~files ()
