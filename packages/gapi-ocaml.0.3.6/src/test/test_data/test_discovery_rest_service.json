{
  "basePath": "/discovery/v1/",
  "description":
    "Lets you discover information about other Google APIs, such as what APIs are available, the resource and method details for each API",
  "documentationLink": "http://code.google.com/apis/discovery",
  "icons": {
    "x16":
      "http://www.google.com/images/icons/feature/filing_cabinet_search-g16.png",
    "x32":
      "http://www.google.com/images/icons/feature/filing_cabinet_search-g32.png"
  },
  "id": "discovery:v1",
  "kind": "discovery#restDescription",
  "labels": [ "labs" ],
  "name": "discovery",
  "parameters": {
    "alt": {
      "default": "json",
      "description": "Data format for the response.",
      "enum": [ "json" ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description":
        "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description":
        "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description":
        "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
      "location": "query",
      "type": "string"
    },
    "userIp": {
      "description":
        "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "apis": {
      "methods": {
        "getRest": {
          "description":
            "Retrieve the description of a particular version of an api.",
          "httpMethod": "GET",
          "id": "discovery.apis.getRest",
          "parameterOrder": [ "api", "version" ],
          "parameters": {
            "api": {
              "description": "The name of the API.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "version": {
              "description": "The version of the API.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "apis/{api}/{version}/rest",
          "response": { "$ref": "RestDescription" }
        },
        "list": {
          "description":
            "Retrieve the list of APIs supported at this endpoint.",
          "httpMethod": "GET",
          "id": "discovery.apis.list",
          "parameters": {
            "label": {
              "description":
                "Only include APIs with a matching label, such as 'graduated' or 'labs'.",
              "enum": [ "deprecated", "graduated", "labs" ],
              "enumDescriptions": [
                "APIs that have been deprecated.",
                "Supported APIs that have graduated from labs.",
                "APIs that are experimental"
              ],
              "location": "query",
              "type": "string"
            },
            "name": {
              "description": "Only include APIs with the given name.",
              "location": "query",
              "type": "string"
            },
            "preferred": {
              "default": "false",
              "description": "Return only the preferred version of an API.",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "apis",
          "response": { "$ref": "DirectoryList" }
        }
      }
    }
  },
  "schemas": {
    "DirectoryList": {
      "id": "DirectoryList",
      "properties": {
        "items": {
          "description":
            "The individual directory entries. One entry per api/version pair.",
          "items": {
            "properties": {
              "description": {
                "description": "The description of this API.",
                "type": "string"
              },
              "discoveryLink": {
                "description": "A link to the discovery document.",
                "type": "string"
              },
              "documentationLink": {
                "description":
                  "A link to human readable documentation for the API.",
                "type": "string"
              },
              "icons": {
                "description":
                  "Links to 16x16 and 32x32 icons representing the API.",
                "properties": {
                  "x16": {
                    "description": "The url of the 16x16 icon.",
                    "type": "string"
                  },
                  "x32": {
                    "description": "The url of the 32x32 icon.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The id of this API.",
                "type": "string"
              },
              "kind": {
                "default": "discovery#directoryItem",
                "description": "The kind for this response.",
                "type": "string"
              },
              "labels": {
                "description":
                  "Labels for the status of this API, such as labs or deprecated.",
                "items": { "type": "string" },
                "type": "array"
              },
              "name": {
                "description": "The name of the API.",
                "type": "string"
              },
              "preferred": {
                "description":
                  "True if this version is the preferred version to use.",
                "type": "boolean"
              },
              "title": {
                "description": "The title of this API.",
                "type": "string"
              },
              "version": {
                "description": "The version of the API.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "kind": {
          "default": "discovery#directoryList",
          "description": "The kind for this response.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JsonSchema": {
      "id": "JsonSchema",
      "properties": {
        "$ref": {
          "description":
            "A reference to another schema. The value of this property is the \"id\" of another schema.",
          "type": "string"
        },
        "additionalProperties": {
          "$ref": "JsonSchema",
          "description":
            "If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object."
        },
        "default": {
          "description":
            "The default value of this property (if one exists).",
          "type": "string"
        },
        "description": {
          "description": "A description of this object.",
          "type": "string"
        },
        "enum": {
          "description": "Values this parameter may take (if it is an enum).",
          "items": { "type": "string" },
          "type": "array"
        },
        "enumDescriptions": {
          "description":
            "The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array.",
          "items": { "type": "string" },
          "type": "array"
        },
        "format": {
          "description":
            "An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for this schema.",
          "type": "string"
        },
        "items": {
          "$ref": "JsonSchema",
          "description":
            "If this is a schema for an array, this property is the schema for each element in the array."
        },
        "location": {
          "description":
            "Whether this parameter goes in the query or the path for REST requests.",
          "type": "string"
        },
        "maximum": {
          "description": "The maximum value of this parameter.",
          "type": "string"
        },
        "minimum": {
          "description": "The minimum value of this parameter.",
          "type": "string"
        },
        "pattern": {
          "description":
            "The regular expression this parameter must conform to.",
          "type": "string"
        },
        "properties": {
          "additionalProperties": { "$ref": "JsonSchema" },
          "description":
            "If this is a schema for an object, list the schema for each property of this object.",
          "type": "object"
        },
        "repeated": {
          "description": "Whether this parameter may appear multiple times.",
          "type": "boolean"
        },
        "required": {
          "description": "Whether the parameter is required.",
          "type": "boolean"
        },
        "type": {
          "description":
            "The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RestDescription": {
      "id": "RestDescription",
      "properties": {
        "auth": {
          "description": "Authentication information.",
          "properties": {
            "oauth2": {
              "description": "OAuth 2.0 authentication information.",
              "properties": {
                "scopes": {
                  "additionalProperties": {
                    "description": "The scope value.",
                    "properties": {
                      "description": {
                        "description": "Description of scope.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "Available OAuth 2.0 scopes.",
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "basePath": {
          "description": "The base URI path for REST requests.",
          "type": "string"
        },
        "description": {
          "description": "The description of this API.",
          "type": "string"
        },
        "documentationLink": {
          "description":
            "A link to human readable documentation for the API.",
          "type": "string"
        },
        "features": {
          "description": "A list of supported features for this API.",
          "items": { "type": "string" },
          "type": "array"
        },
        "icons": {
          "description":
            "Links to 16x16 and 32x32 icons representing the API.",
          "properties": {
            "x16": {
              "description": "The url of the 16x16 icon.",
              "type": "string"
            },
            "x32": {
              "description": "The url of the 32x32 icon.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "id": { "description": "The id of this API.", "type": "string" },
        "kind": {
          "default": "discovery#restDescription",
          "description": "The kind for this response.",
          "type": "string"
        },
        "labels": {
          "description":
            "Labels for the status of this API, such as labs or deprecated.",
          "items": { "type": "string" },
          "type": "array"
        },
        "methods": {
          "additionalProperties": { "$ref": "RestMethod" },
          "description": "API-level methods for this API.",
          "type": "object"
        },
        "name": { "description": "The name of this API.", "type": "string" },
        "parameters": {
          "additionalProperties": { "$ref": "JsonSchema" },
          "description": "Common parameters that apply across all apis.",
          "type": "object"
        },
        "protocol": {
          "default": "rest",
          "description": "The protocol described by this document.",
          "type": "string"
        },
        "resources": {
          "additionalProperties": { "$ref": "RestResource" },
          "description": "The resources in this API.",
          "type": "object"
        },
        "schemas": {
          "additionalProperties": { "$ref": "JsonSchema" },
          "description": "The schemas for this API.",
          "type": "object"
        },
        "title": {
          "description": "The title of this API.",
          "type": "string"
        },
        "version": {
          "description": "The version of this API.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RestMethod": {
      "id": "RestMethod",
      "properties": {
        "description": {
          "description": "Description of this method.",
          "type": "string"
        },
        "httpMethod": {
          "description": "HTTP method used by this method.",
          "type": "string"
        },
        "id": {
          "description":
            "A unique ID for this method. This property can be used to match methods between different versions of Discovery.",
          "type": "string"
        },
        "mediaUpload": {
          "description": "Media upload parameters.",
          "properties": {
            "accept": {
              "description":
                "MIME Media Ranges for acceptable media uploads to this method.",
              "items": { "type": "string" },
              "type": "array"
            },
            "maxSize": {
              "description":
                "Maximum size of a media upload, such as \"1MB\", \"2GB\" or \"3TB\".",
              "type": "string"
            },
            "protocols": {
              "description": "Supported upload protocols.",
              "properties": {
                "resumable": {
                  "description":
                    "Supports the Resumable Media Upload protocol.",
                  "properties": {
                    "multipart": {
                      "default": "true",
                      "description":
                        "True if this endpoint supports uploading multipart media.",
                      "type": "boolean"
                    },
                    "path": {
                      "description":
                        "The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "simple": {
                  "description":
                    "Supports uploading as a single HTTP request.",
                  "properties": {
                    "multipart": {
                      "default": "true",
                      "description":
                        "True if this endpoint supports upload multipart media.",
                      "type": "boolean"
                    },
                    "path": {
                      "description":
                        "The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "parameterOrder": {
          "description":
            "Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first.",
          "items": { "type": "string" },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": { "$ref": "JsonSchema" },
          "description": "Details for all parameters in this method.",
          "type": "object"
        },
        "path": {
          "description":
            "The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.",
          "type": "string"
        },
        "request": {
          "description": "The schema for the request.",
          "properties": {
            "$ref": {
              "description": "Schema ID for the request schema.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "response": {
          "description": "The schema for the response.",
          "properties": {
            "$ref": {
              "description": "Schema ID for the response schema.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "scopes": {
          "description": "OAuth 2.0 scopes applicable to this method.",
          "items": { "type": "string" },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RestResource": {
      "id": "RestResource",
      "properties": {
        "methods": {
          "additionalProperties": { "$ref": "RestMethod" },
          "description": "Methods on this resource.",
          "type": "object"
        },
        "resources": {
          "additionalProperties": { "$ref": "RestResource" },
          "description": "Sub-resources on this resource.",
          "type": "object"
        }
      },
      "type": "object"
    }
  },
  "title": "APIs Discovery Service",
  "version": "v1"
}

