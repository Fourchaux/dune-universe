(define-node greycounter
((greycounter.usr.reset Bool :input :for-inv-gen)
 (greycounter.usr.out Bool :for-inv-gen)
 (greycounter.res.init_flag Bool :for-inv-gen :init-flag)
 (greycounter.impl.usr.a Bool :for-inv-gen)
 (greycounter.impl.usr.b Bool :for-inv-gen))

  (init
    (and
     (= greycounter.impl.usr.b false)
     (= greycounter.impl.usr.a false)
     (=
      greycounter.usr.out
      (and greycounter.impl.usr.a greycounter.impl.usr.b))
     greycounter.res.init_flag))

  (trans
    (and
     (=
      (prime greycounter.impl.usr.b)
      (and (not (prime greycounter.usr.reset)) greycounter.impl.usr.a))
     (=
      (prime greycounter.impl.usr.a)
      (and (not (prime greycounter.usr.reset)) (not greycounter.impl.usr.b)))
     (=
      (prime greycounter.usr.out)
      (and (prime greycounter.impl.usr.a) (prime greycounter.impl.usr.b)))
     (not (prime greycounter.res.init_flag))))

  )

(define-node intcounter
((intcounter.usr.reset Bool :input :for-inv-gen)
 (intcounter.usr.max Int :const :input :for-inv-gen)
 (intcounter.usr.out Bool :for-inv-gen)
 (intcounter.res.init_flag Bool :for-inv-gen :init-flag)
 (intcounter.impl.usr.t Int :for-inv-gen))

  (init
    (and
     (= intcounter.impl.usr.t 0)
     (= intcounter.usr.out (= intcounter.impl.usr.t 2))
     intcounter.res.init_flag))

  (trans
    (and
     (=
      (prime intcounter.impl.usr.t)
      (ite
       (or
        (prime intcounter.usr.reset)
        (= intcounter.impl.usr.t intcounter.usr.max))
       0
       (+ intcounter.impl.usr.t 1)))
     (= (prime intcounter.usr.out) (= (prime intcounter.impl.usr.t) 2))
     (not (prime intcounter.res.init_flag))))

  )

(define-node top
((top.usr.reset Bool :input :for-inv-gen)
 (top.usr.OK Bool :for-inv-gen)
 (top.res.init_flag Bool :for-inv-gen :init-flag)
 (top.res.abs_0 Bool :for-inv-gen)
 (top.res.abs_1 (IntRange 3 3) :const :for-inv-gen)
 (top.res.abs_2 Bool :for-inv-gen)
 (top.res.inst_4 Bool :for-inv-gen)
 (top.res.inst_3 Bool :for-inv-gen)
 (top.res.inst_2 Bool :for-inv-gen)
 (top.res.inst_1 Bool :for-inv-gen)
 (top.res.inst_0 Int :for-inv-gen))

  (init
    (let
     ((X1 top.res.abs_2))
     (let
      ((X2 top.res.abs_0))
      (and
       (= top.usr.OK (= X2 X1))
       (= top.res.abs_1 3)
       (__node_init_greycounter_0
        top.usr.reset
        top.res.abs_0
        top.res.inst_4
        top.res.inst_3
        top.res.inst_2)
       (__node_init_intcounter_0
        top.usr.reset
        top.res.abs_1
        top.res.abs_2
        top.res.inst_1
        top.res.inst_0)
       (<= 3 top.res.abs_1 3)
       top.res.init_flag))))

  (trans
    (let
     ((X1 (prime top.res.abs_2)))
     (let
      ((X2 (prime top.res.abs_0)))
      (and
       (= (prime top.usr.OK) (= X2 X1))
       (= top.res.abs_1 3)
       (__node_trans_greycounter_0
        (prime top.usr.reset)
        (prime top.res.abs_0)
        (prime top.res.inst_4)
        (prime top.res.inst_3)
        (prime top.res.inst_2)
        top.usr.reset
        top.res.abs_0
        top.res.inst_4
        top.res.inst_3
        top.res.inst_2)
       (__node_trans_intcounter_0
        (prime top.usr.reset)
        top.res.abs_1
        (prime top.res.abs_2)
        (prime top.res.inst_1)
        (prime top.res.inst_0)
        top.usr.reset
        top.res.abs_2
        top.res.inst_1
        top.res.inst_0)
       (<= 3 top.res.abs_1 3)
       (not (prime top.res.init_flag))))))

  (subsystems
    (greycounter
     ((top.usr.reset greycounter.usr.reset)
      (top.res.abs_0 greycounter.usr.out)
      (top.res.inst_2 greycounter.impl.usr.b)
      (top.res.inst_3 greycounter.impl.usr.a)
      (top.res.inst_4 greycounter.res.init_flag))
      (lambda ((X1 Bool)) (X1)))
    (intcounter
     ((top.usr.reset intcounter.usr.reset)
      (top.res.abs_1 intcounter.usr.max)
      (top.res.abs_2 intcounter.usr.out)
      (top.res.inst_0 intcounter.impl.usr.t)
      (top.res.inst_1 intcounter.res.init_flag))
      (lambda ((X1 Bool)) (X1))))

  (props ((OK top.usr.OK :user :24-2)))

  )

