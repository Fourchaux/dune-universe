;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  ;;
;; Signature for k-induction proofs ;;
;;                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Depends on sat.plf, smt.plf, and th_base.plf


;; (declare index sort)
;; (declare ind (! n mpz (term index)))

;; in case we want integer indexes later, use this instead
(define index Int)
(define ind a_int)

;; relations over indexes (used for transition relation)
(define rel (! x mpz (! y mpz formula)))

;; sets over indexes (used for initial formula and properties)
(define set (! x mpz formula))

;; derivability judgment for invariance proofs (P invariant in system (I, S))
(declare invariant (! I set (! T rel (! P set type))))



;;---------------------------

;; derivation judgment for weak observational equivalence between two systems
(declare weak_obs_eq
         (! I1 set (! T1 rel (! P1 set
         (! I2 set (! T2 rel (! P2 set type)))))))


;; rule for proving observational equivalence between two transitions systems
;; with respect to their properties

(declare obs_eq
  (! I1 set (! T1 rel (! P1 set
  (! I2 set (! T2 rel (! P2 set 

  ;; Given formula to fix inputs as being the same in the two systems
  (! same_inputs set                         

  ;; proof that P1 <=> P2 is invariant in the observer
  (! ue
     (invariant
      (\ i (and (same_inputs i) (and (I1 i) (I2 i))))
      (\ i (\ j (and (same_inputs j) (and (T1 i j) (T2 i j)))))
      (\ k (iff (P1 k) (P2 k))))
  ;;------------------------------
  (weak_obs_eq I1 T1 P1 I2 T2 P2)

)))))))))


;; derivation judgment for safety (system (I,T) is safe wrt P)
(declare safe (! I set (! T rel (! P set type))))


;; proof rule for proving safety:
;;  - invariance of property of original system
;;  - weak observationnal equivalence with a system generated by a different
;;    frontend

(declare inv+obs
 (! I set
 (! T rel
 (! P set

 (! I' set
 (! T' rel
 (! P' set
    
 ;; proof that P is invariant in (I,T)
 (! i
    (invariant I T P)

 ;; proof that it is weak-obs-equivalent to another system   
 (! weo
    (weak_obs_eq I T P I' T' P')

 ;;----------------------------------
 (safe I T P)

)))))))))



;; Unrolling transition relation k times starting from the initial state
(program unroll_from ((T rel) (I set) (k mpz)) formula
 (mp_ifneg k
   (fail formula)
   (mp_ifzero k
     (I 0)
     (let j (mp_add k (~ 1))
       (and (unroll_from T I j) (T j k))))))



;; base for k steps
(program base_k ((I set) (T rel) (P set) (k mpz)) formula
 (mp_ifneg k
   (fail formula)
   (mp_ifzero k
     (and (unroll_from T I 0) (not (P 0)))
     (let j (mp_add k (~ 1))
       (or (base_k I T P j) (and (unroll_from T I k) (not (P k))))))))


;; base for k-1 steps
(program base ((I set) (T rel) (P set) (k mpz)) formula
 (base_k I T P (mp_add k (~ 1))))


;; unroll step case under assumption
(program unroll_with ((T rel) (P set) (k mpz)) formula
 (mp_ifneg k
   (fail formula)
   (mp_ifzero k
     (P 0)
     (let j (mp_add k (~ 1))
       (mp_ifzero j
          (and (P 0) (T 0 1))
          (and (unroll_with T P j) (and (P j) (T j k))))))))


;; program to construct step formula
(program step ((T rel) (P set) (k mpz)) formula
  (and (unroll_with T P k) (not (P k))))


;; Rule for weakening of invariants

(declare invariant-implies2
  (! I set
  (! T rel
  (! P1 set
  (! P2 set

  (! u
     (! k mpz      
     (! v1 (th_holds (P1 k))
     (! v2 (th_holds (not (P2 k)))
        (holds cln))))

  (! i1
     (invariant I T P1)
  ;--------------------------------
  (invariant I T P2)

  )))))))



;; Other version

(declare invariant-implies
  (! I set
  (! T rel
  (! P1 set
  (! P2 set

  ;; proof that P1 => P2
  (! u
     (! k mpz      
     (! v (th_holds (not (impl (P1 k) (P2 k))))
        (holds cln)))

  ;; proof that P1 is invariant
  (! i1
     (invariant I T P1)

  ;--------------------------------
  (invariant I T P2)

  )))))))


;; Rule for k-induction principle

(declare kinduction
  (! k mpz      ; bound k
  (! I set      ; initial states
  (! T rel      ; transition relation
  (! P set      ; k-inductice invariant

  (! B formula  ; formula for base case (see side-condition r1)
  (! r1 (^ (base I T P k) B)

  (! S formula  ; formula for step case (see side-condition r2)
  (! r2 (^ (step T P k) S)
         
  (! ub (! vb (th_holds B) (holds cln)) ; proof of base

  (! us (! vs (th_holds S) (holds cln)) ; proof of step


  ;------------------------------------
  (invariant I T P)

)))))))))))


;; TODO
;; Compositional

(declare sys-approx (! I1 set (! T1 rel (! I2 set (! T2 rel type)))))

(declare impl-approx
   (! I1 set
   (! T1 rel
   (! I2 set
   (! T2 rel
   (! ui (! k mpz (th_holds (impl (I1 k) (I2 k))))
   (! ui (! i mpz (! j mpz (th_holds (impl (T1 i j) (T2 i j)))))
            (sys-approx I1 T1 I2 T2))))))))

(declare sys-approx-inv
  (! I1 set
  (! T1 rel
  (! I2 set
  (! T2 rel
  (! P set
  (! ua (sys-approx I1 T1 I2 T2)
  (! up (invariant I2 T2 P)
    (invariant I1 T1 P)))))))))
  
(declare contract type)

(declare contract_ag (! Assume set (! Guarantee set (contract))))

(declare respect_contract (! I set (! T rel (! C contract type))))

(declare assume-guarantee
  (! I set
  (! T rel
  (! A set
  (! G set
  (! ag (! ia (invariant I T A) (invariant I T G))
  (respect_contract I T (contract_ag A G))))))))


(declare prop_to_contract
  (! I set
  (! T rel
  (! P set
  (! up (invariant I T P)
    (respect_contract I T (contract_ag (\ _ true) P)))))))

(declare contract_to_prop
  (! I set
  (! T rel
  (! A set
  (! G set
  (! up (invariant 
         (\ i (and (I i) (A i)))
         (\ i (\ j (and (T i j) (A j))))
         G)
    (respect_contract I T (contract_ag A G))))))))


(declare abstract_respect_contract
  (! I set
  (! T rel
  (! A set
  (! G set
  (! ui (invariant A (\ _ A) G)
    (respect_contract I T (contract_ag A G))))))))



;;-------------------------------------------------------------------------
;; Some tests

;; (define T (: rel (\ x (\ y (and (= _ (ind x) (ind 1)) (= _ (ind y) (ind 2)))))))
;; (define I (: set (\ x (= _ (ind x) (ind 0)))))

;; (declare T rel)
;; (declare I set)
;; (declare P set)


;; (run (unroll_from T I 4)))
;; ;; result:
;; ;; (and (and (and (and (I 0) (T 0 1)) (T 1 2)) (T 2 3)) (T 3 4))
;; (run (unroll_from T I (~ 1))))
;; ;; result:
;; ;; fail

;; (run (base I T P 2))
;; (run (base I T P 4))
;; (run (base I T P (~ 1)))
;; (run (base I T P 0))
;; (run (base I T P 1))

;; (run (unroll_with T P 4))
;; (run (unroll_with T P 1))
;; (run (unroll_with T P 0))
;; (run (unroll_with T P (~ 1)))

;; (run (step T P 2))
;; (run (step T P 4))

;; ;;-------------------------------------------------------------------------


;; (check

;;  (% xI set
;;  (% xT rel
;;  (% xP set

;;  (% B2 (th_holds (or (and (xI 0) (not (xP 0))) (and (and (xI 0) (xT 0 1)) (not (xP 1)))))
;;  (% S2 (th_holds (and (and (and (xP 0) (xT 0 1)) (and (xP 1) (xT 1 2))) (not (xP 2))))
    
;;  (: (invariant xI xT xP)

;;  (kinduction 2 _ _ _
;;    ;; _ _
;;    ;; B and S can be inferred from the other types (and the side conditions)
;;    (or (and (xI 0) (not (xP 0))) (and (and (xI 0) (xT 0 1)) (not (xP 1))))
             
;;    (and (and (and (xP 0) (xT 0 1)) (and (xP 1) (xT 1 2))) (not (xP 2)))


;;    (\ pb (clausify_false (trust))) ;; hole for proof of base at 2
     
;;    (\ ps (clausify_false (trust))) ;; hole for proof of step at 2

;;  ))))))))
   
