type t = enum {A, B, C};

node integr (e: int) returns (s: int);
let
  s = e + (0 -> pre s); 
tel

node id (e: int) returns (s: int);
let
  s = e;
tel

node test (e: int; cl: t) returns
 (s, t1: int);
let 
  s = integr(e);
  
  t1 = merge cl
        (A -> s when A(cl))
        (C -> s when C(cl));
  
  --%PROPERTY t1 <= s;
tel

  
