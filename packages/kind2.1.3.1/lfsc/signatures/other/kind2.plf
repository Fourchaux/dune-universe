;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  ;;
;; Signature for k-induction proofs ;;
;;                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Depends on sat.plf, th_base.plf and smt.plf


(declare %index% type)
(declare index sort)
(declare mk_ind (! i %index% (term index)))


(define rel (! x %index% (! y %index% formula)))
(define set (! x %index% formula))


(declare invariant (! I set (! T rel (! P set type))))


;; predefined indexes (constructors)
(declare %%0 %index%)
(declare %%1 %index%)
(declare %%2 %index%)
(declare %%3 %index%)
(declare %%4 %index%)
(declare %%5 %index%)
(declare %%6 %index%)
(declare %%7 %index%)
(declare %%8 %index%)
(declare %%9 %index%)
(declare %%10 %index%)
(declare %%11 %index%)
(declare %%12 %index%)
(declare %%13 %index%)
(declare %%14 %index%)
(declare %%15 %index%)
(declare %%16 %index%)
(declare %%17 %index%)
(declare %%18 %index%)
(declare %%19 %index%)
(declare %%20 %index%)
(declare %%21 %index%)
(declare %%22 %index%)
(declare %%23 %index%)
(declare %%24 %index%)
(declare %%25 %index%)
(declare %%26 %index%)
(declare %%27 %index%)
(declare %%28 %index%)
(declare %%29 %index%)
(declare %%30 %index%)
(declare %%31 %index%)
(declare %%32 %index%)
(declare %%33 %index%)
(declare %%34 %index%)
(declare %%35 %index%)
(declare %%36 %index%)
(declare %%37 %index%)
(declare %%38 %index%)
(declare %%39 %index%)
(declare %%40 %index%)
(declare %%41 %index%)
(declare %%42 %index%)
(declare %%43 %index%)
(declare %%44 %index%)
(declare %%45 %index%)
(declare %%46 %index%)
(declare %%47 %index%)
(declare %%48 %index%)
(declare %%49 %index%)
(declare %%50 %index%)

;; conversion with to native integers
(program mpz_of_index ((i %index%)) mpz
  (match i
    (%%0 0)
    (%%1 1)
    (%%2 2)
    (%%3 3)
    (%%4 4)
    (%%5 5)
    (%%6 6)
    (%%7 7)
    (%%8 8)
    (%%9 9)
    (%%10 10)
    (%%11 11)
    (%%12 12)
    (%%13 13)
    (%%14 14)
    (%%15 15)
    (%%16 16)
    (%%17 17)
    (%%18 18)
    (%%19 19)
    (%%20 20)
    (%%21 21)
    (%%22 22)
    (%%23 23)
    (%%24 24)
    (%%25 25)
    (%%26 26)
    (%%27 27)
    (%%28 28)
    (%%29 29)
    (%%30 30)
    (%%31 31)
    (%%32 32)
    (%%33 33)
    (%%34 34)
    (%%35 35)
    (%%36 36)
    (%%37 37)
    (%%38 38)
    (%%39 39)
    (%%40 40)
    (%%41 41)
    (%%42 42)
    (%%43 43)
    (%%44 44)
    (%%45 45)
    (%%46 46)
    (%%47 47)
    (%%48 48)
    (%%49 49)
    (%%50 50)
    (default (fail mpz))))
         
;; conversion from native integers
(program decr_index ((i %index%)) %index%
  (match i
    (%%1 %%0)
    (%%2 %%1)
    (%%3 %%2)
    (%%4 %%3)
    (%%5 %%4)
    (%%6 %%5)
    (%%7 %%6)
    (%%8 %%7)
    (%%9 %%8)
    (%%10 %%9)
    (%%11 %%10)
    (%%12 %%11)
    (%%13 %%12)
    (%%14 %%13)
    (%%15 %%14)
    (%%16 %%15)
    (%%17 %%16)
    (%%18 %%17)
    (%%19 %%18)
    (%%20 %%19)
    (%%21 %%20)
    (%%22 %%21)
    (%%23 %%22)
    (%%24 %%23)
    (%%25 %%24)
    (%%26 %%25)
    (%%27 %%26)
    (%%28 %%27)
    (%%29 %%28)
    (%%30 %%29)
    (%%31 %%30)
    (%%32 %%31)
    (%%33 %%32)
    (%%34 %%33)
    (%%35 %%34)
    (%%36 %%35)
    (%%37 %%36)
    (%%38 %%37)
    (%%39 %%38)
    (%%40 %%39)
    (%%41 %%40)
    (%%42 %%41)
    (%%43 %%42)
    (%%44 %%43)
    (%%45 %%44)
    (%%46 %%45)
    (%%47 %%46)
    (%%48 %%47)
    (%%49 %%48)
    (%%50 %%49)
    (default (fail %index%))))     

(program incr_index ((i %index%)) %index%
  (match i
    (%%0 %%1)
    (%%1 %%2)
    (%%2 %%3)
    (%%3 %%4)
    (%%4 %%5)
    (%%5 %%6)
    (%%6 %%7)
    (%%7 %%8)
    (%%8 %%9)
    (%%9 %%10)
    (%%10 %%11)
    (%%11 %%12)
    (%%12 %%13)
    (%%13 %%14)
    (%%14 %%15)
    (%%15 %%16)
    (%%16 %%17)
    (%%17 %%18)
    (%%18 %%19)
    (%%19 %%20)
    (%%20 %%21)
    (%%21 %%22)
    (%%22 %%23)
    (%%23 %%24)
    (%%24 %%25)
    (%%25 %%26)
    (%%26 %%27)
    (%%27 %%28)
    (%%28 %%29)
    (%%29 %%30)
    (%%30 %%31)
    (%%31 %%32)
    (%%32 %%33)
    (%%33 %%34)
    (%%34 %%35)
    (%%35 %%36)
    (%%36 %%37)
    (%%37 %%38)
    (%%38 %%39)
    (%%39 %%40)
    (%%40 %%41)
    (%%41 %%42)
    (%%42 %%43)
    (%%43 %%44)
    (%%44 %%45)
    (%%45 %%46)
    (%%46 %%47)
    (%%47 %%48)
    (%%48 %%49)
    (%%49 %%50)
    (default (fail %index%))))     



;; Unrolling transition relation k times starting from the initial state
(program unroll_from ((I set) (T rel) (k %index%)) formula
  (match k
    (%%0 (I %%0))
    (default           
     (let j (decr_index k)
       (and (unroll_from I T j) (T j k)))))))







;; base for k steps

(program base_k ((I set) (T rel) (P set) (k %index%)) formula
  (match k
    (%%0 (and (unroll_from I T %%0) (not (P %%0))))
    (default           
     (let j (decr_index k)
       (or (base_k I T P j) (and (unroll_from I T k) (not (P k))))))))


;; base for k steps

(program base ((I set) (T rel) (P set) (k %index%)) formula
 (base_k I T P (decr_index k)))

;; unroll step case under assumption

(program unroll_with ((T rel) (P set) (k %index%)) formula
  (match k
    (%%0 (P %%0))
    (default           
      (let j (decr_index k)
       (match j
          (%%0 (and (P %%0) (T %%0 %%1)))
          (default (and (unroll_with T P j) (and (P j) (T j k)))))))))


(program step ((T rel) (P set) (k %index%)) formula
  (and (unroll_with T P k) (not (P k))))


;; Rule for strengthening of invariants

(declare invariant-implies
  (! I set
  (! T rel
  (! P1 set
  (! P2 set

  (! u
     (! k %index%
     (! v1 (th_holds (P1 k))
     (! v2 (th_holds (not (P2 k)))
        (holds cln))))

  (! i1
     (invariant I T P1)
  ;--------------------------------
  (invariant I T P2)

  )))))))



;; Other version

(declare invariant-implies2
  (! I set
  (! T rel
  (! P1 set
  (! P2 set

  ;; proof that P1 => P2
  (! u
     (! k %index%   
     (! v (th_holds (not (impl (P1 k) (P2 k))))
        (holds cln)))

  ;; proof that P1 is invariant
  (! i1
     (invariant I T P1)

  ;--------------------------------
  (invariant I T P2)

  )))))))


;; Rule for k-induction principle

(declare kinduction
  (! k %index%  ; bound k
  (! I set      ; initial states
  (! T rel      ; transition relation
  (! P set      ; k-inductice invariant

  (! B formula  ; formula for base case (see sc r1)
  (! r1 (^ (base I T P k) B)

  (! S formula  ; formula for step case (see sc r2)
  (! r2 (^ (step T P k) S)
         
  (! ub (! vb (th_holds B) (holds cln)) ; proof of base

  (! us (! vs (th_holds S) (holds cln)) ; proof of step


  ;------------------------------------
  (invariant I T P)

  )))))))))))

     
;;-------------------------------------------------------------------------
;; Some tests

;; (define T (: rel (\ x (\ y (and (= _ (int x) (int 1)) (= _ (int y) (int 2)))))))
;; (define I (: set (\ x (= _ (int x) (int 0)))))

;; (declare T rel)
;; (declare I set)
;; (declare P set)


;; (run (unroll_from T I 4)))
;; ;; result:
;; ;; (and (and (and (and (I 0) (T 0 1)) (T 1 2)) (T 2 3)) (T 3 4))
;; (run (unroll_from T I (~ 1))))
;; ;; result:
;; ;; fail

;; (run (base I T P 2))
;; (run (base I T P 4))
;; (run (base I T P (~ 1)))
;; (run (base I T P 0))
;; (run (base I T P 1))

;; (run (unroll_with T P 4))
;; (run (unroll_with T P 1))
;; (run (unroll_with T P 0))
;; (run (unroll_with T P (~ 1)))

;; (run (step T P 2))
;; (run (step T P 4))

;; ;;-------------------------------------------------------------------------


;; (check

;;  (% xI set
;;  (% xT rel
;;  (% xP set

;;  (% B2 (th_holds (or (and (xI 0) (not (xP 0))) (and (and (xI 0) (xT 0 1)) (not (xP 1)))))
;;  (% S2 (th_holds (and (and (and (xP 0) (xT 0 1)) (and (xP 1) (xT 1 2))) (not (xP 2))))
    
;;  (: (invariant xI xT xP)

;;  (kinduction 2 _ _ _
;;    ;; _ _
;;    ;; B and S can be inferred from the other types (and the side conditions?)
;;    (or (and (xI 0) (not (xP 0))) (and (and (xI 0) (xT 0 1)) (not (xP 1))))
             
;;    (and (and (and (xP 0) (xT 0 1)) (and (xP 1) (xT 1 2))) (not (xP 2)))


;;    (\ pb (clausify_false (trust))) ;; hole for proof of base at 2
     
;;    (\ ps (clausify_false (trust))) ;; hole for proof of step at 2

;;  ))))))))
   
