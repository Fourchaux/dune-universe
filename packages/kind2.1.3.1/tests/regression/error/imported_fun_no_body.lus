(* External node. *)
node imported ext_node (in: int) returns (out: int) ;
(*@contract
  assume in >= 0 ;
  guarantee out >= 0 ;
*)

(* External function. *)
function imported ext_fun (in: int) returns (out: int) ;
(*@contract
  assume in >= 0 ;
  guarantee out > 0 ;
*)
let
  out = in ;
tel

(* Node combining the two. Note that Kind 2 can prove the guarantee, meaning
the abstraction of the external components is forced indeed. *)
node test (in_1, in_2: int) returns (out: int) ;
(*@contract
  assume in_1 >= 0 ;
  assume in_2 >= 0 ;
  guarantee out > 0 ;
*)
var tmp_1, tmp_2: int ;
let
  tmp_1 = 0 -> pre in_1 ;
  tmp_2 = 0 -> pre in_2 ;
  out = ext_node(tmp_1) + ext_fun(tmp_2) ;
tel