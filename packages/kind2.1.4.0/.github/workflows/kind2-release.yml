name: Kind 2 Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*'

jobs:
  kind2-static-bin:
    if: github.repository == 'kind2-mc/kind2'
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host

    - name: Build and push to local registry
      uses: docker/build-push-action@v2
      with:
        file: docker/Dockerfile.StaticBuild
        context: ./
        push: true
        tags: localhost:5000/name/kind2:latest
    
    - name: Extract kind 2 binary
      id: extract
      uses: shrink/actions-docker-extract@v1
      with:
        image: localhost:5000/name/kind2:latest
        path: /kind2

    - name: Upload kind2 binary
      uses: actions/upload-artifact@v2
      with:
        path: ${{ steps.extract.outputs.destination }}
        name: linux-static


  kind2-dynamic-bin:
    if: github.repository == 'kind2-mc/kind2'
    strategy:
      matrix:
        ocaml-version: [ 4.11.1 ]
        os: [ ubuntu-18.04, macos-10.15 ]
        include:
          - os: macos-10.15
            pkg_update: brew update
            zmq_install: brew install zmq
          - os: ubuntu-18.04
            pkg_update: sudo apt-get update -y
            zmq_install: sudo apt-get install -y libzmq3-dev

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Update package information
      run: ${{ matrix.pkg_update }}

    - name: Cache opam repository
      uses: actions/cache@v2
      with:
        path: ~/.opam
        key: ${{ matrix.os }}-opam-${{ matrix.ocaml-version }}

    - name: Set up OCaml ${{ matrix.ocaml-version }}
      uses: avsm/setup-ocaml@v1
      with:
        ocaml-version: ${{ matrix.ocaml-version }}

    - name: Install ZMQ library
      run: ${{ matrix.zmq_install }}

    - name: Install Kind2 OCaml dependencies
      run: opam install -y . --deps-only

    - name: Build Kind 2
      run: opam exec make

    - name: Strip binary
      run: strip bin/kind2

    - name: Upload Kind 2 binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}
        path: bin/kind2

  create-new-release:
    if: github.repository == 'kind2-mc/kind2'
    runs-on: ubuntu-latest
    needs: [kind2-static-bin, kind2-dynamic-bin]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.id }}

    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=id::${GITHUB_REF/refs\/tags\//}
      #run: echo ::set-output name=id::${GITHUB_REF/refs\/heads\//}

    - name: Create new release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.id }}
        release_name: Kind 2 ${{ steps.get_version.outputs.id }}
        body: |
          TODO:
          - Generate and upload user_documentation.pdf
          - Replace this text with the release notes
          - Publish the release!
        draft: true
        prerelease: false
    
  upload-artifact:
    if: github.repository == 'kind2-mc/kind2'
    runs-on: ubuntu-latest
    needs: [create-new-release]
    strategy:
      matrix:
        version: [linux-static, ubuntu-18.04, macos-10.15]

    steps:
    - name: Download binary
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.version }}
    
    - name: Create tar.gz file
      id: create_tarball
      run: |
        chmod u+x kind2
        version=${{ needs.create-new-release.outputs.version }}
        tarball=kind2-$version-${{ matrix.version }}-x86_64.tar.gz
        tar -czf $tarball kind2
        echo "::set-output name=filename::$tarball"
    
    - name: Upload artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-new-release.outputs.upload_url }}
        asset_path: ${{ steps.create_tarball.outputs.filename }}
        asset_name: ${{ steps.create_tarball.outputs.filename }}
        asset_content_type: application/gzip
