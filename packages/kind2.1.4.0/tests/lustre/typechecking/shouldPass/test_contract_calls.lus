node n2 (x:int) returns (y:int);
let
        y = x;
tel


contract A(x: int; b: bool) returns (y: int);
let
   var z: int = n2(x);
   mode m1
   (require z = x;);
tel

contract C(x: int) returns (y: int);
let
  var s1: int = x;
  var z: int = x + 1;

  -- var s2: bool = ::m2; 

  mode m4
  (require ::m2;);

  mode m2
  (require z = x+11;);

  mode m3
  (require ::m4;);
tel

-- contract B(x: int) returns (y: int);
-- let

--   -- import A(s1) returns (y);

--   var s1: int = x;
--   var z: int = x + 1;

 
--    mode m2
--    (require ::A::m1;
--     require z = x+11;);


--   -- import A(z) returns(y);

--     mode m4
--     (require ::A::m1;);

--     mode m3
--     (require ::m4;);
-- tel


node n (x, y, z, w: t; blah:int) returns (ok: bool; ok2:int);
(*@contract
  import C(blah) returns(ok2);
*)
let
  ok = x = A or x = B or x = C;
  --%PROPERTY ok;
  --%PROPERTY x = y or x = z or x = w or y = z or y = w;
tel
type t = enum {A, B, C};
