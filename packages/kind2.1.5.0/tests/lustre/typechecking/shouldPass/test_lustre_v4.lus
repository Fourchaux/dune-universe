---------------------------------------------------------------
-- Examples from the V4 reference manual
---------------------------------------------------------------

-- Section 1

node count (x, y: int) returns (s: int);
let
  s = 2 * (x+y);
tel

node EDGE (X: bool) returns (Y: bool);
let
  Y = false -> X and not pre(X);
tel

node FALLING_EDGE (X: bool) returns (Y: bool);
let
  Y = EDGE(not X);
tel

node SWITCH1 (set, reset, init: bool) returns (level: bool);
let
  level = init -> if set then true else if reset then false else pre(level);
  assert not (set and reset);
tel


node SWITCH (set, reset, init: bool) returns (level: bool);
let
  level = init -> if set and not pre(level) then true else if reset then false else pre(level);
tel

node x1 (X: bool; N: int) returns ();
var
  N1, PN, N2, N3, N4: int;
let
  N1 = 0 -> if X then pre N + 1 else pre N;
  PN = 0 -> pre N;
  N2 = if X then PN + 1 else PN;
  -- N3 = if X then ((0 -> pre N) + 1) else (0 -> pre N);
  N4 = (0 -> pre N) + if X then 0 else 1;
tel

node COUNTER (init, incr: int; X, reset: bool) returns (N: int);
var PN: int;
let
  PN = init -> pre N;
  N = if reset then init else if X then PN + incr else PN;
tel

node x2 () returns (odds, mod10: int);
var reset: bool;
let
  odds = COUNTER(0, 2, true, false);
  mod10 = COUNTER(0, 1, true, reset);
  reset = true -> pre(mod10) = 9;
tel

node integrator (F, STEP, init: real) returns (Y: real);
let
  Y = init -> pre(Y) + ((F + pre(F))*STEP)/2.0;
tel

/*
-- This has a dependency loop
node sincos(omega: real) returns (sin, cos: real);
let
  sin = omega * integrator(cos, 0.1, 0.0);
  cos = omega * integrator(-sin, 0.1, 1.0);
tel
*/

node sincos (omega: real) returns(sin, cos: real);
let
  sin = omega * integrator(cos, 0.1, 0.0);
  cos = omega * integrator(0.0 -> -pre(sin), 0.1, 1.0);
tel

node x3 (omega: real) returns (min, max: real);
var s, c: real;
let 
  (s, c) = sincos(omega);
  (min, max) = if s > c then (s, c) else (c, s);
tel

node STABLE (set: bool; delay: int) returns (level: bool);
var count: int;
let 
  level = (count > 0);
  count = if set then delay 
          else if false -> pre(level) then pre(count) -1
               else 0;
tel

node TIME_STABLE (set, second: bool; delay: int) returns (level: bool);
var count: int;
let
  level = (count > 0);
  count = if set then delay
          else if second then 
                 if false -> pre(level) then pre(count) - 1 
                 else 0
               else (0 -> pre(count));
tel

/* TODO:
node TIME_STABLE2 (set, second: bool; delay: int) returns (level: bool);
var ck: bool;
let

  -- Current and when operator 
  level = current(STABLE(set, delay) when ck);
  ck = true -> set or second;

tel
*/

-- Section 2

/* TODO: 
-- Two free types 
type TIME, DAY;
type DISPLAY = [TIME, DAY];

-- Constants of free types 
const initial_time: TIME;
const Mo, Tu, We, Th, Fr, Sa, Su: DAY;

-- Uninterpreted functions 
function imported Increment_Time (time: TIME) returns (new_time: TIME; change_day: bool);
function imported ToMorrow (today: DAY) returns (tomorrow: DAY);

-- Node with calls to uninterpreted functions 
node Timer (second: bool) returns (display: DISPLAY);
var time: TIME; day: DAY; change_day: bool;
let
  display = [time, day];
  (time, change_day) = 
    (initial_time, false) -> if second then Increment_Time(pre time)
                             else pre(time, change_day);
  day = Mo -> if change_day then ToMorrow(pre day) else pre day;
tel
*/

/* TODO
const 
  size = 32;
  unknown: int;
type T;
node N (const n: int) returns (x: int);

-- Array of fixed size determined by node input 
var V: T^(2*n);
let
tel;


node x21 () returns ();
var X1, X2: int;
let
  X = N(size+1); -- is correct
  X = N(unknown); -- is rejected
tel
*/

type T2 = int^3^5;
type complex = [real, real];

/*
node x22 () returns ();
var x, y: complex;
let
  x = [0.0, 1.0]; -- this is outrageously wrong! arrays and tuples have same syntax :(
  y = x;
tel;
*/

const 
  PI = 3.1416;
  -- RightAngle = PI/2.0;

/* TODO: FIX ME 

const size:int = 64;
type vector = int^size;

-- Node with clocked local stream
node x23 () returns ();
var 
  my_state: bool;
  coordinates: [real, real] when state;
let tel;
*/

-- Section 5

-- Uninterpreted functions 
/* TODO: 
function imported increment (time: time) returns (newtime: time);
function imported decompose (time: time) returns (hours, minute, second: int);

node x51 (updated_time, actual_time: time) returns (H, M, S: int);
let
  (H, M, S) = if update 
              then decompose(updated_time) 
              else decompose(increment(actual_time));
tel
*/

/*
node N (x, y: bool; const low, high: int) returns ();
let tel;
*/

/* TODO: 

-- Clocked inputs and outputs 
node M (x, y: bool; a: int when x; (b: int; r: real) when y) returns ();
let tel;

-- Clocked inputs and outputs 
node N2 (c: bool; a: int when c) returns (d: bool when c; b: int when d);
let tel;

-- Node calling a node with clocked inputs and outputs 
node x52 (E1: bool; E2: int when E1) returns (F1: bool; F2: int);
let 
  (F1, F2) = N(E1, E2);
tel;
*/

-- Section 6

node N3 (U, V, W: int) returns (X: int; Y: real); let tel;

node x61 (C: bool; E, E1: int; F, F1: real) returns (X: int; Y: real);
let 
  -- (X, Y) = if C then (E, F) else (E1, F1);
  (X, Y) = (E, F) -> pre (X, Y);
  -- (X, Y) = (E, F) when C;
  -- (X, Y) = N3(1, 2, 3);
tel


node NN (a, b: int) returns (c, d: int);
let (c, d) = (a, b); tel

-- node x62 (E, F, G, H: int) returns (A, B, C, D: int);
-- let 
--   (A, B, C, D) = (NN(E, F), NN(G, H));
-- tel;

/* TODO: 
-- Node with structural assignments 
node x63 (e: [bool, [int, int]]) returns (c: bool; a, b: int; A: [int, int]);
let
  [c, [a, b]] = e;
  [c, A] = e;
  a = e[1][0]; b = e[1][1];
  A = e[1];
  [c, [A[0], A[1]]] = e;
tel;
*/


-- Section 7

node N7 (x1, x2, x3: int) returns (y1, y2, y3: int);
let 
  (y1, y2, y3) = (x1, x2, x3);
tel

/* TODO:
-- Node with a condact call 
node x71 (C: bool; x1, x2, x3: int; v1, v2, v3: int) returns (y1, y2, y3: int);
let 
  (y1, y2, y3) = condact(C, N7(x1, x2, x3), v1, v2, v3);

/* TODO:
-- Equivalent expression to condact call
  (y1, y2, y3) = if C then current(N7(x1, x2, x3) when C) 
                 else (v1, v2, v3) -> pre(y1, y2, z3);

tel
*/

-- node x72 (e1 : int; e2: real; e3: bool) returns (e: [int, real, bool]; f: real);
-- let
--   e = (e1, e2, e3);
--   f = e[1];
-- tel

node x73 (a, b, c, e, f: int; d: bool) returns (e1, e2, e4: int; e3: bool);
let
  e1 = a + 2 * b;
  e2 = a + b - c;
  e3 = not (a = b);
  e4 = if d then a else e -> f;
tel

node x74 (e1, e2, e3: int; f2: bool) returns (e: int^3; f: [int, bool, int]);
let
   e = [e1, e2, e3];
tel

/* TODO: 
-- Node with array slices 
node x75 (a: int^5) returns (d1: int; a23: int^2);
const A = [1, 2, 3, 4, 5, 6];
var
  b1 : int;
  b2, b3: int^3;
  b4 : int^1;
  b5: int; 
let
  d1 = a[0];
  a23 = a[2..3];
  b1 = A[1];
  b2 = A[2..4];
  b3 = A[4..2];
  b4 = A[2..2];
  b5 = A[2..4][0];
tel
*/

type T = int;

/* TODO: 
-- Node with array slices and concatenations 
node x76 (A: T^10^5) returns (B1: T^10^2; B2: T^2^4; B3: int^5 );
let
  B1 = A[1..4][1..2];
  B2 = A[1..4, 1..2];
  B3 = [1, 2, 3] | [4, 3];
tel
*/

/* TODO: 
-- Node using array slices and concatenations
node EQ (const n: int; A, B: int^n) returns (equal: bool);
var C, E: bool^n;
let
  equal = C[n-1];
  C = [E[0]]|C[0..n-2] and E[1..n-1];
  E = (A = B);
tel

-- Node using array slices and concatenations
node DELAY (const n, default: int;X: int) returns (delayed: int);
var window: int^n;
let
  delayed = window[n-1];
  window = [X]|(default^(n-1) -> pre(window[0..n-2]));
tel
*/
