function abstraction (x, y: real) returns (times, divid: real) ;
(*@contract
  assume not (y = 0.0) ;

  mode pos_1 (
    require x >= 0.0 ;
    require y > 0.0 ;
    ensure times >= 0.0 ;
    ensure divid >= 0.0 ;
  ) ;
  mode pos_2 (
    require x < 0.0 ;
    require y < 0.0 ;
    ensure times >= 0.0 ;
    ensure divid >= 0.0 ;
  ) ;
  mode neg (
    require not ::pos_1 ;
    require not ::pos_2 ;
    ensure times <= 0.0 ;
    ensure divid <= 0.0 ;
  ) ;
*)
let
  times = x * y ;
  divid = x / y ;
tel

node test (x, y: real) returns (times, divid: real) ;
(*@contract
  assume true -> (x = pre x) ;
  assume true -> (y = pre y) ;
  assume (y <> 0.0) -> true ;

  guarantee true -> (times = pre times) ;
  guarantee true -> (divid = pre divid) ;
*)
let
  times, divid = abstraction(x, y) ;
tel