type state = struct {
   idy : int;
   leader : int;
   level : int
};
const n=5;
const inits = [
   state { idy = 33; leader =  5; level = 2} ,
   state { idy = 41; leader =  5; level = 3} ,
   state { idy = 21; leader =  5; level = 4} ,
   state { idy = 10; leader = 10; level = 0} ,
   state { idy = 75; leader = 75; level = 0}
] ;
const O = false;
const I = true;
const connect = [
   [ O, I, O, O, I ],
   [ I, O, I, O, O ],
   [ O, I, O, I, O ],
   [ O, O, I, O, I ],
   [ I, O, O, I, O ]
];
node algo (clk: bool; ps: state; neigh: bool^5) returns (ns: state);
let
   ns = if clk then
         state { idy =  ps.idy ; leader = ps.leader; level = ps.level + 1 }
      else
         state { idy =  ps.idy ; leader = ps.leader; level = ps.level };
tel
node bug_map_fby(ck:bool^5) returns (s: state^n);
var ps : state^n;
let
   ps = map<<fby, 5>>(inits, s);
   s = map<<algo, n>> (ck, ps, connect);
tel
