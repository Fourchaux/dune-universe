---- I Have manually inlined the include directives
--
-- This program trigger a Pollux error : 
--
--  PolluxError 928 in Net::EvalStaticInputs:
--  Incorrect Input Type, 0th input of call PFS_SW__NAVIGATION_C0 in 
--                       node condact_PFS_SW__NAVIGATION
--
-- whereas it should not (if I am correct).
-- I hope to be able to compile this one with the lv6 tool chain one day!!!












-- This file was generated by aadl2sync version O.31.
--	 ../../bin/aadl2sync --show-scheduling-vars --check-schedulability
--		--gen-fake-body -o pfs_5 PFS_Data.aaxl Deployment.aaxl PFS_HW.aaxl
--		PFS_SW.aaxl
-- on peouvou the 30/1/2008 at 15:04:47

----------------include "schedule_pfs_5.lus"
-- This file was generated by aadl2sync version O.31.
--	 ../../bin/aadl2sync --show-scheduling-vars --check-schedulability
--		--gen-fake-body -o pfs_5 PFS_Data.aaxl Deployment.aaxl PFS_HW.aaxl
--		PFS_SW.aaxl
-- on peouvou the 30/1/2008 at 15:04:47

-----------------include "fillme_pfs_5_types.lus"

-- include "pfs_asn1_type.lus"
const __DUMMY_VAL__ : bool;
type T_DTG_LSB = real^4;
type T_DTG_MEAS_TABLE_LINE = real^4;
type T_TEMP = real;
type T_HW_STATUSES = [bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, T_PFS_EWM_MSU_MSU_HS, bool, bool, bool, bool, bool, bool];
type T_PDE_CMD_A = [T_ON_OFF_CMD, T_CAM_CMD, T_CAM_CMD, T_CAM_CMD];
type T_VECTOR9 = real^9;
type T_PFS_BUS_DATA_BLOCK = [INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16, INT16];
type T_PFS_EC_UPDATE_CONF_MSU = [T_CONFIGURATION_TABLE, bool];
type T_CONTROLLER_TELEMETRY = [T_VELOCITY, T_THRUSTERS_OPENING, real, real, real];
type T_DTG_ANGULAR_INCREMENT = real^4;
type T_VECTOR4 = real^4;
type T_VECTOR6 = real^6;
type T_SYNCHRO_BROADCAST_STATUS = bool^4;
type T_PFS_EWM_MSU_MSU_HS = bool^3;
type INT16 = int;
type T_MATRIX_3_4 = [T_MATRIX_3_4_LINE, T_MATRIX_3_4_LINE, T_MATRIX_3_4_LINE];
type T_QUATERNION = real^4;
type T_CONTROLLER_STATE = [T_QUATERNION, T_ANGULAR_RATE, T_ACCELERATION];
type T_VECTOR18 = real^18;
type T_EFFICIENCY_MATRIX_LINE = real^3;
type T_DPU_CMD = [T_ON_OFF_CMD, T_ON_OFF_CMD];
type T_VECTOR12 = real^12;
type T_CAM_MODE = bool^3;
type T_PFS_1BUS_DATA = [T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK];
type T_TORQUE_EFFICIENCY_MATRIX = [T_TORQUE_EFFICIENCY_MATRIX_LINE, T_TORQUE_EFFICIENCY_MATRIX_LINE, T_TORQUE_EFFICIENCY_MATRIX_LINE];
type T_FCV_OPENING_DUR_CMD = [int, int];
type T_INITIAL_EFFICIENCY_MATRIX = [T_INITIAL_EFFICIENCY_MATRIX_LINE, T_INITIAL_EFFICIENCY_MATRIX_LINE, T_INITIAL_EFFICIENCY_MATRIX_LINE, T_INITIAL_EFFICIENCY_MATRIX_LINE, T_INITIAL_EFFICIENCY_MATRIX_LINE, T_INITIAL_EFFICIENCY_MATRIX_LINE];
type T_ANGLE = real;
type MYBOOL = bool;
type MYINT = int;
type T_VECTOR8 = real^8;
type T_NAVIGATION_TELEMETRY = [bool, T_ANGLE, T_ANGLE, T_NAVIGATION_OUTPUT];
type T_CURRENT = real;
type T_VOLTAGE = real;
type T_ANGULAR_RATE = [int, int, int];
type T_SW_WARNING_CODE = int;
type T_ACCELERATION = real^3;
type T_CONTROLLER_FILTER_STATE = [T_MATRIX_3_4, T_MATRIX_3_4];
type T_CONTROLLER_CONFIG = [T_MASS, T_INERTIA, T_VECTOR3, T_INITIAL_EFFICIENCY_MATRIX, T_EFFICIENCY_MATRIX, T_VELOCITY, T_QUATERNION, T_QUATERNION, real];
type T_NAVIGATION_STATE = [T_QUATERNION, T_QUATERNION, T_QUATERNION, T_QUATERNION];
type T_THRUSTERS_OPENING = [T_FCV_OPENING_DUR_CMD, T_FCV_OPENING_DUR_CMD];
type T_VECTOR3 = real^3;
type T_PFS_TGM_DATA = [bool, int, bool, bool, int, bool, bool, int, int, int, int, int, int];
type T_HLTM = [bool, bool, bool, bool, bool, bool, T_MSU_STATE];
type T_PFS_EWM_SSU_MSU_MEAS = real^4;
type T_NAVIGATION_CONFIGURATION = [T_QUATERNION, T_QUATERNION, real, T_QUATERNION, T_QUATERNION, T_VECTOR4, T_VECTOR4, T_VECTOR8, real, real, T_VECTOR12, T_VECTOR9, T_VECTOR12, T_VECTOR4];
type T_VELOCITY = real;
type T_ON_OFF_CMD = [bool, bool];
type T_INERTIA = real^3;
type T_MSU_STATE = bool^4;
type T_HLTC = [bool, T_PFS_EC_UPDATE_CONF_MSU, bool, bool];
type T_CM_CONFIGURATION = [real, int, [int, int, int], real^3, real^3, [int, int, int], real^6, real, real, real, real, real, real, real^12, real^3, real^3, T_VECTOR6, T_VECTOR6, T_VECTOR18, T_VECTOR4, T_VECTOR4];
type T_MASS = real;
type T_FTCP_HEALTH_STATUS = bool^3;
type T_EFFICIENCY_MATRIX = [T_EFFICIENCY_MATRIX_LINE, T_EFFICIENCY_MATRIX_LINE, T_EFFICIENCY_MATRIX_LINE];
type T_SEQUENCER_CONFIGURATION = [bool, bool, bool, bool, bool, bool, int, bool, bool];
type T_TORQUE_EFFICIENCY_MATRIX_LINE = real^4;
type T_CONFIGURATION_TABLE = [bool, bool, bool, bool, bool, bool, int, bool, bool];
type T_CONTROL_GAINS = [real, real];
type T_PFS_BUS_DATA = [T_PFS_1BUS_DATA, T_PFS_1BUS_DATA, T_PFS_1BUS_DATA, T_PFS_1BUS_DATA];
type T_PFS_EWC_MSU_PDE_T = [T_ACS_CMD, T_ACS_CMD, T_ACS_CMD, T_ACS_CMD];
type T_CAM_CMD = [T_ON_OFF_CMD, T_ON_OFF_CMD, T_ON_OFF_CMD, T_ON_OFF_CMD];
type T_NAVIGATION_OUTPUT = [T_QUATERNION, T_QUATERNION, T_ANGULAR_RATE];
type T_CM_TELEMETRY = [bool^4, int, int, int, int, [int, int], [int, int, int, int, int, int], real, real];
type T_CONTROLLER_SATURATION_LEVEL = real^3;
type T_ACS_CMD = [bool, bool];
type T_DTG_MEAS_TABLE = [T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE, T_DTG_MEAS_TABLE_LINE];
type T_PFS_BUS_SENSOR_DATA = [T_PFS_TGM_DATA, T_PFS_TGM_DATA, T_PFS_ACM_DATA, T_PFS_ACM_DATA, T_PFS_ACM_DATA];
type T_PFS_ACM_DATA = [bool, int, int];
type T_POWER_CONSUMPTION = real;
type T_FORCE_EFFICIENCY_MATRIX = [T_FORCE_EFFICIENCY_MATRIX_LINE, T_FORCE_EFFICIENCY_MATRIX_LINE, T_FORCE_EFFICIENCY_MATRIX_LINE];
type T_PFS_IWM_MEASUREMENTS = [T_VOLTAGE, T_VOLTAGE, T_VOLTAGE, T_VOLTAGE, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_VOLTAGE, T_TEMP, T_TEMP];
type T_MATRIX_3_4_LINE = real^4;
type T_OBUT = int;
type T_INITIAL_EFFICIENCY_MATRIX_LINE = real^4;
type T_FORCE_EFFICIENCY_MATRIX_LINE = real^4;

type PFS_Data__T_THRUSTERS_OPENING = T_THRUSTERS_OPENING;
type PFS_Data__T_SEQUENCER_CONFIGURATION = T_SEQUENCER_CONFIGURATION;
type PFS_Data__T_PFS_EWM_MSU_MSU_HS = T_PFS_EWM_MSU_MSU_HS;
type PFS_Data__T_PFS_EWM_DTG12_MSU = T_PFS_EWM_DTG12_MSU;
type PFS_Data__T_PFS_EWC_MSU_PDE_T = T_PFS_EWC_MSU_PDE_T;
type PFS_Data__T_PDE_CMD_A = T_PDE_CMD_A;
type PFS_Data__T_ON_OFF_CMD = T_ON_OFF_CMD;
type PFS_Data__T_NAVIGATION_OUTPUT = T_NAVIGATION_OUTPUT;
type PFS_Data__T_MSU_STATE = T_MSU_STATE;
type PFS_Data__T_HLTM = T_HLTM;
type PFS_Data__T_HLTC = T_HLTC;
type PFS_Data__T_FTCP_HEALTH_STATUS = T_FTCP_HEALTH_STATUS;
type PFS_Data__T_DPU_CMD = T_DPU_CMD;
type PFS_Data__T_CONTROLLER_STATE = T_CONTROLLER_STATE;
type PFS_Data__T_CAM_MODE = T_CAM_MODE;
type PFS_Data__MYBOOL = MYBOOL;
type PFS_Data__MYINT = MYINT;


-------------------include "fillme_pfs_5_const.lus"

const PFS_SW__DOWNSTREAM_CONTROL_END_BOOST_IS_REACHED_dft = true;
const PFS_SW__DOWNSTREAM_CONTROL_ESTIMATED_STATE_dft = 
[[0.0, 0.0, 0.0, 0.0], [0, 0, 0], [0.0, 0.0, 0.0]];
const PFS_SW__DOWNSTREAM_CONTROL_SUN_IS_AIMED_dft = true;


const PFS_SW__UPSTREAM_CONTROL_THRUSTERS_OPENING_dft = [[0, 0], [0, 0]];

const PFS_SW__AUTOMATON_CAM_MODE_dft = [true, true, true];
const PFS_SW__AUTOMATON_CONTROLLER_TO_BE_ACTIVATED_dft = true;
const PFS_SW__AUTOMATON_DPU_CMD_dft = [[true, true], [true, true]];
const PFS_SW__AUTOMATON_ENABLE_CONTROLLER_dft = true;
const PFS_SW__AUTOMATON_MSU_STATE_dft = [true, true, true, true];
const PFS_SW__AUTOMATON_PDE_CMD_A_dft = [[true, true], [[true,true], [true,true], [true,true], [true,true]], [[true,true], [true,true], [true,true], [true,true]], [[true,true], [true,true], [true,true], [true,true]]];
const PFS_SW__AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE_dft = [true, true];
const PFS_SW__AUTOMATON_STATE_IS_PFS_M_CAM_PRGS_dft = true;

const PFS_SW__APPLY_CMD_PFS_EWC_MSU_PDE_T_dft = [[true, true], [true, true], [true, true], [true, true]]; 

const PFS_SW__NAVIGATION_CAM_TEST2_IS_ENABLED_dft = true;
const PFS_SW__NAVIGATION_FTCP_RES_DETECTED_dft = true;
const PFS_SW__NAVIGATION_HLTM_dft = [true, true, true, true, true, true, [true, true, true, true]];
const PFS_SW__NAVIGATION_MSU_HS_IS_OK_dft = true;
const PFS_SW__NAVIGATION_MSU_IS_CONFIGURED_dft = true;
const PFS_SW__NAVIGATION_MSU_IS_MASTER_dft = true;
const PFS_SW__NAVIGATION_NAVIGATION_OUTPUT_dft = [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0]];
const PFS_SW__NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED_dft = true;
const PFS_SW__NAVIGATION_PFS_EWM_MSUX_MSUY_HS_dft = [true, true, true];
const PFS_SW__NAVIGATION_SEQUENCER_CONFIGURATION_dft = [true, true, true, true, true, true, 0, true, true];




-- interuption generator
node timer(const period : int) returns (trig: bool);
var cpt, pcpt:int;
let
  pcpt = period -> pre cpt;
  cpt = if trig then period
        else pcpt - 1 ;
  trig = true -> (pcpt = 1); 
tel

node rising_edge(x:bool) returns (y:bool);
let
  y = false -> x and not (pre x);
tel

node first_rising_edge(x,reinit:bool) returns (y:bool);
-- y is true when x becomes true for the first time 
-- since the beginning  or the last reinit
var
  -- this var is used to encode a 2-state automaton
  y_has_been_emitted : bool;
let
  y =  false -> 
     if ((not pre y_has_been_emitted) and rising_edge(x)) then true
     else if (pre y_has_been_emitted and reinit) then false
     else false ;
  y_has_been_emitted =  false -> 
     if ((not pre y_has_been_emitted) and rising_edge(x)) then true
     else if (pre y_has_been_emitted and reinit) then false
     else pre y_has_been_emitted;
tel

-- cpu time counter
node consume(in_min_max : int; activate, cpu: bool)
returns (next_dispatched, term: bool);
var
  dispatched, edge_activate : bool;
  cpt, pcpt : int;
  alea : int;
let
-- in_min_max is ignored, except when activate becomes true
  alea = if edge_activate then in_min_max else (0 -> pre alea);
  dispatched = false -> pre next_dispatched;
  next_dispatched, edge_activate = 
     if dispatched then (not term, false) else (activate, activate);
  cpt = if dispatched then (if cpu then pcpt + 1 else pcpt) else 0;
  pcpt = 0 -> pre cpt;
  term = cpu and (cpt = alea);
tel


-- Compute the relative advance of clk1 w.r.t. clk2
node compute_advance(clk1, clk2 : bool) returns (c : int);
var pc : int;
let
  pc = 0 -> pre c;
  c = if clk2 then 0 -- reset the advance of clk1
      else if clk1 then pc + 1 -- clk1 got ahead of one tic
      else pc;
tel
-- A fix priority scheduler for 5 threads.
node cpu_from_dispatched_5(dispatched1,dispatched2,dispatched3,dispatched4,dispatched5 : bool)
returns (cpu1, cpu2, cpu3, cpu4,  cpu5 : bool);
let
  cpu1 = dispatched1;
  cpu2 = dispatched2 and not cpu1;
  cpu3 = dispatched3 and not cpu1 and not cpu2;
  cpu4 = dispatched4 and not cpu1 and not cpu2 and not cpu3;
  cpu5 = dispatched5 and not cpu1 and not cpu2 and not cpu3 and not cpu4;
tel

node schedule_MSU1_HW_threads(
      in_min_max1, in_min_max2, in_min_max3, in_min_max4, in_min_max5 : int)
returns(
_NAVIGATION_activate_clk, _NAVIGATION_dispatch_clk, _NAVIGATION_release_clk : bool;
 _APPLY_CMD_activate_clk, _APPLY_CMD_dispatch_clk, _APPLY_CMD_release_clk : bool;
 _AUTOMATON_activate_clk, _AUTOMATON_dispatch_clk, _AUTOMATON_release_clk : bool;
 _UPSTREAM_activate_clk, _UPSTREAM_dispatch_clk, _UPSTREAM_release_clk : bool;
 _DOWNSTREAM_activate_clk, _DOWNSTREAM_dispatch_clk, _DOWNSTREAM_release_clk : bool;
  dispatched3 : bool;
 dispatched2 : bool;
 dispatched1 : bool;
 dispatched5 : bool;
 dispatched4 : bool;
 cpu3 : bool;
 cpu2 : bool;
 cpu1 : bool;
 cpu5 : bool;
 cpu4 : bool);
var
    next_dispatched1, next_dispatched2, next_dispatched3, next_dispatched4, next_dispatched5 : bool;
let
  _NAVIGATION_dispatch_clk = timer(100);
  _APPLY_CMD_dispatch_clk = timer(100);
  _AUTOMATON_dispatch_clk = timer(20);
  _UPSTREAM_dispatch_clk = timer(500);
  _DOWNSTREAM_dispatch_clk = timer(500);
  next_dispatched3, _NAVIGATION_release_clk = consume(
   in_min_max1, _NAVIGATION_dispatch_clk, cpu3);
  next_dispatched2, _APPLY_CMD_release_clk = consume(
   in_min_max2, _APPLY_CMD_dispatch_clk, cpu2);
  next_dispatched1, _AUTOMATON_release_clk = consume(
   in_min_max3, _AUTOMATON_dispatch_clk, cpu1);
  next_dispatched5, _UPSTREAM_release_clk = consume(
   in_min_max4, _UPSTREAM_dispatch_clk, cpu5);
  next_dispatched4, _DOWNSTREAM_release_clk = consume(
   in_min_max5, _DOWNSTREAM_dispatch_clk, cpu4);
  dispatched1 = false -> pre next_dispatched1;
  dispatched2 = false -> pre next_dispatched2;
  dispatched3 = false -> pre next_dispatched3;
  dispatched4 = false -> pre next_dispatched4;
  dispatched5 = false -> pre next_dispatched5;
  cpu1, cpu2, cpu3, cpu4, cpu5 = cpu_from_dispatched_5(dispatched1, dispatched2, dispatched3, dispatched4, dispatched5);

-- We read inputs when the thread starts having the cpu
  _NAVIGATION_activate_clk = first_rising_edge(cpu3, not dispatched3);
  _APPLY_CMD_activate_clk = first_rising_edge(cpu2, not dispatched2);
  _AUTOMATON_activate_clk = first_rising_edge(cpu1, not dispatched1);
  _UPSTREAM_activate_clk = first_rising_edge(cpu5, not dispatched5);
  _DOWNSTREAM_activate_clk = first_rising_edge(cpu4, not dispatched4);
tel

node condact_schedule_MSU1_HW_threads(
      in_min_max1, in_min_max2, in_min_max3, in_min_max4, in_min_max5 : int;
      qs_tick:bool)
returns(
_NAVIGATION_activate_clk, _NAVIGATION_dispatch_clk, _NAVIGATION_release_clk : bool;
 _APPLY_CMD_activate_clk, _APPLY_CMD_dispatch_clk, _APPLY_CMD_release_clk : bool;
 _AUTOMATON_activate_clk, _AUTOMATON_dispatch_clk, _AUTOMATON_release_clk : bool;
 _UPSTREAM_activate_clk, _UPSTREAM_dispatch_clk, _UPSTREAM_release_clk : bool;
 _DOWNSTREAM_activate_clk, _DOWNSTREAM_dispatch_clk, _DOWNSTREAM_release_clk : bool;
  dispatched3 : bool;
 dispatched2 : bool;
 dispatched1 : bool;
 dispatched5 : bool;
 dispatched4 : bool;
 cpu3 : bool;
 cpu2 : bool;
 cpu1 : bool;
 cpu5 : bool;
 cpu4 : bool);
let
_NAVIGATION_activate_clk, _NAVIGATION_dispatch_clk, _NAVIGATION_release_clk,
 _APPLY_CMD_activate_clk, _APPLY_CMD_dispatch_clk, _APPLY_CMD_release_clk,
 _AUTOMATON_activate_clk, _AUTOMATON_dispatch_clk, _AUTOMATON_release_clk,
 _UPSTREAM_activate_clk, _UPSTREAM_dispatch_clk, _UPSTREAM_release_clk,
 _DOWNSTREAM_activate_clk, _DOWNSTREAM_dispatch_clk, _DOWNSTREAM_release_clk,
  dispatched3,
     dispatched2,
     dispatched1,
     dispatched5,
     dispatched4,
     cpu3,
     cpu2,
     cpu1,
     cpu5,
     cpu4 
	= 
	if qs_tick 
	then
		current (schedule_MSU1_HW_threads(
			    in_min_max1 when qs_tick,
			    in_min_max2 when qs_tick,
			    in_min_max3 when qs_tick,
			    in_min_max4 when qs_tick,
			    in_min_max5 when qs_tick)) 
	else
		((false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false));
tel

node schedule_MSU2_HW_threads(
      in_min_max1, in_min_max2, in_min_max3, in_min_max4, in_min_max5 : int)
returns(
_NAVIGATION_activate_clk_2, _NAVIGATION_dispatch_clk_2, _NAVIGATION_release_clk_2 : bool;
 _APPLY_CMD_activate_clk_2, _APPLY_CMD_dispatch_clk_2, _APPLY_CMD_release_clk_2 : bool;
 _AUTOMATON_activate_clk_2, _AUTOMATON_dispatch_clk_2, _AUTOMATON_release_clk_2 : bool;
 _UPSTREAM_activate_clk_2, _UPSTREAM_dispatch_clk_2, _UPSTREAM_release_clk_2 : bool;
 _DOWNSTREAM_activate_clk_2, _DOWNSTREAM_dispatch_clk_2, _DOWNSTREAM_release_clk_2 : bool;
  dispatched3 : bool;
 dispatched2 : bool;
 dispatched1 : bool;
 dispatched5 : bool;
 dispatched4 : bool;
 cpu3 : bool;
 cpu2 : bool;
 cpu1 : bool;
 cpu5 : bool;
 cpu4 : bool);
var
    next_dispatched1, next_dispatched2, next_dispatched3, next_dispatched4, next_dispatched5 : bool;
let
  _NAVIGATION_dispatch_clk_2 = timer(100);
  _APPLY_CMD_dispatch_clk_2 = timer(100);
  _AUTOMATON_dispatch_clk_2 = timer(20);
  _UPSTREAM_dispatch_clk_2 = timer(500);
  _DOWNSTREAM_dispatch_clk_2 = timer(500);
  next_dispatched3, _NAVIGATION_release_clk_2 = consume(
   in_min_max1, _NAVIGATION_dispatch_clk_2, cpu3);
  next_dispatched2, _APPLY_CMD_release_clk_2 = consume(
   in_min_max2, _APPLY_CMD_dispatch_clk_2, cpu2);
  next_dispatched1, _AUTOMATON_release_clk_2 = consume(
   in_min_max3, _AUTOMATON_dispatch_clk_2, cpu1);
  next_dispatched5, _UPSTREAM_release_clk_2 = consume(
   in_min_max4, _UPSTREAM_dispatch_clk_2, cpu5);
  next_dispatched4, _DOWNSTREAM_release_clk_2 = consume(
   in_min_max5, _DOWNSTREAM_dispatch_clk_2, cpu4);
  dispatched1 = false -> pre next_dispatched1;
  dispatched2 = false -> pre next_dispatched2;
  dispatched3 = false -> pre next_dispatched3;
  dispatched4 = false -> pre next_dispatched4;
  dispatched5 = false -> pre next_dispatched5;
  cpu1, cpu2, cpu3, cpu4, cpu5 = cpu_from_dispatched_5(dispatched1, dispatched2, dispatched3, dispatched4, dispatched5);

-- We read inputs when the thread starts having the cpu
  _NAVIGATION_activate_clk_2 = first_rising_edge(cpu3, not dispatched3);
  _APPLY_CMD_activate_clk_2 = first_rising_edge(cpu2, not dispatched2);
  _AUTOMATON_activate_clk_2 = first_rising_edge(cpu1, not dispatched1);
  _UPSTREAM_activate_clk_2 = first_rising_edge(cpu5, not dispatched5);
  _DOWNSTREAM_activate_clk_2 = first_rising_edge(cpu4, not dispatched4);
tel

node condact_schedule_MSU2_HW_threads(
      in_min_max1, in_min_max2, in_min_max3, in_min_max4, in_min_max5 : int;
      qs_tick:bool)
returns(
_NAVIGATION_activate_clk_2, _NAVIGATION_dispatch_clk_2, _NAVIGATION_release_clk_2 : bool;
 _APPLY_CMD_activate_clk_2, _APPLY_CMD_dispatch_clk_2, _APPLY_CMD_release_clk_2 : bool;
 _AUTOMATON_activate_clk_2, _AUTOMATON_dispatch_clk_2, _AUTOMATON_release_clk_2 : bool;
 _UPSTREAM_activate_clk_2, _UPSTREAM_dispatch_clk_2, _UPSTREAM_release_clk_2 : bool;
 _DOWNSTREAM_activate_clk_2, _DOWNSTREAM_dispatch_clk_2, _DOWNSTREAM_release_clk_2 : bool;
  dispatched3 : bool;
 dispatched2 : bool;
 dispatched1 : bool;
 dispatched5 : bool;
 dispatched4 : bool;
 cpu3 : bool;
 cpu2 : bool;
 cpu1 : bool;
 cpu5 : bool;
 cpu4 : bool);
let
_NAVIGATION_activate_clk_2, _NAVIGATION_dispatch_clk_2, _NAVIGATION_release_clk_2,
 _APPLY_CMD_activate_clk_2, _APPLY_CMD_dispatch_clk_2, _APPLY_CMD_release_clk_2,
 _AUTOMATON_activate_clk_2, _AUTOMATON_dispatch_clk_2, _AUTOMATON_release_clk_2,
 _UPSTREAM_activate_clk_2, _UPSTREAM_dispatch_clk_2, _UPSTREAM_release_clk_2,
 _DOWNSTREAM_activate_clk_2, _DOWNSTREAM_dispatch_clk_2, _DOWNSTREAM_release_clk_2,
  dispatched3,
     dispatched2,
     dispatched1,
     dispatched5,
     dispatched4,
     cpu3,
     cpu2,
     cpu1,
     cpu5,
     cpu4 
	= 
	if qs_tick 
	then
		current (schedule_MSU2_HW_threads(
			    in_min_max1 when qs_tick,
			    in_min_max2 when qs_tick,
			    in_min_max3 when qs_tick,
			    in_min_max4 when qs_tick,
			    in_min_max5 when qs_tick)) 
	else
		((false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false));
tel


-- A quasi synchronous scheduler for 2 processors.
node quasi_synchronous_scheduler(alea_1, alea_2 : bool) 
returns (qs_1, qs_2 : bool);
var
  advance_max_is_reached_1_2 : bool;
  advance_max_is_reached_2_1 : bool;
  problems_1_2 : bool;
  problems_2_1 : bool;
  filter_1 : bool;
  filter_2 : bool;
  advance_1_2 : int;
  advance_2_1 : int;
  padvance_1_2 : int;
  padvance_2_1 : int;

let
  -- We compute the relative advance of various processors
  advance_1_2 = compute_advance(qs_1, qs_2);
  advance_2_1 = compute_advance(qs_2, qs_1);

  padvance_1_2 = 0 -> pre advance_1_2;
  padvance_2_1 = 0 -> pre advance_2_1;
  -- Is the maximum advance reached?
  advance_max_is_reached_1_2 = (padvance_1_2 >= 2);
  advance_max_is_reached_2_1 = (padvance_2_1 >= 2);

  -- there is a problem if the maximum advance is reached and no tic occurs
  problems_1_2 = advance_max_is_reached_1_2 and alea_1;
  problems_2_1 = advance_max_is_reached_2_1 and alea_2;

  -- we force the tic for clocks that are d tics late
  filter_1 = (not problems_1_2);
  filter_2 = (not problems_2_1) and true;
  qs_1 = alea_1 and filter_1;
  qs_2 = alea_2 and filter_2;
tel

node schedule_pfs_5(
    _NAVIGATION_release_clk_min_max:int;
  _APPLY_CMD_release_clk_min_max:int;
  _AUTOMATON_release_clk_min_max:int;
  _UPSTREAM_release_clk_min_max:int;
  _DOWNSTREAM_release_clk_min_max:int;
  _NAVIGATION_release_clk_2_min_max:int;
  _APPLY_CMD_release_clk_2_min_max:int;
  _AUTOMATON_release_clk_2_min_max:int;
  _UPSTREAM_release_clk_2_min_max:int;
  _DOWNSTREAM_release_clk_2_min_max:int;
   alea1, alea2 : bool) returns ( 
  _NAVIGATION_activate_clk : bool;
  _NAVIGATION_dispatch_clk : bool;
  _NAVIGATION_release_clk : bool;
  _APPLY_CMD_activate_clk : bool;
  _APPLY_CMD_dispatch_clk : bool;
  _APPLY_CMD_release_clk : bool;
  _AUTOMATON_activate_clk : bool;
  _AUTOMATON_dispatch_clk : bool;
  _AUTOMATON_release_clk : bool;
  _UPSTREAM_activate_clk : bool;
  _UPSTREAM_dispatch_clk : bool;
  _UPSTREAM_release_clk : bool;
  _DOWNSTREAM_activate_clk : bool;
  _DOWNSTREAM_dispatch_clk : bool;
  _DOWNSTREAM_release_clk : bool;
  _NAVIGATION_activate_clk_2 : bool;
  _NAVIGATION_dispatch_clk_2 : bool;
  _NAVIGATION_release_clk_2 : bool;
  _APPLY_CMD_activate_clk_2 : bool;
  _APPLY_CMD_dispatch_clk_2 : bool;
  _APPLY_CMD_release_clk_2 : bool;
  _AUTOMATON_activate_clk_2 : bool;
  _AUTOMATON_dispatch_clk_2 : bool;
  _AUTOMATON_release_clk_2 : bool;
  _UPSTREAM_activate_clk_2 : bool;
  _UPSTREAM_dispatch_clk_2 : bool;
  _UPSTREAM_release_clk_2 : bool;
  _DOWNSTREAM_activate_clk_2 : bool;
  _DOWNSTREAM_dispatch_clk_2 : bool;
  _DOWNSTREAM_release_clk_2 : bool;
  qs_tick1, qs_tick2 : bool;
  dispatched11, dispatched12, dispatched13, dispatched14, dispatched15 : bool;
  dispatched21, dispatched22, dispatched23, dispatched24, dispatched25 : bool;
  cpu11, cpu12, cpu13, cpu14, cpu15 : bool;
  cpu21, cpu22, cpu23, cpu24, cpu25 : bool;
  schedul_ok:bool);
var
-- Some state for defining the oracle deciding if the scheduling is correct
   idle_DOWNSTREAM_2, dispatched_DOWNSTREAM_2, running_DOWNSTREAM_2, ok__DOWNSTREAM_2 :bool;
   idle_UPSTREAM_2, dispatched_UPSTREAM_2, running_UPSTREAM_2, ok__UPSTREAM_2 :bool;
   idle_AUTOMATON_2, dispatched_AUTOMATON_2, running_AUTOMATON_2, ok__AUTOMATON_2 :bool;
   idle_APPLY_CMD_2, dispatched_APPLY_CMD_2, running_APPLY_CMD_2, ok__APPLY_CMD_2 :bool;
   idle_NAVIGATION_2, dispatched_NAVIGATION_2, running_NAVIGATION_2, ok__NAVIGATION_2 :bool;
   idle_DOWNSTREAM, dispatched_DOWNSTREAM, running_DOWNSTREAM, ok__DOWNSTREAM :bool;
   idle_UPSTREAM, dispatched_UPSTREAM, running_UPSTREAM, ok__UPSTREAM :bool;
   idle_AUTOMATON, dispatched_AUTOMATON, running_AUTOMATON, ok__AUTOMATON :bool;
   idle_APPLY_CMD, dispatched_APPLY_CMD, running_APPLY_CMD, ok__APPLY_CMD :bool;
   idle_NAVIGATION, dispatched_NAVIGATION, running_NAVIGATION, ok__NAVIGATION :bool;

let
  
    _NAVIGATION_activate_clk, _NAVIGATION_dispatch_clk, _NAVIGATION_release_clk,
 _APPLY_CMD_activate_clk, _APPLY_CMD_dispatch_clk, _APPLY_CMD_release_clk,
 _AUTOMATON_activate_clk, _AUTOMATON_dispatch_clk, _AUTOMATON_release_clk,
 _UPSTREAM_activate_clk, _UPSTREAM_dispatch_clk, _UPSTREAM_release_clk,
 _DOWNSTREAM_activate_clk, _DOWNSTREAM_dispatch_clk, _DOWNSTREAM_release_clk,
 dispatched11, dispatched12, dispatched13, dispatched14, dispatched15, 
    cpu11, cpu12, cpu13, cpu14, cpu15
 = condact_schedule_MSU1_HW_threads(  _NAVIGATION_release_clk_min_max,
     _APPLY_CMD_release_clk_min_max,
     _AUTOMATON_release_clk_min_max,
     _UPSTREAM_release_clk_min_max,
     _DOWNSTREAM_release_clk_min_max,
   qs_tick1
   );
  
    _NAVIGATION_activate_clk_2, _NAVIGATION_dispatch_clk_2, _NAVIGATION_release_clk_2,
 _APPLY_CMD_activate_clk_2, _APPLY_CMD_dispatch_clk_2, _APPLY_CMD_release_clk_2,
 _AUTOMATON_activate_clk_2, _AUTOMATON_dispatch_clk_2, _AUTOMATON_release_clk_2,
 _UPSTREAM_activate_clk_2, _UPSTREAM_dispatch_clk_2, _UPSTREAM_release_clk_2,
 _DOWNSTREAM_activate_clk_2, _DOWNSTREAM_dispatch_clk_2, _DOWNSTREAM_release_clk_2,
 dispatched21, dispatched22, dispatched23, dispatched24, dispatched25, 
    cpu21, cpu22, cpu23, cpu24, cpu25
 = condact_schedule_MSU2_HW_threads(  _NAVIGATION_release_clk_2_min_max,
     _APPLY_CMD_release_clk_2_min_max,
     _AUTOMATON_release_clk_2_min_max,
     _UPSTREAM_release_clk_2_min_max,
     _DOWNSTREAM_release_clk_2_min_max,
   qs_tick2
   );
  qs_tick1, qs_tick2 = quasi_synchronous_scheduler(alea1, alea2);
-- check (runtime/a posteriori) the schedulability
  idle_DOWNSTREAM_2 = ((true -> pre idle_DOWNSTREAM_2) and not _DOWNSTREAM_activate_clk_2 and not _DOWNSTREAM_release_clk_2 and not _DOWNSTREAM_dispatch_clk_2) or 
	  ((true -> pre idle_DOWNSTREAM_2) and _DOWNSTREAM_activate_clk_2 and _DOWNSTREAM_release_clk_2 and _DOWNSTREAM_dispatch_clk_2) or 
	  ((false -> pre dispatched_DOWNSTREAM_2) and _DOWNSTREAM_activate_clk_2 and _DOWNSTREAM_release_clk_2 and not _DOWNSTREAM_dispatch_clk_2) or 
	  ((false -> pre running_DOWNSTREAM_2) and not _DOWNSTREAM_activate_clk_2 and _DOWNSTREAM_release_clk_2 and not _DOWNSTREAM_dispatch_clk_2);
  dispatched_DOWNSTREAM_2 = ((false -> pre dispatched_DOWNSTREAM_2) and not _DOWNSTREAM_activate_clk_2 and not _DOWNSTREAM_release_clk_2 and not _DOWNSTREAM_dispatch_clk_2) or 
	  ((true -> pre idle_DOWNSTREAM_2) and not _DOWNSTREAM_activate_clk_2 and not _DOWNSTREAM_release_clk_2 and _DOWNSTREAM_dispatch_clk_2);
  running_DOWNSTREAM_2 = ((false -> pre running_DOWNSTREAM_2) and not _DOWNSTREAM_activate_clk_2 and not _DOWNSTREAM_release_clk_2 and not _DOWNSTREAM_dispatch_clk_2) or 
	  ((false -> pre dispatched_DOWNSTREAM_2) and _DOWNSTREAM_activate_clk_2 and not _DOWNSTREAM_release_clk_2 and not _DOWNSTREAM_dispatch_clk_2) or 
	  ((true -> pre idle_DOWNSTREAM_2) and _DOWNSTREAM_activate_clk_2 and not _DOWNSTREAM_release_clk_2 and  _DOWNSTREAM_dispatch_clk_2);
  ok__DOWNSTREAM_2 = idle_DOWNSTREAM_2 or dispatched_DOWNSTREAM_2 or running_DOWNSTREAM_2;
  idle_UPSTREAM_2 = ((true -> pre idle_UPSTREAM_2) and not _UPSTREAM_activate_clk_2 and not _UPSTREAM_release_clk_2 and not _UPSTREAM_dispatch_clk_2) or 
	  ((true -> pre idle_UPSTREAM_2) and _UPSTREAM_activate_clk_2 and _UPSTREAM_release_clk_2 and _UPSTREAM_dispatch_clk_2) or 
	  ((false -> pre dispatched_UPSTREAM_2) and _UPSTREAM_activate_clk_2 and _UPSTREAM_release_clk_2 and not _UPSTREAM_dispatch_clk_2) or 
	  ((false -> pre running_UPSTREAM_2) and not _UPSTREAM_activate_clk_2 and _UPSTREAM_release_clk_2 and not _UPSTREAM_dispatch_clk_2);
  dispatched_UPSTREAM_2 = ((false -> pre dispatched_UPSTREAM_2) and not _UPSTREAM_activate_clk_2 and not _UPSTREAM_release_clk_2 and not _UPSTREAM_dispatch_clk_2) or 
	  ((true -> pre idle_UPSTREAM_2) and not _UPSTREAM_activate_clk_2 and not _UPSTREAM_release_clk_2 and _UPSTREAM_dispatch_clk_2);
  running_UPSTREAM_2 = ((false -> pre running_UPSTREAM_2) and not _UPSTREAM_activate_clk_2 and not _UPSTREAM_release_clk_2 and not _UPSTREAM_dispatch_clk_2) or 
	  ((false -> pre dispatched_UPSTREAM_2) and _UPSTREAM_activate_clk_2 and not _UPSTREAM_release_clk_2 and not _UPSTREAM_dispatch_clk_2) or 
	  ((true -> pre idle_UPSTREAM_2) and _UPSTREAM_activate_clk_2 and not _UPSTREAM_release_clk_2 and  _UPSTREAM_dispatch_clk_2);
  ok__UPSTREAM_2 = idle_UPSTREAM_2 or dispatched_UPSTREAM_2 or running_UPSTREAM_2;
  idle_AUTOMATON_2 = ((true -> pre idle_AUTOMATON_2) and not _AUTOMATON_activate_clk_2 and not _AUTOMATON_release_clk_2 and not _AUTOMATON_dispatch_clk_2) or 
	  ((true -> pre idle_AUTOMATON_2) and _AUTOMATON_activate_clk_2 and _AUTOMATON_release_clk_2 and _AUTOMATON_dispatch_clk_2) or 
	  ((false -> pre dispatched_AUTOMATON_2) and _AUTOMATON_activate_clk_2 and _AUTOMATON_release_clk_2 and not _AUTOMATON_dispatch_clk_2) or 
	  ((false -> pre running_AUTOMATON_2) and not _AUTOMATON_activate_clk_2 and _AUTOMATON_release_clk_2 and not _AUTOMATON_dispatch_clk_2);
  dispatched_AUTOMATON_2 = ((false -> pre dispatched_AUTOMATON_2) and not _AUTOMATON_activate_clk_2 and not _AUTOMATON_release_clk_2 and not _AUTOMATON_dispatch_clk_2) or 
	  ((true -> pre idle_AUTOMATON_2) and not _AUTOMATON_activate_clk_2 and not _AUTOMATON_release_clk_2 and _AUTOMATON_dispatch_clk_2);
  running_AUTOMATON_2 = ((false -> pre running_AUTOMATON_2) and not _AUTOMATON_activate_clk_2 and not _AUTOMATON_release_clk_2 and not _AUTOMATON_dispatch_clk_2) or 
	  ((false -> pre dispatched_AUTOMATON_2) and _AUTOMATON_activate_clk_2 and not _AUTOMATON_release_clk_2 and not _AUTOMATON_dispatch_clk_2) or 
	  ((true -> pre idle_AUTOMATON_2) and _AUTOMATON_activate_clk_2 and not _AUTOMATON_release_clk_2 and  _AUTOMATON_dispatch_clk_2);
  ok__AUTOMATON_2 = idle_AUTOMATON_2 or dispatched_AUTOMATON_2 or running_AUTOMATON_2;
  idle_APPLY_CMD_2 = ((true -> pre idle_APPLY_CMD_2) and not _APPLY_CMD_activate_clk_2 and not _APPLY_CMD_release_clk_2 and not _APPLY_CMD_dispatch_clk_2) or 
	  ((true -> pre idle_APPLY_CMD_2) and _APPLY_CMD_activate_clk_2 and _APPLY_CMD_release_clk_2 and _APPLY_CMD_dispatch_clk_2) or 
	  ((false -> pre dispatched_APPLY_CMD_2) and _APPLY_CMD_activate_clk_2 and _APPLY_CMD_release_clk_2 and not _APPLY_CMD_dispatch_clk_2) or 
	  ((false -> pre running_APPLY_CMD_2) and not _APPLY_CMD_activate_clk_2 and _APPLY_CMD_release_clk_2 and not _APPLY_CMD_dispatch_clk_2);
  dispatched_APPLY_CMD_2 = ((false -> pre dispatched_APPLY_CMD_2) and not _APPLY_CMD_activate_clk_2 and not _APPLY_CMD_release_clk_2 and not _APPLY_CMD_dispatch_clk_2) or 
	  ((true -> pre idle_APPLY_CMD_2) and not _APPLY_CMD_activate_clk_2 and not _APPLY_CMD_release_clk_2 and _APPLY_CMD_dispatch_clk_2);
  running_APPLY_CMD_2 = ((false -> pre running_APPLY_CMD_2) and not _APPLY_CMD_activate_clk_2 and not _APPLY_CMD_release_clk_2 and not _APPLY_CMD_dispatch_clk_2) or 
	  ((false -> pre dispatched_APPLY_CMD_2) and _APPLY_CMD_activate_clk_2 and not _APPLY_CMD_release_clk_2 and not _APPLY_CMD_dispatch_clk_2) or 
	  ((true -> pre idle_APPLY_CMD_2) and _APPLY_CMD_activate_clk_2 and not _APPLY_CMD_release_clk_2 and  _APPLY_CMD_dispatch_clk_2);
  ok__APPLY_CMD_2 = idle_APPLY_CMD_2 or dispatched_APPLY_CMD_2 or running_APPLY_CMD_2;
  idle_NAVIGATION_2 = ((true -> pre idle_NAVIGATION_2) and not _NAVIGATION_activate_clk_2 and not _NAVIGATION_release_clk_2 and not _NAVIGATION_dispatch_clk_2) or 
	  ((true -> pre idle_NAVIGATION_2) and _NAVIGATION_activate_clk_2 and _NAVIGATION_release_clk_2 and _NAVIGATION_dispatch_clk_2) or 
	  ((false -> pre dispatched_NAVIGATION_2) and _NAVIGATION_activate_clk_2 and _NAVIGATION_release_clk_2 and not _NAVIGATION_dispatch_clk_2) or 
	  ((false -> pre running_NAVIGATION_2) and not _NAVIGATION_activate_clk_2 and _NAVIGATION_release_clk_2 and not _NAVIGATION_dispatch_clk_2);
  dispatched_NAVIGATION_2 = ((false -> pre dispatched_NAVIGATION_2) and not _NAVIGATION_activate_clk_2 and not _NAVIGATION_release_clk_2 and not _NAVIGATION_dispatch_clk_2) or 
	  ((true -> pre idle_NAVIGATION_2) and not _NAVIGATION_activate_clk_2 and not _NAVIGATION_release_clk_2 and _NAVIGATION_dispatch_clk_2);
  running_NAVIGATION_2 = ((false -> pre running_NAVIGATION_2) and not _NAVIGATION_activate_clk_2 and not _NAVIGATION_release_clk_2 and not _NAVIGATION_dispatch_clk_2) or 
	  ((false -> pre dispatched_NAVIGATION_2) and _NAVIGATION_activate_clk_2 and not _NAVIGATION_release_clk_2 and not _NAVIGATION_dispatch_clk_2) or 
	  ((true -> pre idle_NAVIGATION_2) and _NAVIGATION_activate_clk_2 and not _NAVIGATION_release_clk_2 and  _NAVIGATION_dispatch_clk_2);
  ok__NAVIGATION_2 = idle_NAVIGATION_2 or dispatched_NAVIGATION_2 or running_NAVIGATION_2;
  idle_DOWNSTREAM = ((true -> pre idle_DOWNSTREAM) and not _DOWNSTREAM_activate_clk and not _DOWNSTREAM_release_clk and not _DOWNSTREAM_dispatch_clk) or 
	  ((true -> pre idle_DOWNSTREAM) and _DOWNSTREAM_activate_clk and _DOWNSTREAM_release_clk and _DOWNSTREAM_dispatch_clk) or 
	  ((false -> pre dispatched_DOWNSTREAM) and _DOWNSTREAM_activate_clk and _DOWNSTREAM_release_clk and not _DOWNSTREAM_dispatch_clk) or 
	  ((false -> pre running_DOWNSTREAM) and not _DOWNSTREAM_activate_clk and _DOWNSTREAM_release_clk and not _DOWNSTREAM_dispatch_clk);
  dispatched_DOWNSTREAM = ((false -> pre dispatched_DOWNSTREAM) and not _DOWNSTREAM_activate_clk and not _DOWNSTREAM_release_clk and not _DOWNSTREAM_dispatch_clk) or 
	  ((true -> pre idle_DOWNSTREAM) and not _DOWNSTREAM_activate_clk and not _DOWNSTREAM_release_clk and _DOWNSTREAM_dispatch_clk);
  running_DOWNSTREAM = ((false -> pre running_DOWNSTREAM) and not _DOWNSTREAM_activate_clk and not _DOWNSTREAM_release_clk and not _DOWNSTREAM_dispatch_clk) or 
	  ((false -> pre dispatched_DOWNSTREAM) and _DOWNSTREAM_activate_clk and not _DOWNSTREAM_release_clk and not _DOWNSTREAM_dispatch_clk) or 
	  ((true -> pre idle_DOWNSTREAM) and _DOWNSTREAM_activate_clk and not _DOWNSTREAM_release_clk and  _DOWNSTREAM_dispatch_clk);
  ok__DOWNSTREAM = idle_DOWNSTREAM or dispatched_DOWNSTREAM or running_DOWNSTREAM;
  idle_UPSTREAM = ((true -> pre idle_UPSTREAM) and not _UPSTREAM_activate_clk and not _UPSTREAM_release_clk and not _UPSTREAM_dispatch_clk) or 
	  ((true -> pre idle_UPSTREAM) and _UPSTREAM_activate_clk and _UPSTREAM_release_clk and _UPSTREAM_dispatch_clk) or 
	  ((false -> pre dispatched_UPSTREAM) and _UPSTREAM_activate_clk and _UPSTREAM_release_clk and not _UPSTREAM_dispatch_clk) or 
	  ((false -> pre running_UPSTREAM) and not _UPSTREAM_activate_clk and _UPSTREAM_release_clk and not _UPSTREAM_dispatch_clk);
  dispatched_UPSTREAM = ((false -> pre dispatched_UPSTREAM) and not _UPSTREAM_activate_clk and not _UPSTREAM_release_clk and not _UPSTREAM_dispatch_clk) or 
	  ((true -> pre idle_UPSTREAM) and not _UPSTREAM_activate_clk and not _UPSTREAM_release_clk and _UPSTREAM_dispatch_clk);
  running_UPSTREAM = ((false -> pre running_UPSTREAM) and not _UPSTREAM_activate_clk and not _UPSTREAM_release_clk and not _UPSTREAM_dispatch_clk) or 
	  ((false -> pre dispatched_UPSTREAM) and _UPSTREAM_activate_clk and not _UPSTREAM_release_clk and not _UPSTREAM_dispatch_clk) or 
	  ((true -> pre idle_UPSTREAM) and _UPSTREAM_activate_clk and not _UPSTREAM_release_clk and  _UPSTREAM_dispatch_clk);
  ok__UPSTREAM = idle_UPSTREAM or dispatched_UPSTREAM or running_UPSTREAM;
  idle_AUTOMATON = ((true -> pre idle_AUTOMATON) and not _AUTOMATON_activate_clk and not _AUTOMATON_release_clk and not _AUTOMATON_dispatch_clk) or 
	  ((true -> pre idle_AUTOMATON) and _AUTOMATON_activate_clk and _AUTOMATON_release_clk and _AUTOMATON_dispatch_clk) or 
	  ((false -> pre dispatched_AUTOMATON) and _AUTOMATON_activate_clk and _AUTOMATON_release_clk and not _AUTOMATON_dispatch_clk) or 
	  ((false -> pre running_AUTOMATON) and not _AUTOMATON_activate_clk and _AUTOMATON_release_clk and not _AUTOMATON_dispatch_clk);
  dispatched_AUTOMATON = ((false -> pre dispatched_AUTOMATON) and not _AUTOMATON_activate_clk and not _AUTOMATON_release_clk and not _AUTOMATON_dispatch_clk) or 
	  ((true -> pre idle_AUTOMATON) and not _AUTOMATON_activate_clk and not _AUTOMATON_release_clk and _AUTOMATON_dispatch_clk);
  running_AUTOMATON = ((false -> pre running_AUTOMATON) and not _AUTOMATON_activate_clk and not _AUTOMATON_release_clk and not _AUTOMATON_dispatch_clk) or 
	  ((false -> pre dispatched_AUTOMATON) and _AUTOMATON_activate_clk and not _AUTOMATON_release_clk and not _AUTOMATON_dispatch_clk) or 
	  ((true -> pre idle_AUTOMATON) and _AUTOMATON_activate_clk and not _AUTOMATON_release_clk and  _AUTOMATON_dispatch_clk);
  ok__AUTOMATON = idle_AUTOMATON or dispatched_AUTOMATON or running_AUTOMATON;
  idle_APPLY_CMD = ((true -> pre idle_APPLY_CMD) and not _APPLY_CMD_activate_clk and not _APPLY_CMD_release_clk and not _APPLY_CMD_dispatch_clk) or 
	  ((true -> pre idle_APPLY_CMD) and _APPLY_CMD_activate_clk and _APPLY_CMD_release_clk and _APPLY_CMD_dispatch_clk) or 
	  ((false -> pre dispatched_APPLY_CMD) and _APPLY_CMD_activate_clk and _APPLY_CMD_release_clk and not _APPLY_CMD_dispatch_clk) or 
	  ((false -> pre running_APPLY_CMD) and not _APPLY_CMD_activate_clk and _APPLY_CMD_release_clk and not _APPLY_CMD_dispatch_clk);
  dispatched_APPLY_CMD = ((false -> pre dispatched_APPLY_CMD) and not _APPLY_CMD_activate_clk and not _APPLY_CMD_release_clk and not _APPLY_CMD_dispatch_clk) or 
	  ((true -> pre idle_APPLY_CMD) and not _APPLY_CMD_activate_clk and not _APPLY_CMD_release_clk and _APPLY_CMD_dispatch_clk);
  running_APPLY_CMD = ((false -> pre running_APPLY_CMD) and not _APPLY_CMD_activate_clk and not _APPLY_CMD_release_clk and not _APPLY_CMD_dispatch_clk) or 
	  ((false -> pre dispatched_APPLY_CMD) and _APPLY_CMD_activate_clk and not _APPLY_CMD_release_clk and not _APPLY_CMD_dispatch_clk) or 
	  ((true -> pre idle_APPLY_CMD) and _APPLY_CMD_activate_clk and not _APPLY_CMD_release_clk and  _APPLY_CMD_dispatch_clk);
  ok__APPLY_CMD = idle_APPLY_CMD or dispatched_APPLY_CMD or running_APPLY_CMD;
  idle_NAVIGATION = ((true -> pre idle_NAVIGATION) and not _NAVIGATION_activate_clk and not _NAVIGATION_release_clk and not _NAVIGATION_dispatch_clk) or 
	  ((true -> pre idle_NAVIGATION) and _NAVIGATION_activate_clk and _NAVIGATION_release_clk and _NAVIGATION_dispatch_clk) or 
	  ((false -> pre dispatched_NAVIGATION) and _NAVIGATION_activate_clk and _NAVIGATION_release_clk and not _NAVIGATION_dispatch_clk) or 
	  ((false -> pre running_NAVIGATION) and not _NAVIGATION_activate_clk and _NAVIGATION_release_clk and not _NAVIGATION_dispatch_clk);
  dispatched_NAVIGATION = ((false -> pre dispatched_NAVIGATION) and not _NAVIGATION_activate_clk and not _NAVIGATION_release_clk and not _NAVIGATION_dispatch_clk) or 
	  ((true -> pre idle_NAVIGATION) and not _NAVIGATION_activate_clk and not _NAVIGATION_release_clk and _NAVIGATION_dispatch_clk);
  running_NAVIGATION = ((false -> pre running_NAVIGATION) and not _NAVIGATION_activate_clk and not _NAVIGATION_release_clk and not _NAVIGATION_dispatch_clk) or 
	  ((false -> pre dispatched_NAVIGATION) and _NAVIGATION_activate_clk and not _NAVIGATION_release_clk and not _NAVIGATION_dispatch_clk) or 
	  ((true -> pre idle_NAVIGATION) and _NAVIGATION_activate_clk and not _NAVIGATION_release_clk and  _NAVIGATION_dispatch_clk);
  ok__NAVIGATION = idle_NAVIGATION or dispatched_NAVIGATION or running_NAVIGATION;
   schedul_ok = ok__DOWNSTREAM_2 and ok__UPSTREAM_2 and ok__AUTOMATON_2 and ok__APPLY_CMD_2 and ok__NAVIGATION_2 and ok__DOWNSTREAM and ok__UPSTREAM and ok__AUTOMATON and ok__APPLY_CMD and ok__NAVIGATION;

tel

-- to be used for formal verification 
node schedule_pfs_5_oracles_properties(
  _NAVIGATION_release_clk_min_max:int;
  _APPLY_CMD_release_clk_min_max:int;
  _AUTOMATON_release_clk_min_max:int;
  _UPSTREAM_release_clk_min_max:int;
  _DOWNSTREAM_release_clk_min_max:int;
  _NAVIGATION_release_clk_2_min_max:int;
  _APPLY_CMD_release_clk_2_min_max:int;
  _AUTOMATON_release_clk_2_min_max:int;
  _UPSTREAM_release_clk_2_min_max:int;
  _DOWNSTREAM_release_clk_2_min_max:int;
   alea1, alea2 : bool) 
returns (ok:bool);
let
  ok =
    ( 10 <= _NAVIGATION_release_clk_min_max and _NAVIGATION_release_clk_min_max <= 20) and
    ( 9 <= _APPLY_CMD_release_clk_min_max and _APPLY_CMD_release_clk_min_max <= 10) and
    ( 1 <= _AUTOMATON_release_clk_min_max and _AUTOMATON_release_clk_min_max <= 2) and
    ( 40 <= _UPSTREAM_release_clk_min_max and _UPSTREAM_release_clk_min_max <= 50) and
    ( 200 <= _DOWNSTREAM_release_clk_min_max and _DOWNSTREAM_release_clk_min_max <= 240) and
    ( 10 <= _NAVIGATION_release_clk_2_min_max and _NAVIGATION_release_clk_2_min_max <= 20) and
    ( 9 <= _APPLY_CMD_release_clk_2_min_max and _APPLY_CMD_release_clk_2_min_max <= 10) and
    ( 1 <= _AUTOMATON_release_clk_2_min_max and _AUTOMATON_release_clk_2_min_max <= 2) and
    ( 40 <= _UPSTREAM_release_clk_2_min_max and _UPSTREAM_release_clk_2_min_max <= 50) and
    ( 200 <= _DOWNSTREAM_release_clk_2_min_max and _DOWNSTREAM_release_clk_2_min_max <= 240) and
    true;
tel


---------------include "pfs_5_nodes.lus"
-- This file was generated by aadl2sync version O.31.
--	 ../../bin/aadl2sync --show-scheduling-vars --check-schedulability
--		--gen-fake-body -o pfs_5 PFS_Data.aaxl Deployment.aaxl PFS_HW.aaxl
--		PFS_SW.aaxl
-- on peouvou the 30/1/2008 at 15:04:47

------------include "fillme_pfs_5_nodes.lus"

const base = 1; /* Fix me? */

-----include "DOWNSTREAM.lus"  
type T_ACCELERATION = real^3;
type T_ACS_CMD = [bool, bool];
type T_ANGLE = real;
type T_ANGULAR_RATE = [int, int, int];
type T_CAM_CMD = [T_ON_OFF_CMD, T_ON_OFF_CMD, T_ON_OFF_CMD, T_ON_OFF_CMD];
type T_CM_CONFIGURATION = [real, int, [int, int, int], real^3, real^3, [int, int, int], real^6, real, real, real, real, real, real, real^12, real^3, real^3, T_VECTOR6, T_VECTOR6, T_VECTOR18, T_VECTOR4, T_VECTOR4];
type T_CM_TELEMETRY = [bool^4, int, int, int, int, [int, int], [int, int, int, int, int, int], real, real];
type T_CONFIGURATION_TABLE = [bool, bool, bool, bool, bool, bool, int, bool, bool];
type T_CONTROLLER_CONFIG = [T_MASS, T_INERTIA, T_VECTOR3, T_INITIAL_EFFICIENCY_MATRIX, T_EFFICIENCY_MATRIX, T_VELOCITY, T_QUATERNION, T_QUATERNION, real];
type T_CONTROLLER_FILTER_STATE = [T_MATRIX_3_4, T_MATRIX_3_4];
type T_CONTROLLER_SATURATION_LEVEL = real^3;
type T_CONTROLLER_STATE = [T_QUATERNION, T_ANGULAR_RATE, T_ACCELERATION];
type T_CONTROLLER_TELEMETRY = [T_VELOCITY, T_THRUSTERS_OPENING, real, real, real];
type T_CONTROL_GAINS = [real, real];
type T_CURRENT = real;
type T_DTG_ANGULAR_INCREMENT = real^4;
type T_DTG_LSB = real^4;
-- type T_DTG_MEAS_TABLE = [[real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real], [real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real], [real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real], [real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real, real]];
-- type T_EFFICIENCY_MATRIX = [real^3, real^3, real^3];
type T_FCV_OPENING_DUR_CMD = [int, int];
-- type T_FORCE_EFFICIENCY_MATRIX = [real^3, real^3, real^3, real^3];
type T_FTCP_HEALTH_STATUS = bool^3;
type T_HW_STATUSES = [bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, T_PFS_EWM_MSU_MSU_HS, bool, bool, bool, bool, bool, bool];
type T_INERTIA = real^3;
--type T_INITIAL_EFFICIENCY_MATRIX = [real^6, real^6, real^6, real^6];
type T_MASS = real;
--type T_MATRIX_3_4 = [real^3, real^3, real^3, real^3];
type T_MSU_ID = int;
type T_MSU_STATUS = int;
type T_MSU_TELEMETRY = [bool, bool, bool, bool, bool, bool, T_CAM_MODE, bool, bool, bool, T_CONFIGURATION_TABLE, T_CONFIGURATION_TABLE, T_MSU_STATUS, bool, bool, T_NAVIGATION_TELEMETRY, T_CONTROLLER_TELEMETRY, T_CM_TELEMETRY, T_OBUT, T_SYNCHRO_BROADCAST_STATUS, T_HW_STATUSES, T_SW_WARNING_CODE, T_FTCP_HEALTH_STATUS, int, T_MSU_ID, bool, bool, bool, bool, bool, T_PFS_EWM_DTG12_MSU, bool, bool, T_PFS_IWM_MEASUREMENTS, T_POWER_CONSUMPTION];
type T_NAVIGATION_CONFIGURATION = [T_QUATERNION, T_QUATERNION, real, T_QUATERNION, T_QUATERNION, T_VECTOR4, T_VECTOR4, T_VECTOR8, real, real, T_VECTOR12, T_VECTOR9, T_VECTOR12, T_VECTOR4];
type T_NAVIGATION_OUTPUT = [T_QUATERNION, T_QUATERNION, T_ANGULAR_RATE];
type T_NAVIGATION_STATE = [T_QUATERNION, T_QUATERNION, T_QUATERNION, T_QUATERNION];
type T_NAVIGATION_TELEMETRY = [bool, T_ANGLE, T_ANGLE, T_NAVIGATION_OUTPUT];
type T_OBUT = int;
type T_ON_OFF_CMD = [bool, bool];
type T_PFS_1BUS_DATA = [T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK, T_PFS_BUS_DATA_BLOCK];
type T_PFS_ACM_DATA = [bool, int, int];
type T_PFS_BUS_DATA = [T_PFS_1BUS_DATA, T_PFS_1BUS_DATA, T_PFS_1BUS_DATA, T_PFS_1BUS_DATA];
--type T_PFS_BUS_DATA_BLOCK = [int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16, int16];
type T_PFS_BUS_SENSOR_DATA = [T_PFS_TGM_DATA, T_PFS_TGM_DATA, T_PFS_ACM_DATA, T_PFS_ACM_DATA, T_PFS_ACM_DATA];
type T_PFS_EWC_MSU_PDE_T = [T_ACS_CMD, T_ACS_CMD, T_ACS_CMD, T_ACS_CMD];
type T_PFS_EWM_DTG12_MSU = [T_PFS_EWM_DTG_MSU, T_PFS_EWM_DTG_MSU];
type T_PFS_EWM_DTG12_MSU_MODE = [T_PFS_EWM_DTG_MSU_MODE, T_PFS_EWM_DTG_MSU_MODE];
type T_PFS_EWM_DTG_MSU = [T_PFS_EWM_DTG_MSU_MODE, int, int];
type T_PFS_EWM_DTG_MSU_MODE = int;
type T_PFS_EWM_MSU_MSU_HS = bool^3;
type T_PFS_EWM_SSU_MSU_MEAS = real^4;
type T_PFS_IWM_MEASUREMENTS = [T_VOLTAGE, T_VOLTAGE, T_VOLTAGE, T_VOLTAGE, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_CURRENT, T_VOLTAGE, T_TEMP, T_TEMP];
type T_PFS_TGM_DATA = [bool, int, bool, bool, int, bool, bool, int, int, int, int, int, int];
type T_POWER_CONSUMPTION = real;
type T_QUATERNION = real^4;
type T_SEQUENCER_CONFIGURATION = [bool, bool, bool, bool, bool, bool, int, bool, bool];
type T_SW_WARNING_CODE = int;
type T_SYNCHRO_BROADCAST_STATUS = bool^4;
type T_TEMP = real;
type T_THRUSTERS_OPENING = [T_FCV_OPENING_DUR_CMD, T_FCV_OPENING_DUR_CMD];
-- type T_TORQUE_EFFICIENCY_MATRIX = [real^3, real^3, real^3, real^3];
type T_VECTOR12 = real^12;
type T_VECTOR18 = real^18;
type T_VECTOR3 = real^3;
type T_VECTOR4 = real^4;
type T_VECTOR6 = real^6 ;
type T_VECTOR8 = real^8 ;
type T_VECTOR9 = real^9;
type T_VELOCITY = real;
type T_VOLTAGE = real;
type int16 = int;
type T_CAM_MODE = bool^3;
type T_PFS_EC_UPDATE_CONF_MSU = [T_CONFIGURATION_TABLE, bool];
type T_MSU_STATE = bool^4;
type T_PDE_CMD_A = [T_ON_OFF_CMD, T_CAM_CMD, T_CAM_CMD, T_CAM_CMD];
type T_DPU_CMD = [T_ON_OFF_CMD, T_ON_OFF_CMD];
type T_HLTM = [bool, bool, bool, bool, bool, bool, T_MSU_STATE];
type T_HLTC = [bool, T_PFS_EC_UPDATE_CONF_MSU, bool, bool];
const MSU1 = 0;
const MSU2 = 1;
const SLAVE = 0;
const MASTER = 1;
const DTG_FINE_MODE = 0;
const DTG_COARSE_MODE = 1;
const C_0_MS = 0;
const C_100_MS = 1;
const C_1_S = 10;
const C_2_S = 20;
const C_300_MS = 3;
const C_400_MS = 4;
const C_500_MS = 5;
const C_600_MS = 6;
const C_60_S = 600;
const C_B10_PERIOD = C_100_MS;
const C_B10_PHASE = C_0_MS;
const C_B15_PERIOD = C_100_MS;
const C_B15_PHASE = C_0_MS;
const C_B20_PERIOD = C_100_MS;
const C_B20_PHASE = C_0_MS;
const C_B700_PERIOD = C_500_MS;
const C_B80_PERIOD = C_100_MS;
const C_B80_PHASE = C_0_MS;
const C_B90_PERIOD = C_100_MS;
const C_B90_PHASE = C_0_MS;
const C_B95_PERIOD = C_100_MS;
const C_B95_PHASE = C_0_MS;
const C_CAM_IN_WAITING_DELAY = C_300_MS;
const C_D_ACCELERATION = [0.0, 0.0, 0.0];
const C_D_ACS_CMD = [false, false];
const C_D_ANGLE = 0.0;
const C_D_ANGULAR_RATE = [0, 0, 0];
const C_D_CAM_CMD = [[false, false], [false, false], [false, false], [false, false]];
const C_D_CAM_MODE = [false, false, false];
const C_D_CM_CONFIGURATION = [0.0, 0, [0, 0, 0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0, 0, 0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]];
const C_D_CM_TELEMETRY = [[false, false, false, false], 0, 0, 0, 0, [0, 0], [0, 0, 0, 0, 0, 0], 0.0, 0.0];
const C_D_CONFIGURATION_TABLE = [false, false, false, false, false, false, 0, false, false];
const C_D_CONTROLLER_CONFIGURATION = [0.0, [1.0, 1.0, 1.0], [0.0, 0.0, 0.0], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], 0.0, [1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], 0.0];
const C_D_CONTROLLER_FILTER_STATE = [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]];
const C_D_CONTROLLER_SATURATION_LEVEL = [0.0, 0.0, 0.0];
const C_D_CONTROLLER_STATE = [[1.0, 0.0, 0.0, 0.0], [0, 0, 0], [0.0, 0.0, 0.0]];
const C_D_CONTROLLER_TELEMETRY = [0.0, [[0, 0], [0, 0]], 0.0, 0.0, 0.0];
const C_D_CONTROL_GAINS = [0.0, 0.0];
const C_D_CURRENT = 0.0;
const C_D_DTG_ANGULAR_INCREMENT = [0.0, 0.0, 0.0, 0.0];
const C_D_DTG_LSB = [0.0, 0.0, 0.0, 0.0];
const C_D_DTG_MEAS_TABLE = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];
const C_D_EFFICIENCY_MATRIX = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
const C_D_FORCE_EFFICIENCY_MATRIX = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
const C_D_FTCP_HEALTH_STATUS = [true, true, true];
const C_D_HW_STATUSES = [false, false, false, false, false, false, false, false, false, false, [false, false, false], false, false, false, false, false, false];
const C_D_INERTIA = [1.0, 1.0, 1.0];
const C_D_INITIAL_EFFICIENCY_MATRIX = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];
const C_D_MASS = 0.0;
const C_D_MATRIX_3_4 = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
const C_D_MSU = 0;
const C_D_MSU_STATUS = 0;
const C_D_MSU_TELEMETRY = [false, false, false, false, false, false, [false, false, false], false, false, false, [false, true, true, true, true, true, 1800, false, false], [false, true, true, true, true, true, 1800, false, false], 0, true, false, [false, 0.0, 0.0, [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0, 0, 0]]], [0.0, [[0, 0], [0, 0]], 0.0, 0.0, 0.0], [[false, false, false, false], 0, 0, 0, 0, [0, 0], [0, 0, 0, 0, 0, 0], 0.0, 0.0], 0, [false, false, false, false], [false, false, false, false, false, false, false, false, false, false, [false, false, false], false, false, false, false, false, false], 0, [true, true, true], 0, 0, false, false, false, false, false, [[0, 0, 0], [0, 0, 0]], false, false, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0.0];
const C_D_NAVIGATION_CONFIGURATION = [[1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], 0.0, [1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0.0, 0.0, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]];
const C_D_NAVIGATION_OUTPUT = [[1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], [0, 0, 0]];
const C_D_NAVIGATION_STATE = [[1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0]];
const C_D_NAVIGATION_TELEMETRY = [false, 0.0, 0.0, [[1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0], [0, 0, 0]]];
const C_D_OBUT = 0;
const C_D_ON_OFF_CMD = [false, false];
const C_D_PFS_ACM_DATA = [false, 0, 0];
const C_D_PFS_BUS_SENSOR_DATA = [[false, 0, false, false, 0, false, false, 0, 0, 0, 0, 0, 0], [false, 0, false, false, 0, false, false, 0, 0, 0, 0, 0, 0], [false, 0, 0], [false, 0, 0], [false, 0, 0]];
const C_D_PFS_EC_UPDATE_CONFIG_MSU = [[false, true, true, true, true, false, 1800, false, false], false];
const C_D_PFS_EWC_MSU_PDE_T = [[false, false], [false, false], [false, false], [false, false]];
const C_D_PFS_EWM_DTG12_MSU = [[0, 0, 0], [0, 0, 0]];
const C_D_PFS_EWM_DTG12_MSU_MODE = [C_D_PFS_EWM_DTG_MSU_MODE, C_D_PFS_EWM_DTG_MSU_MODE];
const C_D_PFS_EWM_DTG_MSU = [0, 0, 0];
const C_D_PFS_EWM_DTG_MSU_MODE = 0;
const C_D_PFS_EWM_MSU_MSU_HS = [false, false, false];
const C_D_PFS_EWM_SSU_MSU_MEAS = [0.0, 0.0, 0.0, 0.0];
const C_D_PFS_IWM_MEASUREMENTS = [C_D_VOLTAGE, C_D_VOLTAGE, C_D_VOLTAGE, C_D_VOLTAGE, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_CURRENT, C_D_VOLTAGE, C_D_TEMP, C_D_TEMP];
const C_D_PFS_TGM_DATA = [false, 0, false, false, 0, false, false, 0, 0, 0, 0, 0, 0];
const C_D_POWER_CONSUMPTION = 0.0;
const C_D_QUATERNION = [1.0, 0.0, 0.0, 0.0];
const C_D_SEQUENCER_CONFIGURATION = [false, false, false, false, false, true, 0, false, false];
const C_D_SW_WARNING_CODE = 0;
const C_D_SYNCHRO_BROADCAST_STATUS = [false, false, false, false];
const C_D_TEMP = 0.0;
const C_D_THRUSTERS_OPENING = [[0, 0], [0, 0]];
const C_D_TORQUE_EFFICIENCY_MATRIX = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]];
const C_D_VECTOR12 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const C_D_VECTOR18 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const C_D_VECTOR3 = [0.0, 0.0, 0.0];
const C_D_VECTOR4 = [0.0, 0.0, 0.0, 0.0];
const C_D_VECTOR6 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const C_D_VECTOR8 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const C_D_VECTOR9 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const C_D_VELOCITY = 0.0;
const C_D_VOLTAGE = 0.0;
const C_HLTM_CONFIG_STATUS_DURATION = C_2_S;
const C_OBUT_INCREMENT = 1;
const C_SEQ_FIRST_STEP = C_0_MS;
const C_SEQ_STEP_6A_DURATION = C_100_MS;
const C_SEQ_STEP_6B_DURATION = C_100_MS;
const C_SEQ_STEP_6C_DURATION = C_100_MS;
const C_SEQ_STEP_6D_DURATION = C_100_MS;
const C_SEQ_STEP_7_DURATION = C_100_MS;
const C_SEQ_STEP_8_DURATION = C_400_MS;
const C_SEQ_STEP_9_DURATION = C_600_MS;
const C_D_MSU_STATE = [true, false, false, false];
const C_D_HLTM = [false, false, false, false, false, false, [false, false, false, false]];
const C_D_PDE_CMD_A = [[false, false], [[false, false], [false, false], [false, false], [false, false]], [[false, false], [false, false], [false, false], [false, false]], [[false, false], [false, false], [false, false], [false, false]]];
const C_D_DPU_CMD = [[false, false], [false, false]];


node PFS_SW__DOWNSTREAM_CONTROL (
   CAM_MODE : T_CAM_MODE;
   CONTROLLER_TO_BE_ACTIVATED : bool;
   NAVIGATION_OUTPUT : T_NAVIGATION_OUTPUT;
   THRUSTERS_OPENING : T_THRUSTERS_OPENING;
) returns (
   END_BOOST_IS_REACHED : bool;
   ESTIMATED_STATE : T_CONTROLLER_STATE;
   SUN_IS_AIMED : bool;
);
var
   _L4_DOWNSTREAM : bool;
   _L3_DOWNSTREAM : bool;
   _L2_DOWNSTREAM : bool;
   _L10_DOWNSTREAM : bool;
   _L15_DOWNSTREAM : bool;
   _L18_DOWNSTREAM : T_CONTROLLER_STATE;
   _L24_DOWNSTREAM : T_ANGULAR_RATE;
   _L23_DOWNSTREAM : T_QUATERNION;
   _L22_DOWNSTREAM : T_QUATERNION;
   _L27_DOWNSTREAM : T_FCV_OPENING_DUR_CMD;
   _L26_DOWNSTREAM : T_FCV_OPENING_DUR_CMD;
   _L30_DOWNSTREAM : int;
   _L29_DOWNSTREAM : int;
   _L34_DOWNSTREAM : int;
   _L33_DOWNSTREAM : int;
   _L32_DOWNSTREAM : int;
let
   _L2_DOWNSTREAM, _L3_DOWNSTREAM, _L4_DOWNSTREAM = (CAM_MODE[0], CAM_MODE[1], CAM_MODE[2]);
   _L10_DOWNSTREAM = (CONTROLLER_TO_BE_ACTIVATED and _L2_DOWNSTREAM);
   END_BOOST_IS_REACHED = (_L10_DOWNSTREAM and (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre _L10_DOWNSTREAM))))));
   SUN_IS_AIMED = (_L15_DOWNSTREAM and (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre (false -> pre _L15_DOWNSTREAM)))))))))));
   _L15_DOWNSTREAM = (CONTROLLER_TO_BE_ACTIVATED and _L3_DOWNSTREAM);
   _L18_DOWNSTREAM = [C_D_QUATERNION, if ((_L29_DOWNSTREAM = _L32_DOWNSTREAM)) then (_L24_DOWNSTREAM) else (C_D_ANGULAR_RATE), C_D_ACCELERATION];
   _L22_DOWNSTREAM, _L23_DOWNSTREAM, _L24_DOWNSTREAM = (NAVIGATION_OUTPUT[0], NAVIGATION_OUTPUT[1], NAVIGATION_OUTPUT[2]);
   _L26_DOWNSTREAM, _L27_DOWNSTREAM = (THRUSTERS_OPENING[0], THRUSTERS_OPENING[1]);
   _L29_DOWNSTREAM, _L30_DOWNSTREAM = (_L26_DOWNSTREAM[0], _L26_DOWNSTREAM[1]);
   _L32_DOWNSTREAM, _L33_DOWNSTREAM, _L34_DOWNSTREAM = (_L24_DOWNSTREAM[0], _L24_DOWNSTREAM[1], _L24_DOWNSTREAM[2]);
   ESTIMATED_STATE = C_D_CONTROLLER_STATE;
tel


-----include "UPSTREAM.lus"
node IMPLIES (
   X : bool;
   Y : bool
) returns (
   OK : bool
);
let
   OK = (not(X) or Y);
tel
node PFS_SW__UPSTREAM_CONTROL(
   CAM_MODE : T_CAM_MODE;
   CONTROLLER_TO_BE_ACTIVATED : bool;
   ESTIMATED_STATE : T_CONTROLLER_STATE;
   NAVIGATION_OUTPUT : T_NAVIGATION_OUTPUT;
) returns (
   THRUSTERS_OPENING : T_THRUSTERS_OPENING
);
var
   ESTIMATED_STATE_VALUE : int;
   NAVIGATION_VALUE : int;
   _L2_UPSTREAM : T_FCV_OPENING_DUR_CMD;
   _L3_UPSTREAM : int;
   _L18_UPSTREAM : T_FCV_OPENING_DUR_CMD;
   _L24_UPSTREAM : int;
   _L23_UPSTREAM : int;
   _L21_UPSTREAM : T_ANGULAR_RATE;
   _L20_UPSTREAM : T_QUATERNION;
   _L19_UPSTREAM : T_QUATERNION;
   _L29_UPSTREAM : T_ACCELERATION;
   _L28_UPSTREAM : T_ANGULAR_RATE;
   _L27_UPSTREAM : T_QUATERNION;
   _L32_UPSTREAM : int;
   _L31_UPSTREAM : int;
   _L49_UPSTREAM : T_FCV_OPENING_DUR_CMD;
let
   THRUSTERS_OPENING = [_L49_UPSTREAM, _L49_UPSTREAM];
   _L2_UPSTREAM = [_L3_UPSTREAM, _L3_UPSTREAM];
   _L3_UPSTREAM = if (CONTROLLER_TO_BE_ACTIVATED) then (1) else (0);
   _L18_UPSTREAM = [NAVIGATION_VALUE, if (IMPLIES((CONTROLLER_TO_BE_ACTIVATED and (false -> pre CONTROLLER_TO_BE_ACTIVATED)), (((5 + (0 -> pre NAVIGATION_VALUE)) = NAVIGATION_VALUE) and (NAVIGATION_VALUE = (0 -> pre ESTIMATED_STATE_VALUE))))) then (1) else (0)];
   _L19_UPSTREAM, _L20_UPSTREAM, _L21_UPSTREAM = (NAVIGATION_OUTPUT[0], NAVIGATION_OUTPUT[1], NAVIGATION_OUTPUT[2]);
   NAVIGATION_VALUE, _L23_UPSTREAM, _L24_UPSTREAM = (_L21_UPSTREAM[0], _L21_UPSTREAM[1], _L21_UPSTREAM[2]);
   _L27_UPSTREAM, _L28_UPSTREAM, _L29_UPSTREAM = (ESTIMATED_STATE[0], ESTIMATED_STATE[1], ESTIMATED_STATE[2]);
   ESTIMATED_STATE_VALUE, _L31_UPSTREAM, _L32_UPSTREAM = (_L28_UPSTREAM[0], _L28_UPSTREAM[1], _L28_UPSTREAM[2]);
   _L49_UPSTREAM = [0, 0];
tel


-----include "NAVIGATION.lus"  

node B10_MSTC (
   PFS_HLTC_UPDATE_CONFIG_IS_ON : bool;
   PFS_EC_UPDATE_CONFIG_MSU : T_PFS_EC_UPDATE_CONF_MSU
) returns (
   NEW_CONFIG_IS_AVAILABLE : bool;
   NEW_CONFIG_IS_CONFIRMED : bool;
   SEQUENCER_CONFIGURATION : T_SEQUENCER_CONFIGURATION;
   PDE1_PDE4_CONFIG_IS_SELECTED : bool
);
var
   CONFIGURATION_TABLE : T_CONFIGURATION_TABLE;
   _L279_BASIC_OP : bool;
   _L281_BASIC_OP : bool;
   _L282_BASIC_OP : bool;
   _L283_BASIC_OP : bool;
   _L284_BASIC_OP : bool;
   _L285_BASIC_OP : bool;
   _L286_BASIC_OP : int;
   _L287_BASIC_OP : bool;
   truc : T_CONFIGURATION_TABLE;
let
   SEQUENCER_CONFIGURATION = [PDE1_PDE4_CONFIG_IS_SELECTED, _L281_BASIC_OP, _L282_BASIC_OP, _L283_BASIC_OP, _L284_BASIC_OP, _L285_BASIC_OP, _L286_BASIC_OP, _L287_BASIC_OP, _L279_BASIC_OP];
   NEW_CONFIG_IS_CONFIRMED = PRECONDITION(NEW_CONFIG_IS_AVAILABLE, PFS_HLTC_UPDATE_CONFIG_IS_ON);
   PDE1_PDE4_CONFIG_IS_SELECTED, _L281_BASIC_OP, _L282_BASIC_OP, _L283_BASIC_OP, _L284_BASIC_OP, _L285_BASIC_OP, _L286_BASIC_OP, _L287_BASIC_OP, _L279_BASIC_OP = (truc[0], truc[1], truc[2], truc[3], truc[4], truc[5], truc[6], truc[7], truc[8]);
   truc = MEMORY_CONFIGURATION_TABLE(MEMORY_CONFIGURATION_TABLE(CONFIGURATION_TABLE, NEW_CONFIG_IS_AVAILABLE), NEW_CONFIG_IS_CONFIRMED);
   CONFIGURATION_TABLE, NEW_CONFIG_IS_AVAILABLE = (PFS_EC_UPDATE_CONFIG_MSU[0], PFS_EC_UPDATE_CONFIG_MSU[1]);
tel
node B20_PROVIDE_ATTITUDE_NAVIG_DATA (
   NEW_CONFIG_IS_AVAILABLE : bool;
   NEW_CONFIG_IS_CONFIRMED : bool;
   PFS_EWM_DTG12_MSU : T_PFS_EWM_DTG12_MSU;
   CAM_MODE : T_CAM_MODE
) returns (
   NAVIGATION_OUTPUT : T_NAVIGATION_OUTPUT;
   PFS_DTG_IS_FAILED : bool
);
var
   _L4_BASIC_OP : T_PFS_EWM_DTG_MSU;
   _L3_BASIC_OP : T_PFS_EWM_DTG_MSU;
   _L7_BASIC_OP : int;
   _L6_BASIC_OP : int;
   _L5_BASIC_OP : T_PFS_EWM_DTG_MSU_MODE;
   _L8_BASIC_OP : bool;
   _L11_BASIC_OP : T_ANGULAR_RATE;
   _L16_BASIC_OP : int;
let
   _L3_BASIC_OP, _L4_BASIC_OP = (PFS_EWM_DTG12_MSU[0], PFS_EWM_DTG12_MSU[1]);
   _L5_BASIC_OP, _L6_BASIC_OP, _L7_BASIC_OP = (_L3_BASIC_OP[0], _L3_BASIC_OP[1], _L3_BASIC_OP[2]);
   _L8_BASIC_OP = (_L6_BASIC_OP = 0);
   NAVIGATION_OUTPUT = [C_D_QUATERNION, C_D_QUATERNION, [0, 0, 0]];
   _L11_BASIC_OP = [_L16_BASIC_OP, _L16_BASIC_OP, _L16_BASIC_OP];
   _L16_BASIC_OP = (0 -> pre (_L16_BASIC_OP + 1));
   PFS_DTG_IS_FAILED = false;
tel
node B30_PERFORM_FTCP_STATUS_MONIT (
   FTCP_HEALTH_STATUS : T_FTCP_HEALTH_STATUS
) returns (
   FTCP_HEALTH_STATUS_IS_NOT_OK : bool
);
var
   _L18_BASIC_OP : bool;
   _L19_BASIC_OP : bool;
   _L20_BASIC_OP : bool;
   _L42_BASIC_OP : bool;
let
   _L18_BASIC_OP, _L19_BASIC_OP, _L20_BASIC_OP = (FTCP_HEALTH_STATUS[0], FTCP_HEALTH_STATUS[1], FTCP_HEALTH_STATUS[2]);
   _L42_BASIC_OP = not(((_L18_BASIC_OP or _L19_BASIC_OP) or _L20_BASIC_OP));
   FTCP_HEALTH_STATUS_IS_NOT_OK = ((_L42_BASIC_OP and (false -> pre _L42_BASIC_OP)) and (false -> pre (false -> pre _L42_BASIC_OP)));
tel
node B80_MMHS (
   PFS_EWM_MSUY_MSUX_HS : T_PFS_EWM_MSU_MSU_HS;
   DEFAULT_MSU_IS_MASTER : bool
) returns (
   MSU_IS_MASTER : bool
);
var
   _L15_BASIC_OP : bool;
   _L19_BASIC_OP : bool;
   _L20_BASIC_OP : bool;
   _L21_BASIC_OP : bool;
let
   MSU_IS_MASTER = if ((_L15_BASIC_OP or (true -> pre _L15_BASIC_OP))) then ((DEFAULT_MSU_IS_MASTER -> pre MSU_IS_MASTER)) else (true);
   _L15_BASIC_OP = # (not(_L19_BASIC_OP), not(_L20_BASIC_OP), not(_L21_BASIC_OP));
   _L19_BASIC_OP, _L20_BASIC_OP, _L21_BASIC_OP = (PFS_EWM_MSUY_MSUX_HS[0], PFS_EWM_MSUY_MSUX_HS[1], PFS_EWM_MSUY_MSUX_HS[2]);
tel
node B82_EMHS (
   PFS_DTG_IS_FAILED : bool;
   PFS_HLTC_RED_BUTTON_IS_ON : bool;
   PFS_IWM_ARMING_RELAY_STATUS_ON : bool;
   STATE_IS_PFS_M_CAM_PRGS : bool
) returns (
   MSU_HS_IS_OK : bool
);
let
   MSU_HS_IS_OK = (STATE_IS_PFS_M_CAM_PRGS or not(HAS_BEEN_TRUE(((PFS_DTG_IS_FAILED or (PFS_IWM_ARMING_RELAY_STATUS_ON -> false)) or (PFS_HLTC_RED_BUTTON_IS_ON -> false)))));
tel

node PFS_SW__NAVIGATION (
   CAM_MODE : T_CAM_MODE;
   FTCP_HEALTH_STATUS : T_FTCP_HEALTH_STATUS;
   HLTC : T_HLTC;
   MSU_STATE : T_MSU_STATE;
   PFS_EWM_DTG12_MSU : T_PFS_EWM_DTG12_MSU;
   PFS_EWM_MSUY_MSUX_HS : T_PFS_EWM_MSU_MSU_HS;
   PFS_HLTC_RED_BUTTON_IS_ON : bool;
   PFS_IWM_ARMING_RELAY_STATUS_ON : bool;

   MSU_ID : int -- ??? pas en AADL ?? 
) returns (
   CAM_TEST2_IS_ENABLED : bool;
   FTCP_RES_DETECTED : bool;
   HLTM : T_HLTM;
   MSU_HS_IS_OK_OUT : bool;
   MSU_IS_CONFIGURED : bool;
   MSU_IS_MASTER : bool;
   NAVIGATION_OUTPUT : T_NAVIGATION_OUTPUT;
   PDE1_PDE4_CONFIG_IS_SELECTED : bool;
   PFS_EWM_MSUX_MSUY_HS : T_PFS_EWM_MSU_MSU_HS;
   SEQUENCER_CONFIGURATION : T_SEQUENCER_CONFIGURATION;
);
var
   CAM_TEST2_IS_ENABLED_local : bool;
   CAM_TEST2_PRGS : bool;
   FIRST_CONFIG_HAS_BEEN_RECEIVED : bool;
   MSU_HS_IS_OK : bool;
   NEW_CONFIG_IS_AVAILABLE : bool;
   NEW_CONFIG_IS_CONFIRMED : bool;
   PFS_DTG_IS_FAILED : bool;
   PFS_HLTC_DISABLE_CAM_TEST2_ON : bool;
   PFS_HLTC_ENABLE_CAM_TEST2_IS_ON : bool;
   STATE_IS_PFS_M_CAM_INHIB : bool;
   STATE_IS_PFS_M_CAM_PRGS : bool;
   STATE_IS_PFS_M_READY_FOR_CAM : bool;
   STATE_IS_PFS_M_STANDBY : bool;
   _L1288_BASIC_OP : bool;
   _L2312_BASIC_OP : bool;
   _L2307_BASIC_OP : bool;
   _L2306_BASIC_OP : bool;
   _L2346_BASIC_OP : T_PFS_EC_UPDATE_CONF_MSU;
   _L2343_BASIC_OP : bool;
let
   NAVIGATION_OUTPUT, PFS_DTG_IS_FAILED = if (FIRST_CONFIG_HAS_BEEN_RECEIVED) then (current(B20_PROVIDE_ATTITUDE_NAVIG_DATA(((NEW_CONFIG_IS_AVAILABLE, NEW_CONFIG_IS_CONFIRMED, PFS_EWM_DTG12_MSU, CAM_MODE) when FIRST_CONFIG_HAS_BEEN_RECEIVED)))) else (((C_D_NAVIGATION_OUTPUT, false) -> pre((NAVIGATION_OUTPUT, PFS_DTG_IS_FAILED))));
   MSU_HS_IS_OK = B82_EMHS(PFS_DTG_IS_FAILED, PFS_HLTC_RED_BUTTON_IS_ON, PFS_IWM_ARMING_RELAY_STATUS_ON, STATE_IS_PFS_M_CAM_PRGS);
   MSU_HS_IS_OK_OUT = MSU_HS_IS_OK;
   _L1288_BASIC_OP = (MSU_HS_IS_OK and not(STATE_IS_PFS_M_CAM_INHIB));
   PFS_EWM_MSUX_MSUY_HS = [_L1288_BASIC_OP, _L1288_BASIC_OP, _L1288_BASIC_OP];
   CAM_TEST2_IS_ENABLED_local = SWITCH_PRIORITY_OFF(PFS_HLTC_ENABLE_CAM_TEST2_IS_ON, PFS_HLTC_DISABLE_CAM_TEST2_ON, false);
   FTCP_RES_DETECTED = B30_PERFORM_FTCP_STATUS_MONIT(FTCP_HEALTH_STATUS);
   HLTM = [CAM_TEST2_IS_ENABLED_local, (STATE_IS_PFS_M_CAM_PRGS or CAM_TEST2_PRGS), MSU_IS_MASTER, DELAY(NEW_CONFIG_IS_CONFIRMED, C_HLTM_CONFIG_STATUS_DURATION), _L1288_BASIC_OP, FTCP_RES_DETECTED, MSU_STATE];
   MSU_IS_MASTER = B80_MMHS(PFS_EWM_MSUY_MSUX_HS, (MSU_ID = 0));
   CAM_TEST2_IS_ENABLED = CAM_TEST2_IS_ENABLED_local;
   CAM_TEST2_PRGS = (CAM_TEST2_IS_ENABLED_local and PFS_HLTC_RED_BUTTON_IS_ON);
   FIRST_CONFIG_HAS_BEEN_RECEIVED = HAS_BEEN_TRUE(NEW_CONFIG_IS_AVAILABLE);
   MSU_IS_CONFIGURED = (false -> pre HAS_BEEN_TRUE((NEW_CONFIG_IS_CONFIRMED and FIRST_CONFIG_HAS_BEEN_RECEIVED)));
   STATE_IS_PFS_M_STANDBY, STATE_IS_PFS_M_READY_FOR_CAM, STATE_IS_PFS_M_CAM_PRGS, STATE_IS_PFS_M_CAM_INHIB = (MSU_STATE[0], MSU_STATE[1], MSU_STATE[2], MSU_STATE[3]);
   _L2306_BASIC_OP, _L2307_BASIC_OP, SEQUENCER_CONFIGURATION, PDE1_PDE4_CONFIG_IS_SELECTED = if (_L2312_BASIC_OP) then (current(B10_MSTC(((_L2343_BASIC_OP, _L2346_BASIC_OP) when _L2312_BASIC_OP)))) else (((false, false, C_D_SEQUENCER_CONFIGURATION, false) -> pre((_L2306_BASIC_OP, _L2307_BASIC_OP, SEQUENCER_CONFIGURATION, PDE1_PDE4_CONFIG_IS_SELECTED))));
   _L2312_BASIC_OP = (STATE_IS_PFS_M_STANDBY or STATE_IS_PFS_M_READY_FOR_CAM);
   NEW_CONFIG_IS_CONFIRMED = (_L2312_BASIC_OP and _L2307_BASIC_OP);
   NEW_CONFIG_IS_AVAILABLE = (_L2312_BASIC_OP and _L2306_BASIC_OP);
   _L2343_BASIC_OP, _L2346_BASIC_OP, PFS_HLTC_ENABLE_CAM_TEST2_IS_ON, PFS_HLTC_DISABLE_CAM_TEST2_ON = (HLTC[0], HLTC[1], HLTC[2], HLTC[3]);
tel
node DELAY (
   START : bool;
   DELAY : int
) returns (
   ACTIV : bool
);
var
   _L3_BASIC_OP : int;
   _L4_BASIC_OP : int;
let
   _L3_BASIC_OP = if (START) then (DELAY) else (if ((_L4_BASIC_OP > 0)) then ((_L4_BASIC_OP - 1)) else (0));
   _L4_BASIC_OP = (0 -> pre _L3_BASIC_OP);
   ACTIV = (_L3_BASIC_OP > 0);
tel
node HAS_BEEN_TRUE (
   ARG : bool
) returns (
   RES : bool
);
let
   RES = (ARG or (false -> pre RES));
tel
node MEMORY_CONFIGURATION_TABLE (
   NEW_CONFIGURATION_TABLE : T_CONFIGURATION_TABLE;
   UPDATE : bool
) returns (
   CURRENT_CONFIGURATION_TABLE : T_CONFIGURATION_TABLE
);
let
   CURRENT_CONFIGURATION_TABLE = if (UPDATE) then (NEW_CONFIGURATION_TABLE) else ((C_D_CONFIGURATION_TABLE -> pre CURRENT_CONFIGURATION_TABLE));
tel
node PRECONDITION (
   TC : bool;
   RECEIVED_HLTC : bool
) returns (
   CONFIRMED_HLTC : bool
);
var
   _L4_BASIC_OP : bool;
   _L7_BASIC_OP : bool;
let
   _L4_BASIC_OP = not(RECEIVED_HLTC);
   _L7_BASIC_OP = (false -> pre ((TC and _L4_BASIC_OP) or (_L4_BASIC_OP and _L7_BASIC_OP)));
   CONFIRMED_HLTC = TRUE_AFTER_FALSE((RECEIVED_HLTC and _L7_BASIC_OP));
tel
node SWITCH_PRIORITY_OFF (
   CMD_ON : bool;
   CMD_OFF : bool;
   DEFAULT_STATUS : bool
) returns (
   STATUS : bool
);
let
   STATUS = if (CMD_OFF) then (false) else (if (CMD_ON) then (true) else ((DEFAULT_STATUS -> pre STATUS)));
tel
node TRUE_AFTER_FALSE (
   ARG : bool
) returns (
   RES : bool
);
let
   RES = (ARG and not((false -> pre ARG)));
tel


-----include "AUTOMATON.lus"  

-- include "../pfs_types.lus"
-- include "../pfs_const.lus"
-- include "DOWNSTREAM.lus"

node PFS_SW__AUTOMATON (
   CAM_TEST2_IS_ENABLED : bool;
   END_BOOST_IS_REACHED : bool;
   FTCP_HEALTH_STATUS_IS_NOT_OK : bool;
   MSU_HS_IS_OK : bool;
   MSU_IS_CONFIGURED : bool;
   MSU_IS_MASTER : bool;
   PFS_HLTC_RED_BUTTON_IS_ON : bool;
   PFS_IWM_ARMING_RELAY_STATUS_ON : bool;
   SEQUENCER_CONFIGURATION : T_SEQUENCER_CONFIGURATION;
   SUN_IS_AIMED : bool;
) returns (
   CAM_MODE : T_CAM_MODE;
   CONTROLLER_TO_BE_ACTIVATED : bool;
   DPU_CMD : T_DPU_CMD;
   ENABLE_CONTROLLER : bool;
   MSU_STATE : T_MSU_STATE;
   PDE_CMD_A : T_PDE_CMD_A;
   SET_PFS_EWC_MSU_DTG_MODE_COARSE : T_ON_OFF_CMD;
   STATE_IS_PFS_M_CAM_PRGS : bool;
);
var
   CAM_BOOST_ONLY_IS_REQUESTED : bool;
   CAM_DURATION : int;
   CAM_PDE_CMD1_IS_UNSELECTED : bool;
   CAM_PDE_CMD_IS_SELECTED : bool;
   CAM_TRIG_CMD1_IS_ON : bool;
   CAM_TRIG_CMD2_PDE1_IS_ON : bool;
   CAM_TRIG_CMD2_PDE2_IS_ON : bool;
   CAM_TRIG_CMD2_PDE3_IS_ON : bool;
   CAM_TRIG_CMD2_PDE4_IS_ON : bool;
   DPU_RESET_IS_REQUESTED : bool;
   END_SEQUENCE_IS_REACHED : bool;
   HALT_MODE_IS_REQUESTED : bool;
   PDE1_IS_AVAILABLE : bool;
   PDE1_IS_SELECTED : bool;
   PDE2_IS_AVAILABLE : bool;
   PDE2_IS_SELECTED : bool;
   PDE3_IS_AVAILABLE : bool;
   PDE3_IS_SELECTED : bool;
   PDE4_IS_AVAILABLE : bool;
   PDE4_IS_SELECTED : bool;
   PFS_EWC_MSU_PDE_CMD1 : T_CAM_CMD;
   PFS_EWC_MSU_PDE_CMD2 : T_CAM_CMD;
   _L2073_AUTOMATON : bool;
   _L2239_AUTOMATON : bool;
   _L2238_AUTOMATON : bool;
   _L2237_AUTOMATON : bool;
   _L2228_AUTOMATON : bool;
   _L2226_AUTOMATON : bool;
   _L2225_AUTOMATON : bool;
   _L2223_AUTOMATON : bool;
   _L2222_AUTOMATON : bool;
let
   SET_PFS_EWC_MSU_DTG_MODE_COARSE = [_L2228_AUTOMATON, END_SEQUENCE_IS_REACHED];
   CAM_MODE = [_L2237_AUTOMATON, _L2238_AUTOMATON, _L2239_AUTOMATON];
   _L2222_AUTOMATON, _L2223_AUTOMATON, STATE_IS_PFS_M_CAM_PRGS, _L2225_AUTOMATON, _L2226_AUTOMATON, END_SEQUENCE_IS_REACHED, _L2228_AUTOMATON, CAM_TRIG_CMD1_IS_ON, CAM_TRIG_CMD2_PDE1_IS_ON, CAM_TRIG_CMD2_PDE2_IS_ON, CAM_TRIG_CMD2_PDE3_IS_ON, CAM_TRIG_CMD2_PDE4_IS_ON, ENABLE_CONTROLLER, CAM_PDE_CMD1_IS_UNSELECTED, CAM_PDE_CMD_IS_SELECTED, _L2237_AUTOMATON, _L2238_AUTOMATON, _L2239_AUTOMATON = B01_MSU_SSM((FTCP_HEALTH_STATUS_IS_NOT_OK or PFS_IWM_ARMING_RELAY_STATUS_ON), PFS_HLTC_RED_BUTTON_IS_ON, CAM_TEST2_IS_ENABLED, MSU_IS_MASTER, MSU_HS_IS_OK, HALT_MODE_IS_REQUESTED, MSU_IS_CONFIGURED, CAM_DURATION, END_BOOST_IS_REACHED, CAM_BOOST_ONLY_IS_REQUESTED, SUN_IS_AIMED);
   MSU_STATE = [_L2222_AUTOMATON, _L2223_AUTOMATON, STATE_IS_PFS_M_CAM_PRGS, _L2225_AUTOMATON];
   DPU_CMD = [ON_OFF_CMD(((DPU_RESET_IS_REQUESTED and not(FTCP_HEALTH_STATUS_IS_NOT_OK)) and _L2226_AUTOMATON), C_1_S), [_L2226_AUTOMATON, END_SEQUENCE_IS_REACHED]];
   CONTROLLER_TO_BE_ACTIVATED = (ENABLE_CONTROLLER and PERIOD_5(__DUMMY_VAL__));
   PFS_EWC_MSU_PDE_CMD1 = [ON_OFF_CMD(if (PDE1_IS_SELECTED) then (CAM_PDE_CMD_IS_SELECTED) else (CAM_PDE_CMD1_IS_UNSELECTED), C_2_S), ON_OFF_CMD(if (PDE2_IS_SELECTED) then (CAM_PDE_CMD_IS_SELECTED) else (CAM_PDE_CMD1_IS_UNSELECTED), C_2_S), ON_OFF_CMD(if (PDE3_IS_SELECTED) then (CAM_PDE_CMD_IS_SELECTED) else (CAM_PDE_CMD1_IS_UNSELECTED), C_2_S), ON_OFF_CMD(if (PDE4_IS_SELECTED) then (CAM_PDE_CMD_IS_SELECTED) else (CAM_PDE_CMD1_IS_UNSELECTED), C_2_S)];
   PFS_EWC_MSU_PDE_CMD2 = [ON_OFF_CMD((PDE1_IS_SELECTED and CAM_PDE_CMD_IS_SELECTED), C_2_S), ON_OFF_CMD((PDE2_IS_SELECTED and CAM_PDE_CMD_IS_SELECTED), C_2_S), ON_OFF_CMD((PDE3_IS_SELECTED and CAM_PDE_CMD_IS_SELECTED), C_2_S), ON_OFF_CMD((PDE4_IS_SELECTED and CAM_PDE_CMD_IS_SELECTED), C_2_S)];
   PDE_CMD_A = [[CAM_TRIG_CMD1_IS_ON, END_SEQUENCE_IS_REACHED], [[(CAM_TRIG_CMD2_PDE1_IS_ON and PDE1_IS_AVAILABLE), (END_SEQUENCE_IS_REACHED and PDE1_IS_AVAILABLE)], [(CAM_TRIG_CMD2_PDE2_IS_ON and PDE2_IS_AVAILABLE), (END_SEQUENCE_IS_REACHED and PDE2_IS_AVAILABLE)], [(CAM_TRIG_CMD2_PDE3_IS_ON and PDE3_IS_AVAILABLE), (END_SEQUENCE_IS_REACHED and PDE3_IS_AVAILABLE)], [(CAM_TRIG_CMD2_PDE4_IS_ON and PDE4_IS_AVAILABLE), (END_SEQUENCE_IS_REACHED and PDE4_IS_AVAILABLE)]], PFS_EWC_MSU_PDE_CMD1, PFS_EWC_MSU_PDE_CMD2];
   _L2073_AUTOMATON, PDE1_IS_AVAILABLE, PDE2_IS_AVAILABLE, PDE3_IS_AVAILABLE, PDE4_IS_AVAILABLE, DPU_RESET_IS_REQUESTED, CAM_DURATION, CAM_BOOST_ONLY_IS_REQUESTED, HALT_MODE_IS_REQUESTED = (SEQUENCER_CONFIGURATION[0], SEQUENCER_CONFIGURATION[1], SEQUENCER_CONFIGURATION[2], SEQUENCER_CONFIGURATION[3], SEQUENCER_CONFIGURATION[4], SEQUENCER_CONFIGURATION[5], SEQUENCER_CONFIGURATION[6], SEQUENCER_CONFIGURATION[7], SEQUENCER_CONFIGURATION[8]);
   PDE2_IS_SELECTED = not(_L2073_AUTOMATON);
   PDE1_IS_SELECTED = PDE2_IS_SELECTED;
   PDE3_IS_SELECTED = PDE2_IS_SELECTED;
   PDE4_IS_SELECTED = PDE2_IS_SELECTED;
tel
node B01_MSU_SSM (
   PFS_IWM_ARMING_RELAY_STATUS_ON : bool;
   PFS_HLTC_RED_BUTTON_IS_ON : bool;
   CAM_TEST2_IS_ENABLED : bool;
   MSU_IS_MASTER : bool;
   MSU_HS_IS_OK : bool;
   HALT_MODE_IS_REQUESTED : bool;
   MSU_IS_CONFIGURED : bool;
   CAM_DURATION : int;
   END_BOOST_IS_REACHED : bool;
   CAM_BOOST_ONLY_IS_REQUESTED : bool;
   SUN_IS_AIMED : bool
) returns (
   STATE_IS_PFS_M_STDBY : bool;
   STATE_IS_PFS_M_READY_FOR_CAM : bool;
   STATE_IS_PFS_M_CAM_PRGS : bool;
   STATE_IS_PFS_M_CAM_INHIB : bool;
   DPU_CAM_ON : bool;
   END_SEQUENCE_IS_REACHED : bool;
   DTG_MODE_COARSE_ON : bool;
   CAM_TRIG_CMD1_IS_ON : bool;
   CAM_TRIG_CMD2_PDE1_IS_ON : bool;
   CAM_TRIG_CMD2_PDE2_IS_ON : bool;
   CAM_TRIG_CMD2_PDE3_IS_ON : bool;
   CAM_TRIG_CMD2_PDE4_IS_ON : bool;
   ENABLE_CONTROLLER : bool;
   CAM_PDE_CMD1_IS_UNSELECTED : bool;
   CAM_PDE_CMD_IS_SELECTED : bool;
   IS_IN_CAM : bool;
   IS_IN_SA : bool;
   IS_IN_SP : bool
);
var
   _LE28_AUTOMATON : bool;
   _LE31_AUTOMATON : bool;
   _LE32_AUTOMATON : bool;
   _LE33_AUTOMATON : bool;
   _LE34_AUTOMATON : bool;
   _LE35_AUTOMATON : bool;
   _LE36_AUTOMATON : bool;
   _LE37_AUTOMATON : bool;
   _LE38_AUTOMATON : bool;
   _LE39_AUTOMATON : bool;
   _LE40_AUTOMATON : bool;
   _LE41_AUTOMATON : bool;
   _LE42_AUTOMATON : bool;
   _LE44_AUTOMATON : bool;
   _LE45_AUTOMATON : bool;
   _LE46_AUTOMATON : bool;
   _LE47_AUTOMATON : bool;
   _LE50_AUTOMATON : bool;
   _LE51_AUTOMATON : bool;
   _LE52_AUTOMATON : bool;
   _LE53_AUTOMATON : bool;
   _LE54_AUTOMATON : bool;
   _LE56_AUTOMATON : bool;
   _LE57_AUTOMATON : bool;
   _LE58_AUTOMATON : bool;
   _LE61_AUTOMATON : bool;
   _LE63_AUTOMATON : bool;
   _LE64_AUTOMATON : bool;
   _LE65_AUTOMATON : bool;
   _LE71_AUTOMATON : bool;
   _LE73_AUTOMATON : bool;
   _LE74_AUTOMATON : bool;
   _LE76_AUTOMATON : bool;
   _LE79_AUTOMATON : bool;
   _LE83_AUTOMATON : bool;
   _LE87_AUTOMATON : bool;
   _LE91_AUTOMATON : bool;
   _LE95_AUTOMATON : bool;
   _LE99_AUTOMATON : bool;
   _LE103_AUTOMATON : bool;
   _LE104_AUTOMATON : bool;
   _LE105_AUTOMATON : bool;
   _LE106_AUTOMATON : bool;
   _LE107_AUTOMATON : bool;
   _LE108_AUTOMATON : bool;
   _LE109_AUTOMATON : bool;
   _LE110_AUTOMATON : bool;
   _LE111_AUTOMATON : bool;
   _LE112_AUTOMATON : bool;
   _LE113_AUTOMATON : bool;
   _LE114_AUTOMATON : bool;
   _LE115_AUTOMATON : bool;
   _LE116_AUTOMATON : bool;
   _LE117_AUTOMATON : bool;
   _LE118_AUTOMATON : bool;
   _LE119_AUTOMATON : bool;
   _LE120_AUTOMATON : bool;
   _LE121_AUTOMATON : bool;
   _LE124_AUTOMATON : bool;
   _LE125_AUTOMATON : bool;
   _LE126_AUTOMATON : bool;
   _LE131_AUTOMATON : bool;
   _LE132_AUTOMATON : bool;
   _LE138_AUTOMATON : bool;
   _LE147_AUTOMATON : bool;
   _LE150_AUTOMATON : bool;
   _LE155_AUTOMATON : bool;
   _LE164_AUTOMATON : bool;
   _LE165_AUTOMATON : bool;
   _LE166_AUTOMATON : bool;
   _LE168_AUTOMATON : bool;
   _LE169_AUTOMATON : bool;
   _LE170_AUTOMATON : bool;
   _LE178_AUTOMATON : bool;
   _LE179_AUTOMATON : bool;
   _LE187_AUTOMATON : bool;
   _LE189_AUTOMATON : bool;
   _LE192_AUTOMATON : bool;
   _LE194_AUTOMATON : bool;
   _LE196_AUTOMATON : bool;
   _LE198_AUTOMATON : bool;
   _LE200_AUTOMATON : bool;
   _LE202_AUTOMATON : bool;
   _LE204_AUTOMATON : bool;
   _LE207_AUTOMATON : bool;
   _LE212_AUTOMATON : bool;
   _LE218_AUTOMATON : bool;
   _LE220_AUTOMATON : bool;
   _LE221_AUTOMATON : bool;
   _LE222_AUTOMATON : bool;
   _LE223_AUTOMATON : bool;
   _LE224_AUTOMATON : bool;
   _LE226_AUTOMATON : bool;
   _LE227_AUTOMATON : bool;
   _LE228_AUTOMATON : bool;
   _LE229_AUTOMATON : bool;
   _LE230_AUTOMATON : bool;
   _LE231_AUTOMATON : bool;
   _LE232_AUTOMATON : bool;
   _LE233_AUTOMATON : bool;
   _LE236_AUTOMATON : bool;
   _LE238_AUTOMATON : bool;
   _LVF1_AUTOMATON : int;
   _LE241_AUTOMATON : bool;
   _LVF4_AUTOMATON : int;
   _LE242_AUTOMATON : bool;
   _LVF7_AUTOMATON : int;
   _LVF9_AUTOMATON : int;
   _LE243_AUTOMATON : bool;
   _LE244_AUTOMATON : bool;
   _LE245_AUTOMATON : bool;
   _LE246_AUTOMATON : bool;
   _LE247_AUTOMATON : bool;
   _LE248_AUTOMATON : bool;
   _LE249_AUTOMATON : bool;
   _LE250_AUTOMATON : bool;
   _LVF19_AUTOMATON : int;
   _LVF21_AUTOMATON : int;
   _LVF35_AUTOMATON : int;
   _LVF37_AUTOMATON : int;
let
   _LE31_AUTOMATON = (_LE218_AUTOMATON and not(_LE28_AUTOMATON));
   _LE32_AUTOMATON = (_LE241_AUTOMATON and _LE31_AUTOMATON);
   _LE33_AUTOMATON = (_LE32_AUTOMATON and not(MSU_IS_MASTER));
   _LE34_AUTOMATON = (_LE32_AUTOMATON and MSU_IS_MASTER);
   _LE35_AUTOMATON = (_LE236_AUTOMATON and not(_LE28_AUTOMATON));
   _LE36_AUTOMATON = (_LE35_AUTOMATON and MSU_HS_IS_OK);
   _LE37_AUTOMATON = (_LE36_AUTOMATON and PFS_IWM_ARMING_RELAY_STATUS_ON);
   _LE38_AUTOMATON = (PFS_HLTC_RED_BUTTON_IS_ON and not(CAM_TEST2_IS_ENABLED));
   _LE39_AUTOMATON = (_LE37_AUTOMATON and _LE38_AUTOMATON);
   _LE40_AUTOMATON = (_LE39_AUTOMATON and MSU_IS_MASTER);
   _LE41_AUTOMATON = ((_LE33_AUTOMATON or _LE34_AUTOMATON) or _LE40_AUTOMATON);
   _LE42_AUTOMATON = (_LE34_AUTOMATON or _LE40_AUTOMATON);
   _LE44_AUTOMATON = (_LE238_AUTOMATON and not(_LE28_AUTOMATON));
   _LE45_AUTOMATON = (HALT_MODE_IS_REQUESTED or not(MSU_HS_IS_OK));
   _LE46_AUTOMATON = (_LE44_AUTOMATON and _LE45_AUTOMATON);
   _LE47_AUTOMATON = (_LE35_AUTOMATON and not(MSU_HS_IS_OK));
   _LE50_AUTOMATON = (((_LE222_AUTOMATON or _LE223_AUTOMATON) or _LE224_AUTOMATON) or _LE226_AUTOMATON);
   _LE51_AUTOMATON = ((((((((_LE221_AUTOMATON or _LE50_AUTOMATON) or _LE227_AUTOMATON) or _LE228_AUTOMATON) or _LE229_AUTOMATON) or _LE230_AUTOMATON) or _LE231_AUTOMATON) or _LE232_AUTOMATON) or _LE233_AUTOMATON);
   _LE52_AUTOMATON = (_LE220_AUTOMATON or _LE51_AUTOMATON);
   _LE53_AUTOMATON = (_LE52_AUTOMATON and not(_LE28_AUTOMATON));
   _LE54_AUTOMATON = not(_LE28_AUTOMATON);
   _LE56_AUTOMATON = (_LE220_AUTOMATON and _LE54_AUTOMATON);
   _LE57_AUTOMATON = (_LE242_AUTOMATON and _LE56_AUTOMATON);
   _LE58_AUTOMATON = (_LE227_AUTOMATON and _LE54_AUTOMATON);
   _LE61_AUTOMATON = (((_LE52_AUTOMATON and not(_LE220_AUTOMATON)) and _LE54_AUTOMATON) or _LE57_AUTOMATON);
   _LE63_AUTOMATON = (((_LE52_AUTOMATON and not(_LE51_AUTOMATON)) and _LE54_AUTOMATON) or _LE58_AUTOMATON);
   _LE64_AUTOMATON = (((_LE57_AUTOMATON or _LE58_AUTOMATON) and _LE61_AUTOMATON) and _LE63_AUTOMATON);
   _LE65_AUTOMATON = (_LE41_AUTOMATON and _LE42_AUTOMATON);
   DPU_CAM_ON = ((_LE65_AUTOMATON and not(_LE32_AUTOMATON)) or ((false -> pre((_LE65_AUTOMATON and _LE32_AUTOMATON))) and not(_LE28_AUTOMATON)));
   _LE207_AUTOMATON = (not(_LE242_AUTOMATON) and _LE56_AUTOMATON);
   _LE71_AUTOMATON = (DPU_CAM_ON or _LE207_AUTOMATON);
   _LE73_AUTOMATON = (_LE221_AUTOMATON and _LE54_AUTOMATON);
   _LE74_AUTOMATON = (_LE243_AUTOMATON and _LE73_AUTOMATON);
   _LE192_AUTOMATON = (not(_LE243_AUTOMATON) and _LE73_AUTOMATON);
   _LE76_AUTOMATON = (_LE74_AUTOMATON or _LE192_AUTOMATON);
   _LE79_AUTOMATON = (_LE228_AUTOMATON and _LE54_AUTOMATON);
   CAM_PDE_CMD_IS_SELECTED = (_LE244_AUTOMATON and _LE79_AUTOMATON);
   _LE194_AUTOMATON = (not(_LE244_AUTOMATON) and _LE79_AUTOMATON);
   _LE83_AUTOMATON = (_LE229_AUTOMATON and _LE54_AUTOMATON);
   CAM_PDE_CMD1_IS_UNSELECTED = (_LE245_AUTOMATON and _LE83_AUTOMATON);
   _LE196_AUTOMATON = (not(_LE245_AUTOMATON) and _LE83_AUTOMATON);
   _LE87_AUTOMATON = (_LE230_AUTOMATON and _LE54_AUTOMATON);
   CAM_TRIG_CMD2_PDE4_IS_ON = (_LE246_AUTOMATON and _LE87_AUTOMATON);
   _LE198_AUTOMATON = (not(_LE246_AUTOMATON) and _LE87_AUTOMATON);
   _LE91_AUTOMATON = (_LE231_AUTOMATON and _LE54_AUTOMATON);
   CAM_TRIG_CMD2_PDE3_IS_ON = (_LE247_AUTOMATON and _LE91_AUTOMATON);
   _LE200_AUTOMATON = (not(_LE247_AUTOMATON) and _LE91_AUTOMATON);
   _LE95_AUTOMATON = (_LE232_AUTOMATON and _LE54_AUTOMATON);
   CAM_TRIG_CMD2_PDE2_IS_ON = (_LE248_AUTOMATON and _LE95_AUTOMATON);
   _LE202_AUTOMATON = (not(_LE248_AUTOMATON) and _LE95_AUTOMATON);
   _LE99_AUTOMATON = (_LE233_AUTOMATON and _LE54_AUTOMATON);
   CAM_TRIG_CMD2_PDE1_IS_ON = (_LE249_AUTOMATON and _LE99_AUTOMATON);
   _LE204_AUTOMATON = (not(_LE249_AUTOMATON) and _LE99_AUTOMATON);
   _LE103_AUTOMATON = (DPU_CAM_ON or (((((((((((((_LE76_AUTOMATON and not(_LE74_AUTOMATON)) or CAM_PDE_CMD_IS_SELECTED) or _LE194_AUTOMATON) or CAM_PDE_CMD1_IS_UNSELECTED) or _LE196_AUTOMATON) or CAM_TRIG_CMD2_PDE4_IS_ON) or _LE198_AUTOMATON) or CAM_TRIG_CMD2_PDE3_IS_ON) or _LE200_AUTOMATON) or CAM_TRIG_CMD2_PDE2_IS_ON) or _LE202_AUTOMATON) or CAM_TRIG_CMD2_PDE1_IS_ON) or _LE204_AUTOMATON));
   _LE104_AUTOMATON = (_LE192_AUTOMATON or CAM_PDE_CMD_IS_SELECTED);
   _LE105_AUTOMATON = (_LE103_AUTOMATON and _LE104_AUTOMATON);
   _LE106_AUTOMATON = (_LE103_AUTOMATON and not(_LE104_AUTOMATON));
   _LE107_AUTOMATON = (_LE194_AUTOMATON or CAM_PDE_CMD1_IS_UNSELECTED);
   _LE108_AUTOMATON = (_LE106_AUTOMATON and _LE107_AUTOMATON);
   _LE109_AUTOMATON = (_LE106_AUTOMATON and not(_LE107_AUTOMATON));
   _LE110_AUTOMATON = (_LE196_AUTOMATON or CAM_TRIG_CMD2_PDE4_IS_ON);
   _LE111_AUTOMATON = (_LE109_AUTOMATON and _LE110_AUTOMATON);
   _LE112_AUTOMATON = (_LE109_AUTOMATON and not(_LE110_AUTOMATON));
   _LE113_AUTOMATON = (_LE198_AUTOMATON or CAM_TRIG_CMD2_PDE3_IS_ON);
   _LE114_AUTOMATON = (_LE112_AUTOMATON and _LE113_AUTOMATON);
   _LE115_AUTOMATON = (_LE112_AUTOMATON and not(_LE113_AUTOMATON));
   _LE116_AUTOMATON = (_LE200_AUTOMATON or CAM_TRIG_CMD2_PDE2_IS_ON);
   _LE117_AUTOMATON = (_LE115_AUTOMATON and _LE116_AUTOMATON);
   _LE118_AUTOMATON = (_LE115_AUTOMATON and not(_LE116_AUTOMATON));
   _LE119_AUTOMATON = (_LE202_AUTOMATON or CAM_TRIG_CMD2_PDE1_IS_ON);
   _LE120_AUTOMATON = (_LE118_AUTOMATON and _LE119_AUTOMATON);
   _LE121_AUTOMATON = (_LE118_AUTOMATON and not(_LE119_AUTOMATON));
   _LE124_AUTOMATON = (_LE50_AUTOMATON and _LE54_AUTOMATON);
   _LE125_AUTOMATON = (not(_LE250_AUTOMATON) and _LE124_AUTOMATON);
   _LE126_AUTOMATON = (_LE223_AUTOMATON and _LE125_AUTOMATON);
   IS_IN_SP = ((_LE126_AUTOMATON and SUN_IS_AIMED) or (_LE222_AUTOMATON and _LE125_AUTOMATON));
   _LE131_AUTOMATON = (_LE224_AUTOMATON and _LE125_AUTOMATON);
   _LE132_AUTOMATON = (_LE131_AUTOMATON and END_BOOST_IS_REACHED);
   IS_IN_SA = ((_LE132_AUTOMATON and not(CAM_BOOST_ONLY_IS_REQUESTED)) or ((_LE126_AUTOMATON and not(SUN_IS_AIMED)) and _LE223_AUTOMATON));
   _LE138_AUTOMATON = (_LE76_AUTOMATON and _LE74_AUTOMATON);
   IS_IN_CAM = (_LE138_AUTOMATON or ((_LE131_AUTOMATON and not(END_BOOST_IS_REACHED)) and _LE224_AUTOMATON));
   ENABLE_CONTROLLER = (_LE138_AUTOMATON or (_LE226_AUTOMATON and _LE125_AUTOMATON));
   _LE147_AUTOMATON = ((IS_IN_SP or IS_IN_SA) or IS_IN_CAM);
   _LE150_AUTOMATON = (_LE132_AUTOMATON and CAM_BOOST_ONLY_IS_REQUESTED);
   END_SEQUENCE_IS_REACHED = ((_LE250_AUTOMATON and _LE124_AUTOMATON) or (((_LE147_AUTOMATON or _LE150_AUTOMATON) and _LE150_AUTOMATON) and ENABLE_CONTROLLER));
   _LE155_AUTOMATON = (((((((_LE105_AUTOMATON or _LE108_AUTOMATON) or _LE111_AUTOMATON) or _LE114_AUTOMATON) or _LE117_AUTOMATON) or _LE120_AUTOMATON) or _LE121_AUTOMATON) or ((((((IS_IN_SP or IS_IN_SA) or IS_IN_CAM) or ENABLE_CONTROLLER) and _LE147_AUTOMATON) and ENABLE_CONTROLLER) or END_SEQUENCE_IS_REACHED));
   STATE_IS_PFS_M_CAM_PRGS = (DPU_CAM_ON or ((false -> pre((STATE_IS_PFS_M_CAM_PRGS and not(_LE64_AUTOMATON)))) and not(_LE28_AUTOMATON)));
   _LE164_AUTOMATON = (((_LE64_AUTOMATON or (((_LE71_AUTOMATON or _LE155_AUTOMATON) and (_LE61_AUTOMATON or _LE71_AUTOMATON)) and (_LE63_AUTOMATON or _LE155_AUTOMATON))) and _LE64_AUTOMATON) and STATE_IS_PFS_M_CAM_PRGS);
   _LE165_AUTOMATON = (((((_LE41_AUTOMATON and not(_LE42_AUTOMATON)) or _LE46_AUTOMATON) or _LE47_AUTOMATON) or (_LE36_AUTOMATON and not(PFS_IWM_ARMING_RELAY_STATUS_ON))) or _LE164_AUTOMATON);
   _LE166_AUTOMATON = (((_LE46_AUTOMATON or _LE47_AUTOMATON) or _LE33_AUTOMATON) or _LE164_AUTOMATON);
   _LE168_AUTOMATON = (_LE28_AUTOMATON or (_LE165_AUTOMATON and not(_LE166_AUTOMATON)));
   _LE169_AUTOMATON = (_LE44_AUTOMATON and not(_LE45_AUTOMATON));
   _LE170_AUTOMATON = (PFS_IWM_ARMING_RELAY_STATUS_ON and MSU_IS_CONFIGURED);
   _LE212_AUTOMATON = ((_LE169_AUTOMATON and not(_LE170_AUTOMATON)) and _LE238_AUTOMATON);
   STATE_IS_PFS_M_STDBY = (_LE168_AUTOMATON or _LE212_AUTOMATON);
   STATE_IS_PFS_M_READY_FOR_CAM = ((_LE169_AUTOMATON and _LE170_AUTOMATON) or ((_LE37_AUTOMATON and not(_LE38_AUTOMATON)) and _LE236_AUTOMATON));
   _LE178_AUTOMATON = (_LE165_AUTOMATON and _LE166_AUTOMATON);
   _LE179_AUTOMATON = (_LE32_AUTOMATON or _LE164_AUTOMATON);
   STATE_IS_PFS_M_CAM_INHIB = (((_LE178_AUTOMATON and not(_LE179_AUTOMATON)) or ((false -> pre((_LE178_AUTOMATON and _LE179_AUTOMATON))) and not(_LE28_AUTOMATON))) or ((false -> pre(STATE_IS_PFS_M_CAM_INHIB)) and not(_LE28_AUTOMATON)));
   DTG_MODE_COARSE_ON = DPU_CAM_ON;
   CAM_TRIG_CMD1_IS_ON = DPU_CAM_ON;
   _LE187_AUTOMATON = (_LE39_AUTOMATON and not(MSU_IS_MASTER));
   _LE189_AUTOMATON = (not(_LE241_AUTOMATON) and _LE31_AUTOMATON);
   _LE28_AUTOMATON = (true -> pre(false));
   _LE218_AUTOMATON = (false -> pre((_LE187_AUTOMATON or _LE189_AUTOMATON)));
   _LE220_AUTOMATON = (false -> pre(_LE71_AUTOMATON));
   _LE221_AUTOMATON = (false -> pre(_LE105_AUTOMATON));
   _LE222_AUTOMATON = (false -> pre(IS_IN_SP));
   _LE223_AUTOMATON = (false -> pre(IS_IN_SA));
   _LE224_AUTOMATON = (false -> pre(IS_IN_CAM));
   _LE226_AUTOMATON = (false -> pre((ENABLE_CONTROLLER and not(_LE150_AUTOMATON))));
   _LE227_AUTOMATON = (false -> pre(END_SEQUENCE_IS_REACHED));
   _LE228_AUTOMATON = (false -> pre(_LE108_AUTOMATON));
   _LE229_AUTOMATON = (false -> pre(_LE111_AUTOMATON));
   _LE230_AUTOMATON = (false -> pre(_LE114_AUTOMATON));
   _LE231_AUTOMATON = (false -> pre(_LE117_AUTOMATON));
   _LE232_AUTOMATON = (false -> pre(_LE120_AUTOMATON));
   _LE233_AUTOMATON = (false -> pre(_LE121_AUTOMATON));
   _LE236_AUTOMATON = (false -> pre(STATE_IS_PFS_M_READY_FOR_CAM));
   _LE238_AUTOMATON = (false -> pre((_LE168_AUTOMATON or _LE212_AUTOMATON)));
   _LVF1_AUTOMATON = if ((_LE218_AUTOMATON and not(_LE28_AUTOMATON))) then ((0 -> pre(_LVF21_AUTOMATON))) else ((0 -> pre(_LVF19_AUTOMATON)));
   _LE241_AUTOMATON = if (_LE31_AUTOMATON) then ((_LVF1_AUTOMATON >= C_CAM_IN_WAITING_DELAY)) else (false);
   _LVF4_AUTOMATON = if (_LE53_AUTOMATON) then ((0 -> pre(_LVF37_AUTOMATON))) else ((0 -> pre(_LVF9_AUTOMATON)));
   _LE242_AUTOMATON = if (_LE56_AUTOMATON) then ((_LVF4_AUTOMATON >= CAM_DURATION)) else (false);
   _LVF7_AUTOMATON = if (DPU_CAM_ON) then (0) else (if (_LE53_AUTOMATON) then ((0 -> pre(_LVF35_AUTOMATON))) else ((0 -> pre(_LVF7_AUTOMATON))));
   _LVF9_AUTOMATON = if (DPU_CAM_ON) then (0) else (_LVF4_AUTOMATON);
   _LE243_AUTOMATON = if (_LE73_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_9_DURATION)) else (false);
   _LE244_AUTOMATON = if (_LE79_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_8_DURATION)) else (false);
   _LE245_AUTOMATON = if (_LE83_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_7_DURATION)) else (false);
   _LE246_AUTOMATON = if (_LE87_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_6D_DURATION)) else (false);
   _LE247_AUTOMATON = if (_LE91_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_6C_DURATION)) else (false);
   _LE248_AUTOMATON = if (_LE95_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_6B_DURATION)) else (false);
   _LE249_AUTOMATON = if (_LE99_AUTOMATON) then ((_LVF7_AUTOMATON >= C_SEQ_STEP_6A_DURATION)) else (false);
   _LE250_AUTOMATON = if (_LE124_AUTOMATON) then ((_LVF9_AUTOMATON >= CAM_DURATION)) else (false);
   _LVF19_AUTOMATON = if (_LE187_AUTOMATON) then (0) else (_LVF1_AUTOMATON);
   _LVF21_AUTOMATON = if (_LE189_AUTOMATON) then ((_LVF19_AUTOMATON + 1)) else (if (_LE187_AUTOMATON) then (1) else (if (_LE187_AUTOMATON) then (0) else ((0 -> pre(_LVF21_AUTOMATON)))));
   _LVF35_AUTOMATON = if (_LE204_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (CAM_TRIG_CMD2_PDE1_IS_ON) then (1) else (if (_LE202_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (CAM_TRIG_CMD2_PDE2_IS_ON) then (1) else (if (_LE200_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (CAM_TRIG_CMD2_PDE3_IS_ON) then (1) else (if (_LE198_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (CAM_TRIG_CMD2_PDE4_IS_ON) then (1) else (if (_LE196_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (CAM_PDE_CMD1_IS_UNSELECTED) then (1) else (if (_LE194_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (CAM_PDE_CMD_IS_SELECTED) then (1) else (if (_LE192_AUTOMATON) then ((_LVF7_AUTOMATON + 1)) else (if (DPU_CAM_ON) then (1) else (if (DPU_CAM_ON) then (0) else ((0 -> pre(_LVF35_AUTOMATON)))))))))))))))));
   _LVF37_AUTOMATON = if (_LE207_AUTOMATON) then ((_LVF9_AUTOMATON + 1)) else (if (DPU_CAM_ON) then (1) else (if (DPU_CAM_ON) then (0) else ((0 -> pre(_LVF37_AUTOMATON)))));
tel
node ON_OFF_CMD (
   ON_CMD : bool;
   CMD_DURATION : int
) returns (
   ON_OFF_CMD : T_ON_OFF_CMD
);
let
   ON_OFF_CMD = [ON_CMD, WAIT(ON_CMD, CMD_DURATION)];
tel
node PERIOD_5 (
__DUMMY : bool
) returns (
   ACTIVATION : bool
);
var
   _L5_AUTOMATON : bool;
let
   _L5_AUTOMATON = ((((false -> pre _L5_AUTOMATON) or (false -> pre (false -> pre _L5_AUTOMATON))) or (false -> pre (false -> pre (false -> pre _L5_AUTOMATON)))) or (false -> pre (false -> pre (false -> pre (false -> pre _L5_AUTOMATON)))));
   ACTIVATION = not(_L5_AUTOMATON);
tel
node WAIT (
   START : bool;
   DELAY : int
) returns (
   IS_ENDED : bool
);
var
   _L7_AUTOMATON : int;
   _L8_AUTOMATON : int;
let
   _L7_AUTOMATON = if (START) then (DELAY) else (if ((_L8_AUTOMATON >= 0)) then ((_L8_AUTOMATON - 1)) else (_L8_AUTOMATON));
   _L8_AUTOMATON = (-(1) -> pre _L7_AUTOMATON);
   IS_ENDED = (_L7_AUTOMATON = 0);
tel




-----include "APPLY_CMD.lus"
-- include "../pfs_types.lus"
-- include "../pfs_const.lus"
-- include "DOWNSTREAM.lus"

node PFS_SW__APPLY_CMD (
   CONTROLLER_TO_BE_ACTIVATED : PFS_Data__MYBOOL;
   ENABLE_CONTROLLER : PFS_Data__MYBOOL;
   PDE1_PDE4_CONFIG_IS_SELECTED : PFS_Data__MYBOOL;
   STATE_IS_PFS_M_CAM_PRGS : PFS_Data__MYBOOL;
   THRUSTERS_OPENING : PFS_Data__T_THRUSTERS_OPENING;
) returns (
   PFS_EWC_MSU_PDE_T : T_PFS_EWC_MSU_PDE_T
);
var
   _L1059_APPLY_CMD : T_PFS_EWC_MSU_PDE_T;
  toto: bool;
let
  toto = STATE_IS_PFS_M_CAM_PRGS;
   _L1059_APPLY_CMD = 
     if 
  (STATE_IS_PFS_M_CAM_PRGS) 
     then 
       (current(
                B740_APPLY_CONTROLLER_COMMANDS(
                                               (PDE1_PDE4_CONFIG_IS_SELECTED, 
                                                THRUSTERS_OPENING, 
                                                ENABLE_CONTROLLER, 
                                                CONTROLLER_TO_BE_ACTIVATED) 
                                               when toto
                                               ))
        ) 
     else 
       ((C_D_PFS_EWC_MSU_PDE_T -> pre((_L1059_APPLY_CMD))));


  PFS_EWC_MSU_PDE_T = if (STATE_IS_PFS_M_CAM_PRGS) then (_L1059_APPLY_CMD) else (C_D_PFS_EWC_MSU_PDE_T);
tel


node B740_APPLY_CONTROLLER_COMMANDS (
   PDE1_PDE4_CONFIG_IS_SELECTED : bool;
   THRUSTERS_OPENING : T_THRUSTERS_OPENING;
   ENABLE_CONTROLLER : bool;
   CONTROLLER_TO_BE_ACTIVATED : bool
) returns (
   PFS_EWC_MSU_PDE_T : T_PFS_EWC_MSU_PDE_T
);
var
   _L16_APPLY_CMD : int;
   _L17_APPLY_CMD : int;
   _L2_APPLY_CMD : T_FCV_OPENING_DUR_CMD;
   _L20_APPLY_CMD : int;
   _L21_APPLY_CMD : int;
   _L22_APPLY_CMD : int;
   _L23_APPLY_CMD : int;
   _L24_APPLY_CMD : int;
   _L25_APPLY_CMD : int;
   _L3_APPLY_CMD : T_FCV_OPENING_DUR_CMD;
   _L39_APPLY_CMD : bool;
let
   _L2_APPLY_CMD, _L3_APPLY_CMD = (THRUSTERS_OPENING[0], THRUSTERS_OPENING[1]);
   PFS_EWC_MSU_PDE_T = [[((PDE1_PDE4_CONFIG_IS_SELECTED and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L16_APPLY_CMD)) and ENABLE_CONTROLLER), ((PDE1_PDE4_CONFIG_IS_SELECTED and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L17_APPLY_CMD)) and ENABLE_CONTROLLER)], [((_L39_APPLY_CMD and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L20_APPLY_CMD)) and ENABLE_CONTROLLER), ((_L39_APPLY_CMD and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L21_APPLY_CMD)) and ENABLE_CONTROLLER)], [((_L39_APPLY_CMD and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L22_APPLY_CMD)) and ENABLE_CONTROLLER), ((_L39_APPLY_CMD and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L23_APPLY_CMD)) and ENABLE_CONTROLLER)], [((PDE1_PDE4_CONFIG_IS_SELECTED and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L24_APPLY_CMD)) and ENABLE_CONTROLLER), ((PDE1_PDE4_CONFIG_IS_SELECTED and DELAY(CONTROLLER_TO_BE_ACTIVATED, _L25_APPLY_CMD)) and ENABLE_CONTROLLER)]];
   _L16_APPLY_CMD, _L17_APPLY_CMD = (_L2_APPLY_CMD[0], _L2_APPLY_CMD[1]);
   _L20_APPLY_CMD, _L21_APPLY_CMD = (_L2_APPLY_CMD[0], _L2_APPLY_CMD[1]);
   _L22_APPLY_CMD, _L23_APPLY_CMD = (_L3_APPLY_CMD[0], _L3_APPLY_CMD[1]);
   _L24_APPLY_CMD, _L25_APPLY_CMD = (_L3_APPLY_CMD[0], _L3_APPLY_CMD[1]);
   _L39_APPLY_CMD = not(PDE1_PDE4_CONFIG_IS_SELECTED);
tel
(*
 node DELAY (
   START : bool;
   DELAY : int
) returns (
   ACTIV : bool
);
var
   _L3_APPLY_CMD : int;
   _L4_APPLY_CMD : int;
let
   _L3_APPLY_CMD = if (START) then (DELAY) else (if ((_L4_APPLY_CMD > 0)) then ((_L4_APPLY_CMD - 1)) else (0));
   _L4_APPLY_CMD = (0 -> pre _L3_APPLY_CMD);
   ACTIV = (_L3_APPLY_CMD > 0);
tel
*)


----------------------------------------------------------------
----- PFS_SW__PROVIDE_MSU_ID
node PFS_SW__PROVIDE_MSU_ID
  (
   dummy_in:bool
  )
returns
  (
   out1 : PFS_Data__MYINT;
   out2 : PFS_Data__MYINT
  );

let

   out1 = 0;
   out2 = 1;
tel;

const PFS_SW__PROVIDE_MSU_ID_out1_default  = 0 ;
const PFS_SW__PROVIDE_MSU_ID_out2_default  = 1 ;


----------------------------------------------------------------
----- Deployment__PFS_IMPL
node Deployment__PFS_IMPL
(

FTCP_SW_MSU1_FTCP_HEALTH_STATUS : PFS_Data__T_FTCP_HEALTH_STATUS;
   FTCP_SW_MSU2_FTCP_HEALTH_STATUS : PFS_Data__T_FTCP_HEALTH_STATUS;
   CPF_MSU1_HLTC : PFS_Data__T_HLTC;
   CPF_MSU1_PFS_HLTC_RED_BUTTON_IS_ON : PFS_Data__MYBOOL;
   CPF_MSU2_HLTC : PFS_Data__T_HLTC;
   CPF_MSU2_PFS_HLTC_RED_BUTTON_IS_ON : PFS_Data__MYBOOL;
   DTG_PFS_EWM_DTG12_MSU1 : PFS_Data__T_PFS_EWM_DTG12_MSU;
   DTG_PFS_EWM_DTG12_MSU2 : PFS_Data__T_PFS_EWM_DTG12_MSU;
   ARMING_RELAY1_PFS_IWM_ARMING_RELAY_STATUS_ON : PFS_Data__MYBOOL;
   ARMING_RELAY2_PFS_IWM_ARMING_RELAY_STATUS_ON : PFS_Data__MYBOOL;
   _NAVIGATION_activate_clk : bool;
   _NAVIGATION_dispatch_clk : bool;
   _NAVIGATION_release_clk : bool;
   _APPLY_CMD_activate_clk : bool;
   _APPLY_CMD_dispatch_clk : bool;
   _APPLY_CMD_release_clk : bool;
   _AUTOMATON_activate_clk : bool;
   _AUTOMATON_dispatch_clk : bool;
   _AUTOMATON_release_clk : bool;
   _UPSTREAM_activate_clk : bool;
   _UPSTREAM_dispatch_clk : bool;
   _UPSTREAM_release_clk : bool;
   _DOWNSTREAM_activate_clk : bool;
   _DOWNSTREAM_dispatch_clk : bool;
   _DOWNSTREAM_release_clk : bool;
   _NAVIGATION_activate_clk_2 : bool;
   _NAVIGATION_dispatch_clk_2 : bool;
   _NAVIGATION_release_clk_2 : bool;
   _APPLY_CMD_activate_clk_2 : bool;
   _APPLY_CMD_dispatch_clk_2 : bool;
   _APPLY_CMD_release_clk_2 : bool;
   _AUTOMATON_activate_clk_2 : bool;
   _AUTOMATON_dispatch_clk_2 : bool;
   _AUTOMATON_release_clk_2 : bool;
   _UPSTREAM_activate_clk_2 : bool;
   _UPSTREAM_dispatch_clk_2 : bool;
   _UPSTREAM_release_clk_2 : bool;
   _DOWNSTREAM_activate_clk_2 : bool;
   _DOWNSTREAM_dispatch_clk_2 : bool;
   _DOWNSTREAM_release_clk_2 : bool
)
 returns (
CPF_MSU1_HLTM : PFS_Data__T_HLTM;
   PDE_MSU1_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   PDE_PFS_EWC_MSU1_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   FTCP_SW_MSU1_CMD : PFS_Data__T_DPU_CMD;
   DTG_SET_PFS_EWC_MSU1_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
   CPF_MSU2_HLTM : PFS_Data__T_HLTM;
   PDE_MSU2_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   PDE_PFS_EWC_MSU2_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   FTCP_SW_MSU2_CMD : PFS_Data__T_DPU_CMD;
   DTG_SET_PFS_EWC_MSU2_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD
);
var
   MSU1_SW_HLTM : PFS_Data__T_HLTM;
   MSU1_SW_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   MSU1_SW_PFS_EWC_MSU_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   MSU1_SW_DPU_CMD : PFS_Data__T_DPU_CMD;
   MSU1_SW_SET_PFS_EWC_MSU_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
   MSU1_SW_PFS_EWM_MSUX_MSUY_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   MSU2_SW_PFS_EWM_MSUY_MSUX_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   MSU2_SW_HLTM : PFS_Data__T_HLTM;
   MSU2_SW_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   MSU2_SW_PFS_EWC_MSU_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   MSU2_SW_DPU_CMD : PFS_Data__T_DPU_CMD;
   MSU2_SW_SET_PFS_EWC_MSU_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
   MSU2_SW_PFS_EWM_MSUX_MSUY_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   MSU1_SW_PFS_EWM_MSUY_MSUX_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   PROVIDE_MSU_ID_out1 : PFS_Data__MYINT;
   PROVIDE_MSU_ID_out2 : PFS_Data__MYINT;
   MSU1_SW_MSU_ID : PFS_Data__MYINT;
   MSU2_SW_MSU_ID : PFS_Data__MYINT;
let
  PDE_PFS_EWC_MSU2_PDE_T = MSU2_SW_PFS_EWC_MSU_PDE_T;
  PDE_MSU2_PDE_CMD_A = MSU2_SW_PDE_CMD_A;
  PDE_PFS_EWC_MSU1_PDE_T = MSU1_SW_PFS_EWC_MSU_PDE_T;
  PDE_MSU1_PDE_CMD_A = MSU1_SW_PDE_CMD_A;
  DTG_SET_PFS_EWC_MSU2_DTG_MODE_COARSE = MSU2_SW_SET_PFS_EWC_MSU_DTG_MODE_COARSE;
  DTG_SET_PFS_EWC_MSU1_DTG_MODE_COARSE = MSU1_SW_SET_PFS_EWC_MSU_DTG_MODE_COARSE;
  CPF_MSU2_HLTM = MSU2_SW_HLTM;
  CPF_MSU1_HLTM = MSU1_SW_HLTM;
  FTCP_SW_MSU2_CMD = MSU2_SW_DPU_CMD;
  FTCP_SW_MSU1_CMD = MSU1_SW_DPU_CMD;
  MSU1_SW_HLTM,MSU1_SW_PDE_CMD_A,MSU1_SW_PFS_EWC_MSU_PDE_T,MSU1_SW_DPU_CMD,MSU1_SW_SET_PFS_EWC_MSU_DTG_MODE_COARSE,MSU1_SW_PFS_EWM_MSUX_MSUY_HS = PFS_SW__MSU_MSU(FTCP_SW_MSU1_FTCP_HEALTH_STATUS,
      CPF_MSU1_HLTC,
      CPF_MSU1_PFS_HLTC_RED_BUTTON_IS_ON,
      DTG_PFS_EWM_DTG12_MSU1,
      ARMING_RELAY1_PFS_IWM_ARMING_RELAY_STATUS_ON,
      MSU2_SW_PFS_EWM_MSUX_MSUY_HS,
      PROVIDE_MSU_ID_out1, _NAVIGATION_activate_clk,
    _NAVIGATION_dispatch_clk,
    _NAVIGATION_release_clk,
    _APPLY_CMD_activate_clk,
    _APPLY_CMD_dispatch_clk,
    _APPLY_CMD_release_clk,
    _AUTOMATON_activate_clk,
    _AUTOMATON_dispatch_clk,
    _AUTOMATON_release_clk,
    _UPSTREAM_activate_clk,
    _UPSTREAM_dispatch_clk,
    _UPSTREAM_release_clk,
    _DOWNSTREAM_activate_clk,
    _DOWNSTREAM_dispatch_clk,
    _DOWNSTREAM_release_clk
    );
  MSU2_SW_HLTM,MSU2_SW_PDE_CMD_A,MSU2_SW_PFS_EWC_MSU_PDE_T,MSU2_SW_DPU_CMD,MSU2_SW_SET_PFS_EWC_MSU_DTG_MODE_COARSE,MSU2_SW_PFS_EWM_MSUX_MSUY_HS = PFS_SW__MSU_MSU(FTCP_SW_MSU2_FTCP_HEALTH_STATUS,
      CPF_MSU2_HLTC,
      CPF_MSU2_PFS_HLTC_RED_BUTTON_IS_ON,
      DTG_PFS_EWM_DTG12_MSU2,
      ARMING_RELAY2_PFS_IWM_ARMING_RELAY_STATUS_ON,
      MSU1_SW_PFS_EWM_MSUX_MSUY_HS,
      PROVIDE_MSU_ID_out2, _NAVIGATION_activate_clk_2,
    _NAVIGATION_dispatch_clk_2,
    _NAVIGATION_release_clk_2,
    _APPLY_CMD_activate_clk_2,
    _APPLY_CMD_dispatch_clk_2,
    _APPLY_CMD_release_clk_2,
    _AUTOMATON_activate_clk_2,
    _AUTOMATON_dispatch_clk_2,
    _AUTOMATON_release_clk_2,
    _UPSTREAM_activate_clk_2,
    _UPSTREAM_dispatch_clk_2,
    _UPSTREAM_release_clk_2,
    _DOWNSTREAM_activate_clk_2,
    _DOWNSTREAM_dispatch_clk_2,
    _DOWNSTREAM_release_clk_2
    );
  PROVIDE_MSU_ID_out1,PROVIDE_MSU_ID_out2 = PFS_SW__PROVIDE_MSU_ID( true (* dummy *)
    );
tel;








----------------------------------------------------------------
----- PFS_SW__MSU_MSU
node PFS_SW__MSU_MSU
(

FTCP_HEALTH_STATUS : PFS_Data__T_FTCP_HEALTH_STATUS;
   HLTC : PFS_Data__T_HLTC;
   PFS_HLTC_RED_BUTTON_IS_ON : PFS_Data__MYBOOL;
   PFS_EWM_DTG12_MSU : PFS_Data__T_PFS_EWM_DTG12_MSU;
   PFS_IWM_ARMING_RELAY_STATUS_ON : PFS_Data__MYBOOL;
   PFS_EWM_MSUY_MSUX_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   MSU_ID : PFS_Data__MYINT;
   _NAVIGATION_activate_clk : bool;
   _NAVIGATION_dispatch_clk : bool;
   _NAVIGATION_release_clk : bool;
   _APPLY_CMD_activate_clk : bool;
   _APPLY_CMD_dispatch_clk : bool;
   _APPLY_CMD_release_clk : bool;
   _AUTOMATON_activate_clk : bool;
   _AUTOMATON_dispatch_clk : bool;
   _AUTOMATON_release_clk : bool;
   _UPSTREAM_activate_clk : bool;
   _UPSTREAM_dispatch_clk : bool;
   _UPSTREAM_release_clk : bool;
   _DOWNSTREAM_activate_clk : bool;
   _DOWNSTREAM_dispatch_clk : bool;
   _DOWNSTREAM_release_clk : bool
)
 returns (
HLTM : PFS_Data__T_HLTM;
   PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   PFS_EWC_MSU_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   DPU_CMD : PFS_Data__T_DPU_CMD;
   SET_PFS_EWC_MSU_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
   PFS_EWM_MSUX_MSUY_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS
);
var
   DOWNSTREAM_ESTIMATED_STATE_condact : PFS_Data__T_CONTROLLER_STATE;
   DOWNSTREAM_SUN_IS_AIMED_condact : PFS_Data__MYBOOL;
   DOWNSTREAM_END_BOOST_IS_REACHED_condact : PFS_Data__MYBOOL;
   DOWNSTREAM_ESTIMATED_STATE : PFS_Data__T_CONTROLLER_STATE;
   DOWNSTREAM_SUN_IS_AIMED : PFS_Data__MYBOOL;
   DOWNSTREAM_END_BOOST_IS_REACHED : PFS_Data__MYBOOL;
   UPSTREAM_THRUSTERS_OPENING_condact : PFS_Data__T_THRUSTERS_OPENING;
   UPSTREAM_THRUSTERS_OPENING : PFS_Data__T_THRUSTERS_OPENING;
   AUTOMATON_CONTROLLER_TO_BE_ACTIVATED_condact : PFS_Data__MYBOOL;
   AUTOMATON_CAM_MODE_condact : PFS_Data__T_CAM_MODE;
   AUTOMATON_STATE_IS_PFS_M_CAM_PRGS_condact : PFS_Data__MYBOOL;
   AUTOMATON_ENABLE_CONTROLLER_condact : PFS_Data__MYBOOL;
   AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE_condact : PFS_Data__T_ON_OFF_CMD;
   AUTOMATON_DPU_CMD_condact : PFS_Data__T_DPU_CMD;
   AUTOMATON_PDE_CMD_A_condact : PFS_Data__T_PDE_CMD_A;
   AUTOMATON_MSU_STATE_condact : PFS_Data__T_MSU_STATE;
   AUTOMATON_CONTROLLER_TO_BE_ACTIVATED : PFS_Data__MYBOOL;
   AUTOMATON_CAM_MODE : PFS_Data__T_CAM_MODE;
   AUTOMATON_STATE_IS_PFS_M_CAM_PRGS : PFS_Data__MYBOOL;
   AUTOMATON_ENABLE_CONTROLLER : PFS_Data__MYBOOL;
   AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
   AUTOMATON_DPU_CMD : PFS_Data__T_DPU_CMD;
   AUTOMATON_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   AUTOMATON_MSU_STATE : PFS_Data__T_MSU_STATE;
   APPLY_CMD_PFS_EWC_MSU_PDE_T_condact : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   APPLY_CMD_PFS_EWC_MSU_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   NAVIGATION_NAVIGATION_OUTPUT_condact : PFS_Data__T_NAVIGATION_OUTPUT;
   NAVIGATION_PFS_EWM_MSUX_MSUY_HS_condact : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   NAVIGATION_HLTM_condact : PFS_Data__T_HLTM;
   NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED_condact : PFS_Data__MYBOOL;
   NAVIGATION_CAM_TEST2_IS_ENABLED_condact : PFS_Data__MYBOOL;
   NAVIGATION_FTCP_RES_DETECTED_condact : PFS_Data__MYBOOL;
   NAVIGATION_SEQUENCER_CONFIGURATION_condact : PFS_Data__T_SEQUENCER_CONFIGURATION;
   NAVIGATION_MSU_HS_IS_OK_condact : PFS_Data__MYBOOL;
   NAVIGATION_MSU_IS_CONFIGURED_condact : PFS_Data__MYBOOL;
   NAVIGATION_MSU_IS_MASTER_condact : PFS_Data__MYBOOL;
   NAVIGATION_NAVIGATION_OUTPUT : PFS_Data__T_NAVIGATION_OUTPUT;
   NAVIGATION_PFS_EWM_MSUX_MSUY_HS : PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   NAVIGATION_HLTM : PFS_Data__T_HLTM;
   NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED : PFS_Data__MYBOOL;
   NAVIGATION_CAM_TEST2_IS_ENABLED : PFS_Data__MYBOOL;
   NAVIGATION_FTCP_RES_DETECTED : PFS_Data__MYBOOL;
   NAVIGATION_SEQUENCER_CONFIGURATION : PFS_Data__T_SEQUENCER_CONFIGURATION;
   NAVIGATION_MSU_HS_IS_OK : PFS_Data__MYBOOL;
   NAVIGATION_MSU_IS_CONFIGURED : PFS_Data__MYBOOL;
   NAVIGATION_MSU_IS_MASTER : PFS_Data__MYBOOL;
let
  DOWNSTREAM_END_BOOST_IS_REACHED,DOWNSTREAM_SUN_IS_AIMED,DOWNSTREAM_ESTIMATED_STATE = 
     -- Delaying the output
    (
      PFS_SW__DOWNSTREAM_CONTROL_END_BOOST_IS_REACHED_dft ,
      PFS_SW__DOWNSTREAM_CONTROL_SUN_IS_AIMED_dft ,
      PFS_SW__DOWNSTREAM_CONTROL_ESTIMATED_STATE_dft 
    ) -> pre (
          if _DOWNSTREAM_release_clk then DOWNSTREAM_END_BOOST_IS_REACHED_condact else DOWNSTREAM_END_BOOST_IS_REACHED,
          if _DOWNSTREAM_release_clk then DOWNSTREAM_SUN_IS_AIMED_condact else DOWNSTREAM_SUN_IS_AIMED,
          if _DOWNSTREAM_release_clk then DOWNSTREAM_ESTIMATED_STATE_condact else DOWNSTREAM_ESTIMATED_STATE);
  DOWNSTREAM_END_BOOST_IS_REACHED_condact,DOWNSTREAM_SUN_IS_AIMED_condact,DOWNSTREAM_ESTIMATED_STATE_condact = 
    condact_PFS_SW__DOWNSTREAM_CONTROL(_DOWNSTREAM_activate_clk,UPSTREAM_THRUSTERS_OPENING,
    AUTOMATON_CAM_MODE,
    AUTOMATON_CONTROLLER_TO_BE_ACTIVATED,
    NAVIGATION_NAVIGATION_OUTPUT,       
     PFS_SW__DOWNSTREAM_CONTROL_END_BOOST_IS_REACHED_dft ,
     PFS_SW__DOWNSTREAM_CONTROL_SUN_IS_AIMED_dft ,
     PFS_SW__DOWNSTREAM_CONTROL_ESTIMATED_STATE_dft 
    );
  UPSTREAM_THRUSTERS_OPENING = 
     -- Delaying the output
    (
      PFS_SW__UPSTREAM_CONTROL_THRUSTERS_OPENING_dft 
    ) -> pre (
          if _UPSTREAM_release_clk then UPSTREAM_THRUSTERS_OPENING_condact else UPSTREAM_THRUSTERS_OPENING);
  UPSTREAM_THRUSTERS_OPENING_condact = 
    condact_PFS_SW__UPSTREAM_CONTROL(_UPSTREAM_activate_clk,AUTOMATON_CAM_MODE,
    AUTOMATON_CONTROLLER_TO_BE_ACTIVATED,
    NAVIGATION_NAVIGATION_OUTPUT,
    DOWNSTREAM_ESTIMATED_STATE,       
     PFS_SW__UPSTREAM_CONTROL_THRUSTERS_OPENING_dft 
    );
  AUTOMATON_MSU_STATE,AUTOMATON_PDE_CMD_A,AUTOMATON_DPU_CMD,AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE,AUTOMATON_ENABLE_CONTROLLER,AUTOMATON_STATE_IS_PFS_M_CAM_PRGS,AUTOMATON_CAM_MODE,AUTOMATON_CONTROLLER_TO_BE_ACTIVATED = 
     -- Delaying the output
    (
      PFS_SW__AUTOMATON_MSU_STATE_dft ,
      PFS_SW__AUTOMATON_PDE_CMD_A_dft ,
      PFS_SW__AUTOMATON_DPU_CMD_dft ,
      PFS_SW__AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE_dft ,
      PFS_SW__AUTOMATON_ENABLE_CONTROLLER_dft ,
      PFS_SW__AUTOMATON_STATE_IS_PFS_M_CAM_PRGS_dft ,
      PFS_SW__AUTOMATON_CAM_MODE_dft ,
      PFS_SW__AUTOMATON_CONTROLLER_TO_BE_ACTIVATED_dft 
    ) -> pre (
          if _AUTOMATON_release_clk then AUTOMATON_MSU_STATE_condact else AUTOMATON_MSU_STATE,
          if _AUTOMATON_release_clk then AUTOMATON_PDE_CMD_A_condact else AUTOMATON_PDE_CMD_A,
          if _AUTOMATON_release_clk then AUTOMATON_DPU_CMD_condact else AUTOMATON_DPU_CMD,
          if _AUTOMATON_release_clk then AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE_condact else AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE,
          if _AUTOMATON_release_clk then AUTOMATON_ENABLE_CONTROLLER_condact else AUTOMATON_ENABLE_CONTROLLER,
          if _AUTOMATON_release_clk then AUTOMATON_STATE_IS_PFS_M_CAM_PRGS_condact else AUTOMATON_STATE_IS_PFS_M_CAM_PRGS,
          if _AUTOMATON_release_clk then AUTOMATON_CAM_MODE_condact else AUTOMATON_CAM_MODE,
          if _AUTOMATON_release_clk then AUTOMATON_CONTROLLER_TO_BE_ACTIVATED_condact else AUTOMATON_CONTROLLER_TO_BE_ACTIVATED);
  AUTOMATON_MSU_STATE_condact,AUTOMATON_PDE_CMD_A_condact,AUTOMATON_DPU_CMD_condact,AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE_condact,AUTOMATON_ENABLE_CONTROLLER_condact,AUTOMATON_STATE_IS_PFS_M_CAM_PRGS_condact,AUTOMATON_CAM_MODE_condact,AUTOMATON_CONTROLLER_TO_BE_ACTIVATED_condact = 
    condact_PFS_SW__AUTOMATON(_AUTOMATON_activate_clk,DOWNSTREAM_END_BOOST_IS_REACHED,
    DOWNSTREAM_SUN_IS_AIMED,
    PFS_IWM_ARMING_RELAY_STATUS_ON,
    PFS_HLTC_RED_BUTTON_IS_ON,
    NAVIGATION_MSU_IS_MASTER,
    NAVIGATION_MSU_IS_CONFIGURED,
    NAVIGATION_MSU_HS_IS_OK,
    NAVIGATION_SEQUENCER_CONFIGURATION,
    NAVIGATION_FTCP_RES_DETECTED,
    NAVIGATION_CAM_TEST2_IS_ENABLED,       
     PFS_SW__AUTOMATON_MSU_STATE_dft ,
     PFS_SW__AUTOMATON_PDE_CMD_A_dft ,
     PFS_SW__AUTOMATON_DPU_CMD_dft ,
     PFS_SW__AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE_dft ,
     PFS_SW__AUTOMATON_ENABLE_CONTROLLER_dft ,
     PFS_SW__AUTOMATON_STATE_IS_PFS_M_CAM_PRGS_dft ,
     PFS_SW__AUTOMATON_CAM_MODE_dft ,
     PFS_SW__AUTOMATON_CONTROLLER_TO_BE_ACTIVATED_dft 
    );
  SET_PFS_EWC_MSU_DTG_MODE_COARSE = AUTOMATON_SET_PFS_EWC_MSU_DTG_MODE_COARSE;
  DPU_CMD = AUTOMATON_DPU_CMD;
  PDE_CMD_A = AUTOMATON_PDE_CMD_A;
  APPLY_CMD_PFS_EWC_MSU_PDE_T = 
     -- Delaying the output
    (
      PFS_SW__APPLY_CMD_PFS_EWC_MSU_PDE_T_dft 
    ) -> pre (
          if _APPLY_CMD_release_clk then APPLY_CMD_PFS_EWC_MSU_PDE_T_condact else APPLY_CMD_PFS_EWC_MSU_PDE_T);
  APPLY_CMD_PFS_EWC_MSU_PDE_T_condact = 
    condact_PFS_SW__APPLY_CMD(_APPLY_CMD_activate_clk,AUTOMATON_ENABLE_CONTROLLER,
    AUTOMATON_STATE_IS_PFS_M_CAM_PRGS,
    NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED,
    UPSTREAM_THRUSTERS_OPENING,
    AUTOMATON_CONTROLLER_TO_BE_ACTIVATED,       
     PFS_SW__APPLY_CMD_PFS_EWC_MSU_PDE_T_dft 
    );
  PFS_EWC_MSU_PDE_T = APPLY_CMD_PFS_EWC_MSU_PDE_T;
  NAVIGATION_MSU_IS_MASTER,NAVIGATION_MSU_IS_CONFIGURED,NAVIGATION_MSU_HS_IS_OK,NAVIGATION_SEQUENCER_CONFIGURATION,NAVIGATION_FTCP_RES_DETECTED,NAVIGATION_CAM_TEST2_IS_ENABLED,NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED,NAVIGATION_HLTM,NAVIGATION_PFS_EWM_MSUX_MSUY_HS,NAVIGATION_NAVIGATION_OUTPUT = 
     -- Delaying the output
    (
      PFS_SW__NAVIGATION_MSU_IS_MASTER_dft ,
      PFS_SW__NAVIGATION_MSU_IS_CONFIGURED_dft ,
      PFS_SW__NAVIGATION_MSU_HS_IS_OK_dft ,
      PFS_SW__NAVIGATION_SEQUENCER_CONFIGURATION_dft ,
      PFS_SW__NAVIGATION_FTCP_RES_DETECTED_dft ,
      PFS_SW__NAVIGATION_CAM_TEST2_IS_ENABLED_dft ,
      PFS_SW__NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED_dft ,
      PFS_SW__NAVIGATION_HLTM_dft ,
      PFS_SW__NAVIGATION_PFS_EWM_MSUX_MSUY_HS_dft ,
      PFS_SW__NAVIGATION_NAVIGATION_OUTPUT_dft 
    ) -> pre (
          if _NAVIGATION_release_clk then NAVIGATION_MSU_IS_MASTER_condact else NAVIGATION_MSU_IS_MASTER,
          if _NAVIGATION_release_clk then NAVIGATION_MSU_IS_CONFIGURED_condact else NAVIGATION_MSU_IS_CONFIGURED,
          if _NAVIGATION_release_clk then NAVIGATION_MSU_HS_IS_OK_condact else NAVIGATION_MSU_HS_IS_OK,
          if _NAVIGATION_release_clk then NAVIGATION_SEQUENCER_CONFIGURATION_condact else NAVIGATION_SEQUENCER_CONFIGURATION,
          if _NAVIGATION_release_clk then NAVIGATION_FTCP_RES_DETECTED_condact else NAVIGATION_FTCP_RES_DETECTED,
          if _NAVIGATION_release_clk then NAVIGATION_CAM_TEST2_IS_ENABLED_condact else NAVIGATION_CAM_TEST2_IS_ENABLED,
          if _NAVIGATION_release_clk then NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED_condact else NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED,
          if _NAVIGATION_release_clk then NAVIGATION_HLTM_condact else NAVIGATION_HLTM,
          if _NAVIGATION_release_clk then NAVIGATION_PFS_EWM_MSUX_MSUY_HS_condact else NAVIGATION_PFS_EWM_MSUX_MSUY_HS,
          if _NAVIGATION_release_clk then NAVIGATION_NAVIGATION_OUTPUT_condact else NAVIGATION_NAVIGATION_OUTPUT);
  NAVIGATION_MSU_IS_MASTER_condact,NAVIGATION_MSU_IS_CONFIGURED_condact,NAVIGATION_MSU_HS_IS_OK_condact,NAVIGATION_SEQUENCER_CONFIGURATION_condact,NAVIGATION_FTCP_RES_DETECTED_condact,NAVIGATION_CAM_TEST2_IS_ENABLED_condact,NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED_condact,NAVIGATION_HLTM_condact,NAVIGATION_PFS_EWM_MSUX_MSUY_HS_condact,NAVIGATION_NAVIGATION_OUTPUT_condact = 
    condact_PFS_SW__NAVIGATION(_NAVIGATION_activate_clk,AUTOMATON_MSU_STATE,
    AUTOMATON_CAM_MODE,
    PFS_IWM_ARMING_RELAY_STATUS_ON,
    PFS_EWM_MSUY_MSUX_HS,
    FTCP_HEALTH_STATUS,
    PFS_HLTC_RED_BUTTON_IS_ON,
    PFS_EWM_DTG12_MSU,
    HLTC,
    MSU_ID,       
     PFS_SW__NAVIGATION_MSU_IS_MASTER_dft ,
     PFS_SW__NAVIGATION_MSU_IS_CONFIGURED_dft ,
     PFS_SW__NAVIGATION_MSU_HS_IS_OK_dft ,
     PFS_SW__NAVIGATION_SEQUENCER_CONFIGURATION_dft ,
     PFS_SW__NAVIGATION_FTCP_RES_DETECTED_dft ,
     PFS_SW__NAVIGATION_CAM_TEST2_IS_ENABLED_dft ,
     PFS_SW__NAVIGATION_PDE1_PDE4_CONFIG_IS_SELECTED_dft ,
     PFS_SW__NAVIGATION_HLTM_dft ,
     PFS_SW__NAVIGATION_PFS_EWM_MSUX_MSUY_HS_dft ,
     PFS_SW__NAVIGATION_NAVIGATION_OUTPUT_dft 
    );
  PFS_EWM_MSUX_MSUY_HS = NAVIGATION_PFS_EWM_MSUX_MSUY_HS;
  HLTM = NAVIGATION_HLTM;
tel;


----------------------------------------------------------------
---------- Condact PFS_SW__UPSTREAM_CONTROL
node condact_PFS_SW__UPSTREAM_CONTROL
(
clk:bool;
   x1:PFS_Data__T_CAM_MODE;
   x2:PFS_Data__MYBOOL;
   x3:PFS_Data__T_NAVIGATION_OUTPUT;
   x4:PFS_Data__T_CONTROLLER_STATE;
   def1:PFS_Data__T_THRUSTERS_OPENING  )
returns
  (   y1:PFS_Data__T_THRUSTERS_OPENING  );
let

  y1 =
     if clk then current(PFS_SW__UPSTREAM_CONTROL(x1 when clk,
      x2 when clk,
      x3 when clk,
      x4 when clk))
       else ((def1)
           -> pre (y1));
tel;
-- End of node condact_PFS_SW__UPSTREAM_CONTROL

----------------------------------------------------------------
---------- Condact PFS_SW__NAVIGATION
node condact_PFS_SW__NAVIGATION
(
clk:bool;
   x1:PFS_Data__T_MSU_STATE;
   x2:PFS_Data__T_CAM_MODE;
   x3:PFS_Data__MYBOOL;
   x4:PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   x5:PFS_Data__T_FTCP_HEALTH_STATUS;
   x6:PFS_Data__MYBOOL;
   x7:PFS_Data__T_PFS_EWM_DTG12_MSU;
   x8:PFS_Data__T_HLTC;
   x9:PFS_Data__MYINT;
   def1:PFS_Data__MYBOOL;
   def2:PFS_Data__MYBOOL;
   def3:PFS_Data__MYBOOL;
   def4:PFS_Data__T_SEQUENCER_CONFIGURATION;
   def5:PFS_Data__MYBOOL;
   def6:PFS_Data__MYBOOL;
   def7:PFS_Data__MYBOOL;
   def8:PFS_Data__T_HLTM;
   def9:PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   def10:PFS_Data__T_NAVIGATION_OUTPUT  )
returns
  (
   y1:PFS_Data__MYBOOL;
   y2:PFS_Data__MYBOOL;
   y3:PFS_Data__MYBOOL;
   y4:PFS_Data__T_SEQUENCER_CONFIGURATION;
   y5:PFS_Data__MYBOOL;
   y6:PFS_Data__MYBOOL;
   y7:PFS_Data__MYBOOL;
   y8:PFS_Data__T_HLTM;
   y9:PFS_Data__T_PFS_EWM_MSU_MSU_HS;
   y10:PFS_Data__T_NAVIGATION_OUTPUT  );
let

  y1, y2, y3, y4, y5, y6, y7, y8, y9, y10 =
     if clk then current(PFS_SW__NAVIGATION(x1 when clk,
      x2 when clk,
      x3 when clk,
      x4 when clk,
      x5 when clk,
      x6 when clk,
      x7 when clk,
      x8 when clk,
      x9 when clk))
       else ((def1, def2, def3, def4, def5, def6, def7, def8, def9, def10)
           -> pre (y1, y2, y3, y4, y5, y6, y7, y8, y9, y10));
tel;
-- End of node condact_PFS_SW__NAVIGATION

----------------------------------------------------------------
---------- Condact PFS_SW__DOWNSTREAM_CONTROL
node condact_PFS_SW__DOWNSTREAM_CONTROL
(
clk:bool;
   x1:PFS_Data__T_THRUSTERS_OPENING;
   x2:PFS_Data__T_CAM_MODE;
   x3:PFS_Data__MYBOOL;
   x4:PFS_Data__T_NAVIGATION_OUTPUT;
   def1:PFS_Data__MYBOOL;
   def2:PFS_Data__MYBOOL;
   def3:PFS_Data__T_CONTROLLER_STATE  )
returns
  (
   y1:PFS_Data__MYBOOL;
   y2:PFS_Data__MYBOOL;
   y3:PFS_Data__T_CONTROLLER_STATE  );
let

  y1, y2, y3 =
     if clk then current(PFS_SW__DOWNSTREAM_CONTROL(x1 when clk,
      x2 when clk,
      x3 when clk,
      x4 when clk))
       else ((def1, def2, def3)
           -> pre (y1, y2, y3));
tel;
-- End of node condact_PFS_SW__DOWNSTREAM_CONTROL

----------------------------------------------------------------
---------- Condact PFS_SW__AUTOMATON
node condact_PFS_SW__AUTOMATON
(
clk:bool;
   x1:PFS_Data__MYBOOL;
   x2:PFS_Data__MYBOOL;
   x3:PFS_Data__MYBOOL;
   x4:PFS_Data__MYBOOL;
   x5:PFS_Data__MYBOOL;
   x6:PFS_Data__MYBOOL;
   x7:PFS_Data__MYBOOL;
   x8:PFS_Data__T_SEQUENCER_CONFIGURATION;
   x9:PFS_Data__MYBOOL;
   x10:PFS_Data__MYBOOL;
   def1:PFS_Data__T_MSU_STATE;
   def2:PFS_Data__T_PDE_CMD_A;
   def3:PFS_Data__T_DPU_CMD;
   def4:PFS_Data__T_ON_OFF_CMD;
   def5:PFS_Data__MYBOOL;
   def6:PFS_Data__MYBOOL;
   def7:PFS_Data__T_CAM_MODE;
   def8:PFS_Data__MYBOOL  )
returns
  (
   y1:PFS_Data__T_MSU_STATE;
   y2:PFS_Data__T_PDE_CMD_A;
   y3:PFS_Data__T_DPU_CMD;
   y4:PFS_Data__T_ON_OFF_CMD;
   y5:PFS_Data__MYBOOL;
   y6:PFS_Data__MYBOOL;
   y7:PFS_Data__T_CAM_MODE;
   y8:PFS_Data__MYBOOL  );
let

  y1, y2, y3, y4, y5, y6, y7, y8 =
     if clk then current(PFS_SW__AUTOMATON(x1 when clk,
      x2 when clk,
      x3 when clk,
      x4 when clk,
      x5 when clk,
      x6 when clk,
      x7 when clk,
      x8 when clk,
      x9 when clk,
      x10 when clk))
       else ((def1, def2, def3, def4, def5, def6, def7, def8)
           -> pre (y1, y2, y3, y4, y5, y6, y7, y8));
tel;
-- End of node condact_PFS_SW__AUTOMATON

----------------------------------------------------------------
---------- Condact PFS_SW__APPLY_CMD
node condact_PFS_SW__APPLY_CMD
(
clk:bool;
   x1:PFS_Data__MYBOOL;
   x2:PFS_Data__MYBOOL;
   x3:PFS_Data__MYBOOL;
   x4:PFS_Data__T_THRUSTERS_OPENING;
   x5:PFS_Data__MYBOOL;
   def1:PFS_Data__T_PFS_EWC_MSU_PDE_T  )
returns
  (   y1:PFS_Data__T_PFS_EWC_MSU_PDE_T  );
let

  y1 =
     if clk then current(PFS_SW__APPLY_CMD(x1 when clk,
      x2 when clk,
      x3 when clk,
      x4 when clk,
      x5 when clk))
       else ((def1)
           -> pre (y1));
tel;
-- End of node condact_PFS_SW__APPLY_CMD


















----------------------------------------------------------------
-- scheduled version of node Deployment__PFS_IMPL

node pfs_5(
   FTCP_SW_MSU1_FTCP_HEALTH_STATUS : PFS_Data__T_FTCP_HEALTH_STATUS;
   FTCP_SW_MSU2_FTCP_HEALTH_STATUS : PFS_Data__T_FTCP_HEALTH_STATUS;
   CPF_MSU1_HLTC : PFS_Data__T_HLTC;
   CPF_MSU1_PFS_HLTC_RED_BUTTON_IS_ON : PFS_Data__MYBOOL;
   CPF_MSU2_HLTC : PFS_Data__T_HLTC;
   CPF_MSU2_PFS_HLTC_RED_BUTTON_IS_ON : PFS_Data__MYBOOL;
   DTG_PFS_EWM_DTG12_MSU1 : PFS_Data__T_PFS_EWM_DTG12_MSU;
   DTG_PFS_EWM_DTG12_MSU2 : PFS_Data__T_PFS_EWM_DTG12_MSU;
   ARMING_RELAY1_PFS_IWM_ARMING_RELAY_STATUS_ON : PFS_Data__MYBOOL;
   ARMING_RELAY2_PFS_IWM_ARMING_RELAY_STATUS_ON : PFS_Data__MYBOOL;
     _NAVIGATION_release_clk_min_max:int;
  _APPLY_CMD_release_clk_min_max:int;
  _AUTOMATON_release_clk_min_max:int;
  _UPSTREAM_release_clk_min_max:int;
  _DOWNSTREAM_release_clk_min_max:int;
  _NAVIGATION_release_clk_2_min_max:int;
  _APPLY_CMD_release_clk_2_min_max:int;
  _AUTOMATON_release_clk_2_min_max:int;
  _UPSTREAM_release_clk_2_min_max:int;
  _DOWNSTREAM_release_clk_2_min_max:int;
alea1, alea2 : bool)
returns (
   CPF_MSU1_HLTM : PFS_Data__T_HLTM;
   PDE_MSU1_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   PDE_PFS_EWC_MSU1_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   FTCP_SW_MSU1_CMD : PFS_Data__T_DPU_CMD;
   DTG_SET_PFS_EWC_MSU1_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
   CPF_MSU2_HLTM : PFS_Data__T_HLTM;
   PDE_MSU2_PDE_CMD_A : PFS_Data__T_PDE_CMD_A;
   PDE_PFS_EWC_MSU2_PDE_T : PFS_Data__T_PFS_EWC_MSU_PDE_T;
   FTCP_SW_MSU2_CMD : PFS_Data__T_DPU_CMD;
   DTG_SET_PFS_EWC_MSU2_DTG_MODE_COARSE : PFS_Data__T_ON_OFF_CMD;
-- we output the scheduler clocks to see what is going on (cf --show-scheduling-vars option).
  _NAVIGATION_activate_clk : bool;
  _NAVIGATION_dispatch_clk : bool;
  _NAVIGATION_release_clk : bool;
  _APPLY_CMD_activate_clk : bool;
  _APPLY_CMD_dispatch_clk : bool;
  _APPLY_CMD_release_clk : bool;
  _AUTOMATON_activate_clk : bool;
  _AUTOMATON_dispatch_clk : bool;
  _AUTOMATON_release_clk : bool;
  _UPSTREAM_activate_clk : bool;
  _UPSTREAM_dispatch_clk : bool;
  _UPSTREAM_release_clk : bool;
  _DOWNSTREAM_activate_clk : bool;
  _DOWNSTREAM_dispatch_clk : bool;
  _DOWNSTREAM_release_clk : bool;
  _NAVIGATION_activate_clk_2 : bool;
  _NAVIGATION_dispatch_clk_2 : bool;
  _NAVIGATION_release_clk_2 : bool;
  _APPLY_CMD_activate_clk_2 : bool;
  _APPLY_CMD_dispatch_clk_2 : bool;
  _APPLY_CMD_release_clk_2 : bool;
  _AUTOMATON_activate_clk_2 : bool;
  _AUTOMATON_dispatch_clk_2 : bool;
  _AUTOMATON_release_clk_2 : bool;
  _UPSTREAM_activate_clk_2 : bool;
  _UPSTREAM_dispatch_clk_2 : bool;
  _UPSTREAM_release_clk_2 : bool;
  _DOWNSTREAM_activate_clk_2 : bool;
  _DOWNSTREAM_dispatch_clk_2 : bool;
  _DOWNSTREAM_release_clk_2 : bool;
  qs_tick1, qs_tick2 : bool;
  _NAVIGATION_dispatched_on_MSU1_HW, _APPLY_CMD_dispatched_on_MSU1_HW, _AUTOMATON_dispatched_on_MSU1_HW, _UPSTREAM_dispatched_on_MSU1_HW, _DOWNSTREAM_dispatched_on_MSU1_HW, _NAVIGATION_2_dispatched_on_MSU2_HW, _APPLY_CMD_2_dispatched_on_MSU2_HW, _AUTOMATON_2_dispatched_on_MSU2_HW, _UPSTREAM_2_dispatched_on_MSU2_HW, _DOWNSTREAM_2_dispatched_on_MSU2_HW : bool;
  _NAVIGATION_has_cpu_on_MSU1_HW, _APPLY_CMD_has_cpu_on_MSU1_HW, _AUTOMATON_has_cpu_on_MSU1_HW, _UPSTREAM_has_cpu_on_MSU1_HW, _DOWNSTREAM_has_cpu_on_MSU1_HW, _NAVIGATION_2_has_cpu_on_MSU2_HW, _APPLY_CMD_2_has_cpu_on_MSU2_HW, _AUTOMATON_2_has_cpu_on_MSU2_HW, _UPSTREAM_2_has_cpu_on_MSU2_HW, _DOWNSTREAM_2_has_cpu_on_MSU2_HW : bool; schedul_ok:bool);

let
    _NAVIGATION_activate_clk,
    _NAVIGATION_dispatch_clk,
    _NAVIGATION_release_clk,
    _APPLY_CMD_activate_clk,
    _APPLY_CMD_dispatch_clk,
    _APPLY_CMD_release_clk,
    _AUTOMATON_activate_clk,
    _AUTOMATON_dispatch_clk,
    _AUTOMATON_release_clk,
    _UPSTREAM_activate_clk,
    _UPSTREAM_dispatch_clk,
    _UPSTREAM_release_clk,
    _DOWNSTREAM_activate_clk,
    _DOWNSTREAM_dispatch_clk,
    _DOWNSTREAM_release_clk,
    _NAVIGATION_activate_clk_2,
    _NAVIGATION_dispatch_clk_2,
    _NAVIGATION_release_clk_2,
    _APPLY_CMD_activate_clk_2,
    _APPLY_CMD_dispatch_clk_2,
    _APPLY_CMD_release_clk_2,
    _AUTOMATON_activate_clk_2,
    _AUTOMATON_dispatch_clk_2,
    _AUTOMATON_release_clk_2,
    _UPSTREAM_activate_clk_2,
    _UPSTREAM_dispatch_clk_2,
    _UPSTREAM_release_clk_2,
    _DOWNSTREAM_activate_clk_2,
    _DOWNSTREAM_dispatch_clk_2,
    _DOWNSTREAM_release_clk_2, qs_tick1, qs_tick2,
    _NAVIGATION_dispatched_on_MSU1_HW,
     _APPLY_CMD_dispatched_on_MSU1_HW,
     _AUTOMATON_dispatched_on_MSU1_HW,
     _UPSTREAM_dispatched_on_MSU1_HW,
     _DOWNSTREAM_dispatched_on_MSU1_HW,
     _NAVIGATION_2_dispatched_on_MSU2_HW,
     _APPLY_CMD_2_dispatched_on_MSU2_HW,
     _AUTOMATON_2_dispatched_on_MSU2_HW,
     _UPSTREAM_2_dispatched_on_MSU2_HW,
     _DOWNSTREAM_2_dispatched_on_MSU2_HW,_NAVIGATION_has_cpu_on_MSU1_HW,
     _APPLY_CMD_has_cpu_on_MSU1_HW,
     _AUTOMATON_has_cpu_on_MSU1_HW,
     _UPSTREAM_has_cpu_on_MSU1_HW,
     _DOWNSTREAM_has_cpu_on_MSU1_HW,
     _NAVIGATION_2_has_cpu_on_MSU2_HW,
     _APPLY_CMD_2_has_cpu_on_MSU2_HW,
     _AUTOMATON_2_has_cpu_on_MSU2_HW,
     _UPSTREAM_2_has_cpu_on_MSU2_HW,
     _DOWNSTREAM_2_has_cpu_on_MSU2_HW,  schedul_ok
      = schedule_pfs_5(  _NAVIGATION_release_clk_min_max,
     _APPLY_CMD_release_clk_min_max,
     _AUTOMATON_release_clk_min_max,
     _UPSTREAM_release_clk_min_max,
     _DOWNSTREAM_release_clk_min_max,
     _NAVIGATION_release_clk_2_min_max,
     _APPLY_CMD_release_clk_2_min_max,
     _AUTOMATON_release_clk_2_min_max,
     _UPSTREAM_release_clk_2_min_max,
     _DOWNSTREAM_release_clk_2_min_max,
   alea1, alea2
    );

  CPF_MSU1_HLTM,
    PDE_MSU1_PDE_CMD_A,
    PDE_PFS_EWC_MSU1_PDE_T,
    FTCP_SW_MSU1_CMD,
    DTG_SET_PFS_EWC_MSU1_DTG_MODE_COARSE,
    CPF_MSU2_HLTM,
    PDE_MSU2_PDE_CMD_A,
    PDE_PFS_EWC_MSU2_PDE_T,
    FTCP_SW_MSU2_CMD,
    DTG_SET_PFS_EWC_MSU2_DTG_MODE_COARSE
     = Deployment__PFS_IMPL
  (
     FTCP_SW_MSU1_FTCP_HEALTH_STATUS,
     FTCP_SW_MSU2_FTCP_HEALTH_STATUS,
     CPF_MSU1_HLTC,
     CPF_MSU1_PFS_HLTC_RED_BUTTON_IS_ON,
     CPF_MSU2_HLTC,
     CPF_MSU2_PFS_HLTC_RED_BUTTON_IS_ON,
     DTG_PFS_EWM_DTG12_MSU1,
     DTG_PFS_EWM_DTG12_MSU2,
     ARMING_RELAY1_PFS_IWM_ARMING_RELAY_STATUS_ON,
     ARMING_RELAY2_PFS_IWM_ARMING_RELAY_STATUS_ON,
     _NAVIGATION_activate_clk,
    _NAVIGATION_dispatch_clk,
    _NAVIGATION_release_clk,
    _APPLY_CMD_activate_clk,
    _APPLY_CMD_dispatch_clk,
    _APPLY_CMD_release_clk,
    _AUTOMATON_activate_clk,
    _AUTOMATON_dispatch_clk,
    _AUTOMATON_release_clk,
    _UPSTREAM_activate_clk,
    _UPSTREAM_dispatch_clk,
    _UPSTREAM_release_clk,
    _DOWNSTREAM_activate_clk,
    _DOWNSTREAM_dispatch_clk,
    _DOWNSTREAM_release_clk,
    _NAVIGATION_activate_clk_2,
    _NAVIGATION_dispatch_clk_2,
    _NAVIGATION_release_clk_2,
    _APPLY_CMD_activate_clk_2,
    _APPLY_CMD_dispatch_clk_2,
    _APPLY_CMD_release_clk_2,
    _AUTOMATON_activate_clk_2,
    _AUTOMATON_dispatch_clk_2,
    _AUTOMATON_release_clk_2,
    _UPSTREAM_activate_clk_2,
    _UPSTREAM_dispatch_clk_2,
    _UPSTREAM_release_clk_2,
    _DOWNSTREAM_activate_clk_2,
    _DOWNSTREAM_dispatch_clk_2,
    _DOWNSTREAM_release_clk_2
  );

tel;

