(library
 (name test)
 (libraries base protobuf)
 (inline_tests)
 (preprocess
  (pps ppx_expect ppx_deriving.show ppx_deriving.eq)))

(rule
 (targets basic.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto basic.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets primitive_types.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto primitive_types.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets int_types.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto int_types.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets repeated.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto repeated.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets enum.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto enum.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets message.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto message.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets oneof.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto oneof.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets map.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto map.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets package.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto package.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets include.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto include.proto)
  included.proto package.proto enum.proto
 )
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets included.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto included.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets included2.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto included2.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

; (rule
;  (targets descriptor.ml)
;  (deps
;   (:plugin ../src/plugin/protoc_gen_ocaml.exe)
;   (:proto /usr/include/google/protobuf/descriptor.proto))
;  (action
;   (run protoc -I /usr/include/google/protobuf/
;        "--plugin=protoc-gen-ocaml=%{plugin}"
;        "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets service.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto service.proto))
 (action
  (run protoc -I.
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets recursive.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto recursive.proto))
 (action
  (run protoc -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=annot=[@@deriving show { with_path = false }, eq]:." %{proto})))
