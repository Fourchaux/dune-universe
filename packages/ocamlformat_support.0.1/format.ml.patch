--- format/format.ml	2017-06-27 23:12:41.000000000 +0100
+++ format/format_.ml	2017-06-27 23:08:55.000000000 +0100
@@ -62,6 +62,15 @@
   | Pp_newline                 (* to force a newline inside a box *)
   | Pp_if_newline              (* to do something only if this very
                                   line has been broken *)
+  | Pp_string_if_newline of string
+                               (* print a string only if this very
+                                  line has been broken *)
+  | Pp_break_or_string_if_newline of int * int * string
+                               (* print a break if this very line has not
+                                  been broken, otherwise print a string *)
+  | Pp_fits_or_breaks of string * int * int * string
+                               (* print a string if the enclosing box fits,
+                                  otherwise print a break and a string *)
   | Pp_open_tag of tag         (* opening a tag name *)
   | Pp_close_tag               (* closing the most recently opened tag *)
 
@@ -415,6 +424,13 @@
     if state.pp_current_indent != state.pp_margin - state.pp_space_left
     then pp_skip_token state
 
+  | Pp_string_if_newline s ->
+    if state.pp_is_new_line then begin
+      state.pp_space_left <- state.pp_space_left - (String.length s);
+      pp_output_string state s;
+      state.pp_is_new_line <- false
+    end
+
   | Pp_break (n, off) ->
     begin match state.pp_format_stack with
     | Format_elem (ty, width) :: _ ->
@@ -440,6 +456,59 @@
     | [] -> () (* No opened box. *)
     end
 
+  | Pp_break_or_string_if_newline (n, off, s) ->
+    if state.pp_is_new_line then begin
+      state.pp_space_left <- state.pp_space_left - (String.length s);
+      pp_output_string state s;
+      state.pp_is_new_line <- false
+    end
+    else
+    begin match state.pp_format_stack with
+    | Format_elem (ty, width) :: _ ->
+      begin match ty with
+      | Pp_hovbox ->
+        if size > state.pp_space_left
+        then break_new_line state off width
+        else break_same_line state n
+      | Pp_box ->
+        (* Have the line just been broken here ? *)
+        if state.pp_is_new_line then break_same_line state n else
+        if size > state.pp_space_left
+         then break_new_line state off width else
+        (* break the line here leads to new indentation ? *)
+        if state.pp_current_indent > state.pp_margin - width + off
+        then break_new_line state off width
+        else break_same_line state n
+      | Pp_hvbox -> break_new_line state off width
+      | Pp_fits -> break_same_line state n
+      | Pp_vbox -> break_new_line state off width
+      | Pp_hbox -> break_same_line state n
+      end
+    | [] -> () (* No open box. *)
+    end
+
+  | Pp_fits_or_breaks (fits, n, off, breaks) ->
+    begin match state.pp_format_stack with
+    | Format_elem (ty, width) :: _ ->
+        let text =
+          if ty = Pp_fits then
+            fits
+          else begin
+            if off >= 0 then begin
+              if size + String.length breaks >= state.pp_space_left
+              then break_new_line state off width
+              else break_same_line state n
+            end;
+            breaks
+          end in
+        if text <> "" then begin
+          state.pp_space_left <- state.pp_space_left - (String.length text);
+          pp_output_string state text;
+          state.pp_is_new_line <- false
+        end
+    | [] -> () (* No open box. *)
+    end
+
    | Pp_open_tag tag_name ->
      let marker = state.pp_mark_open_tag tag_name in
      pp_output_string state marker;
@@ -530,7 +599,8 @@
     (* test if scan stack contains any data that is not obsolete. *)
     if left_tot < state.pp_left_total then clear_scan_stack state else
       begin match tok with
-      | Pp_break (_, _) | Pp_tbreak (_, _) ->
+      | Pp_break (_, _) | Pp_tbreak (_, _)
+      | Pp_break_or_string_if_newline _ | Pp_fits_or_breaks _ ->
         if ty then
         begin
           queue_elem.elem_size <- size_of_int (state.pp_right_total + size);
@@ -543,7 +613,7 @@
           state.pp_scan_stack <- t
         end
       | Pp_text _ | Pp_stab | Pp_tbegin _ | Pp_tend | Pp_end
-      | Pp_newline | Pp_if_newline
+      | Pp_newline | Pp_if_newline | Pp_string_if_newline _
       | Pp_open_tag _ | Pp_close_tag ->
         () (* scan_push is only used for breaks and boxes. *)
       end
@@ -743,6 +813,14 @@
     enqueue_advance state (make_queue_elem (size_of_int 0) Pp_if_newline 0)
 
 
+(* To format a string, only in case the line has just been broken. *)
+let pp_print_string_if_newline state s =
+  if state.pp_curr_depth < state.pp_max_boxes then
+    let len = String.length s in
+    let size = size_of_int 0 in
+    enqueue_advance state (make_queue_elem size (Pp_string_if_newline s) len)
+
+
 (* Printing break hints:
    A break hint indicates where a box may be broken.
    If line is broken then offset is added to the indentation of the current
@@ -757,6 +835,28 @@
     scan_push state true elem
 
 
+(* To format a break, only in case the line has not just been broken, or a
+   string, in case the line has just been broken. *)
+let pp_print_break_or_string_if_newline state width offset s =
+  if state.pp_curr_depth < state.pp_max_boxes then
+    let elem =
+      make_queue_elem
+        (size_of_int (- state.pp_right_total))
+        (Pp_break_or_string_if_newline (width, offset, s))
+        width in
+    scan_push state true elem
+
+
+let pp_print_fits_or_breaks state fits nspaces offset breaks =
+  if state.pp_curr_depth < state.pp_max_boxes then
+    let elem =
+      make_queue_elem
+        (size_of_int (- state.pp_right_total))
+        (Pp_fits_or_breaks (fits, nspaces, offset, breaks))
+        (String.length fits) in
+    scan_push state true elem
+
+
 (* Print a space :
    a space is a break hint that prints a single space if the break does not
    split the line;
@@ -1053,6 +1153,9 @@
 and print_flush = pp_print_flush std_formatter
 and print_newline = pp_print_newline std_formatter
 and print_if_newline = pp_print_if_newline std_formatter
+and print_string_if_newline = pp_print_string_if_newline std_formatter
+and print_break_or_string_if_newline = pp_print_break_or_string_if_newline std_formatter
+and print_fits_or_breaks = pp_print_fits_or_breaks std_formatter
 
 and open_tbox = pp_open_tbox std_formatter
 and close_tbox = pp_close_tbox std_formatter
