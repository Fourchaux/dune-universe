
(** This test verifies that the client and server functions generated by the
    IDL interoperate correctly *)

let with_ok f = function
  | Ok r -> f r
  | Error _ -> Alcotest.fail "RPC call failed"

let test_call_lwt _switch () =
  let open Lwt.Infix in

  let server =
    let module Server = Test_common.Test_interface.Interface(Rpc_lwt.GenServer ()) in
    Server.add (fun a b -> Rpc_lwt.M.return (a + b));
    Server.sub (fun a b -> Rpc_lwt.M.return (a - b));
    Server.mul (fun a b -> Rpc_lwt.M.return (a * b));
    Server.div (fun a b -> Rpc_lwt.M.return (a / b));
    Rpc_lwt.server Server.implementation
  in
  let rpc call = server call in
  let module Client = Test_common.Test_interface.Interface(Rpc_lwt.GenClient()) in
  let t =
    Client.add rpc 1 3 |> Rpc_lwt.M.lwt >>=
    with_ok (fun n -> Alcotest.(check int) "add" 4 n |> Lwt.return) >>= fun () ->
    Client.sub rpc 1 3 |> Rpc_lwt.M.lwt >>=
    with_ok (fun n -> Alcotest.(check int) "sub" (-2) n |> Lwt.return) >>= fun () ->
    Client.mul rpc 2 3 |> Rpc_lwt.M.lwt >>=
    with_ok (fun n -> Alcotest.(check int) "mul" 6 n |> Lwt.return) >>= fun () ->
    Client.div rpc 8 2 |> Rpc_lwt.M.lwt >>=
    with_ok (fun n -> Alcotest.(check int) "div" 4 n |> Lwt.return)
  in
  t

let tests =
  [ Alcotest_lwt.test_case "test_call_lwt" `Quick test_call_lwt
  ]
