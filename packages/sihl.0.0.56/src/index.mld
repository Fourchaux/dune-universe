{0 Sihl}

Sihl is a framework for building applications with {{:https://ocaml.org/} OCaml} and {{:https://reasonml.github.io/} Reason}.

Check out the {{:#tutorial} tutorial} to get started.

{1 Overview}

Following section outlines the design goals, features and main ingredients of Sihl.

{2 Design goals}

Following five design goals guide Sihl's development.

{3 Developer happiness}
The overarching goal is to maximize developer happiness. We think it is crucial to like the tools that we use.

{3 Sustainable speed of development}
This goal is about minimizing the gap between early speed of development and long-term maintanability. Combine functional programming, strict static typing and a modular architecture to quickly build systems that you are not afraid to touch.
Thanks to the fast compiler, incremental build time is measured in milliseconds. Run your tests often and quickly. Omit type declarations while prototyping and let the compiler infer the types for you. Once the APIs settle, the compiler infers interfaces.

{3 Composability}
Apart from a tiny core that deals with dependency injection, everything is built using services and plain functions, even built-in in features. Compose your apps by picking functionality, one by one.

{3 Minimization of magic}
Many frameworks rely on complex macros at compile-time or reflection at runtime to offer ergonomic APIs. Sihl tries to minimize this sort of magic by making things explicit.

{3 Sane defaults, powerful customizations}
Sihl provides consistent and sane defaults while allowing for customizations. Get started with your project and fine-tune your BCrypt rounds and database connection pool sizes later.

{2 Features}

Here is a list of some of topics that Sihl is concerned with:

- Data: Connection pooling, migrations, database interaction
- Authentication: JWT, session management, token management
- Web: HTTP, middlewares, cookies, routes, templates, flash messages, JSON API
- Testing: Unit Tests, service tests, End-to-End tests, seeding, Fixtures
- Custom command line commands
- Pagination, sorting & filtering
- Logging
- Email scheduling, bulk email sending
- User management
- Authorization
- Job Queue
- Scheduler
- Block Storage
- Caching
- PDF, XLSX & CSV Export
- Secrets management
- Admin UI

{2 The main ingredients}

The "framework" is not only the code in the GitHub repo, but also documenation, concepts and architecture. Sihl consists of four parts.

{3 Set of libraries}
The OCaml ecosystem has many wonderful libraries that are often wrappers around battle tested C libraries. Sihl provides a consistent API on top with sane defaults for web development. Examples are: base64 encoded random byte generation, JWT encoding/decoding, BCrypt hashing, UUID generation.

{3 Documenation & Best Practices}
This document describes an architecture following principles of Domain-Driven Design. You are free to use any other architecture and to pick the parts of Sihl that you need.

{3 Interfaces and default implementations}
Everything is built using services, even built-in functionality. Sihl provides a set of service interfaces and default implementations for common tasks in web development like email sending, job queues, block storage and migrations. Implementing those interfaces is one of the main ways to extend Sihl.

{3 Tiny core}
To be 100% honest, there is a tiny core that deals with service dependency injection and life cycle management. But that's it, everything else is using that mechanism to provide its functionality!
// TODO link to source of tiny core as a proof

{1 Installation}
{2 opam}

Install opam according to {{:https://opam.ocaml.org/doc/Install.html} this}.

Sihl has not been released to OPAM yet, we plan to release it in the coming days.

Run {!opam install sihl}.

TODO Provide starter skeleton as git repo

{2 esy}
TODO

{2 nix}
TODO

{1 Tutorial}

TODO

{2 1. Your first Sihl app}

- introduce folder structure
- separating http/cli from actual application

{2 2. Your first Test}

{2 3. Your first Use Case}
- create test for use case
- create use case, use first
- authz
- in memory repo

{2 4. Your first JSON API}

{2 5. Your first Website}
- add web stuff: site and json endpoint

{2 5. Your first CLI Command}
- add cli interface

{2 6. Your first Migration}
- implement postgresql repo

{2 7. Launch your app ðŸš€}

- production settings
- build dockerfile

{1 Concepts}

On order to navigate the code base of provided Sihl modules and to make most of this documentation, there are some concepts that you need to familiarize yourself with.

{2 Option, Result and Lwt}

Make sure you understand conceptually [Option], [Result] and {{:https://ocsigen.org/lwt/} Lwt}. You should also familiarize yourself with the basic API of those modules.

{3 Option}
TODO vs. null/absence of something

{3 Result}
TODO no exceptions, just result

{3 Lwt}
Sihl uses Lwt to do non-blocking I/O. Because we assume that any I/O might fail, almost every API has nested [Result.t] inside [Lwt.t] like so [('a, 'e) Result.t Lwt.t]. This is in fact so common that Lwt provides a helper module [Lwt_result.t] to ergonomically handle the nested [Result.t].

Since OCaml 4.08.1, the language has built in support for [let*] syntax. This is similar to async/await in other languages like JavaScript. Sihl makes extensive use of this new syntax to flatten Lwt chains. {{:https://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html} This} is a good primer.

This allows us to express domain logic without obfuscating it with noise that is caused by asynchronous operations.

{3 Common patterns}

TODO show common patterns:
- Result.of_option(~error)
- Lwt_result.map_err(...)

{2 Architecture}

TODO show file system

{3 Context }

{3 Use Case }

{3 Service}

{3 Repository}

{3 Model}

{3 Job}

{3 Web & Command Line}

{2 Extending Sihl}

{3 Middleware}

{3 Service}

{1 Web}
{2 Routing}
{2 Middleware}
{2 Cookie}
{2 Session}
{2 Message}
{2 Authentication}
{2 Query}
{2 Template}
{2 CSRF}
{2 Error Handling}
{2 JSON}
{2 JSON Web Token}
{1 Command Line}
{1 Service}
{2 Container}
{2 Context}
{2 Atomicity}
{1 Repository}
{2 Migration}
{2 Query}
{2 Meta Data}
{1 Testing}
{2 Unit Testing}
{2 Use Case & Service Testing}
{2 End-to-End Testing}
{1 Authorization}
{2 Use Guards}
{2 Define Guards}
{1 Email}
{1 Session}
{1 Admin UI}
{1 Block Storage}
{1 Job Queue}
{1 Scheduler}
{1 Cache}
{1 XLSX & CSV}
{1 PDF}
{1 Secret}
{1 Signals}

{1 Recipes}
{2 Add pagination and sorting to a list of things}
{2 Add filtering to a list of things}
{2 Schedule PDF exports}
{2 End-to-End testing "password reset workflow"}
{2 Share moddel business logic with a ReasonReact app}
{2 Create a middleware that measures the request/response time}

{1 Sihl Development}