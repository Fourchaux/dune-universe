version: "0.8.0"
opam-version: "2.0"

homepage: "http://github.com/odis-labs/streaming"
doc: "https://odis-labs.github.io/streaming"
bug-reports: "https://github.com/odis-labs/streaming/issues"
license: "ISC"

authors: [
  "Rizo I <rizo@odis.io>"
]
maintainer: "Rizo I <rizo@odis.io>"
dev-repo: "git+https://github.com/odis-labs/streaming.git"

synopsis: "Fast, safe and composable streaming abstractions"
description: """
Streaming abstractions that combine, transform and reduce large amounts of
sequential data efficiently, in constant space and without leaking resources.

Streaming uses composable stream producers (sources), consumers (sinks) and
transformers (flows).

The following features are provided:

- Constant memory usage: large or infinite streams can be computed in constant
  and small space. Buffering of the input is possible when needed.
- Excellent performance: all models were designed with performance at the
  core. See https://github.com/rizo/streams-bench for detailed
  comparison with other libraries.
- Resource safety: resources in effectful streaming pipelines are allocated
  lazily and released as early as possible. Resources are guaranteed to
  be terminated even when streams rise exceptions.
- Flexibility: both push-based and pull-based models are implemented to
  allow efficient zipping, concatenation and other streaming operations.
- Streaming notation: build streams and sinks using a convenient
  comprehension and applicative notations.
"""

depends: [
  "stdlib-shims"
  "dune" {>= "2.0"}
  "ocaml" {>= "4.08.0"}
]

build: [
  ["dune" "build" "-p" name "-j" jobs "@install" "@doc" {with-doc}]
]