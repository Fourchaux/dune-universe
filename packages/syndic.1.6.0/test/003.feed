<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><icon>http://ocaml.org/img/colour-icon-170x148.png</icon><generator uri="https://github.com/Cumulus/Syndic" version="1.5.3">OCaml Syndic.Atom feed aggregator</generator><id>urn:md5:e2c5927f3df44fc0bd421461cdd8e422</id><title type="text">OCaml Planet</title><updated>2019-01-18T16:02:45-00:00</updated><entry><source><updated>2019-01-18T16:02:45-00:00</updated><rights type="text">Copyright 2019 OCaml Forge</rights><link title="OCaml Forge Project News" type="text/html" href="http://forge.ocamlcore.org/news/" rel="related"/><link title="OCaml Forge Project News" type="application/rss+xml" href="http://forge.ocamlcore.org/export/rss20_news.php" rel="self"/><generator>OCaml Forge RSS generator</generator><id>http://forge.ocamlcore.org/news/</id><title type="text">OCaml Forge Project News</title><author><name>OCamlCore Forge News</name></author></source><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=966" rel="alternate"/><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=966" rel="related"/><content xml:base="http://forge.ocamlcore.org/export/rss20_news.php" type="html">As part of the deprecation plan for forge.ocamlcore.org, the ability to upload files to the forge will soon be deprecated. Projects will not have the ability to create new releases.

I will keep the current uploaded files and will continue to serve them.

Here is what will change, once the deprecation will be done:
- files will be moved to a new static host: https://download.ocamlcore.org
- all links in the &amp;quot;Files&amp;quot; section will point to an URL https://download.ocamlcore.org
- statistics about number of downloads for files will be removed everywhere on the site
- redirection from old URL to new ones will be maintained as a best effort.
- URLs in OPAM will change to point to https://download.ocamlcore.org


</content><id>http://forge.ocamlcore.org/forum/forum.php?forum_id=966</id><title type="text">Deprecating file releases on the forge</title><updated>2019-01-18T16:02:45-00:00</updated><author><email>gildor-admin@users.forge.ocamlcore.org</email><name>Sylvain Le Gall</name></author></entry><entry><source><updated>2019-01-18T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/149.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.9.0&quot;&gt;8.9.0
release of Coq&lt;/a&gt; is available.&lt;/p&gt;

&lt;p&gt;It features many quality-of-life improvements, including goal
differences as well as numeral and custom notations. For details, see the
&lt;a href=&quot;https://github.com/coq/coq/blob/V8.9.0/CHANGES.md&quot;&gt;CHANGES&lt;/a&gt;
file.&lt;/p&gt;

&lt;p&gt;Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug
reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;

 </content><id>https://coq.inria.fr/news/149.html</id><title type="text">Coq 8.9.0 is out</title><updated>2019-01-18T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2019/01/15/improving-tezos-storage/" rel="alternate"/><link href="http://www.ocamlpro.com/2019/01/15/improving-tezos-storage/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;Running a Tezos node currently costs a lot of disk space, about 59 GB for the context database, the place where the node stores the states corresponding to every block in the blockchain, since the first one. Of course, this is going to decrease once garbage collection is integrated, i.e. removing very old information, that is not used and cannot change anymore (&lt;a href=&quot;https://gitlab.com/tezos/tezos/merge_requests/720#note_125296853&quot;&gt;PR720&lt;/a&gt;Â by Thomas Gazagnaire, Tarides, some early tests show a decrease to 14GB ,but with no performance evaluation). As a side note, this is different from pruning, i.e. transmitting only the last cycles for &amp;#8220;light&amp;#8221; nodes (&lt;a href=&quot;https://gitlab.com/tezos/tezos/merge_requests/663&quot;&gt;PR663&lt;/a&gt; by Thomas Blanc, OCamlPro). Anyway, as Tezos will be used more and more, contexts will keep growing, and we need to keep decreasing the space and performance cost of Tezos storage.&lt;/p&gt;
&lt;p&gt;As one part of our activity at OCamlPro is to allow companies to deploy their own private Tezos networks, we decided to experiment with new storage layouts. We implemented two branches: our branch &lt;code&gt;IronTez1&lt;/code&gt; is based on a full LMDB database, as Tezos currently, but with optimized storage representation ; our branch &lt;code&gt;IronTez2&lt;/code&gt; is based on a mixed database, with both LMDB and file storage.&lt;/p&gt;
&lt;p&gt;To test these branches, we started a node from scratch, and recorded all the accesses to the context database, to be able to replay it with our new experimental nodes. The node took about 12 hours to synchronize with the network, on which about 3 hours were used to write and read in the context database. We then replayed the trace, either only the writes or with both reads and writes.&lt;/p&gt;
&lt;p&gt;Here are the results:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-1391&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_sizes.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_sizes.png 1024w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_sizes-300x225.png 300w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_sizes-768x576.png 768w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_sizes-285x214.png 285w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The mixed storage is the most interesting: it uses half the storage of a standard Tezos node !&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-1394&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_times-1.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_times-1.png 1024w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_times-1-300x225.png 300w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_times-1-768x576.png 768w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_times-1-285x214.png 285w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Again, the mixed storage is the most efficient : even with reads and writes, &lt;code&gt;IronTez2&lt;/code&gt; is five time faster than the current Tezos storage.&lt;/p&gt;
&lt;p&gt;Finally, here is a graph that shows the impact of the two attacks that happened in November 2018, and how it can be mitigated by storage improvement:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-1395&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_diffs.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_diffs.png 1024w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_diffs-300x225.png 300w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_diffs-768x576.png 768w, http://www.ocamlpro.com/wp-content/uploads/2019/01/plot_diffs-285x214.png 285w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The graph shows that, using mixed storage, it is possible to restore the storage growth of Tezos to what it was before the attack !&lt;/p&gt;
&lt;p&gt;Interestingly, although these experiments have been done on full traces, our branches are completely backward-compatible : they could be used on an already existing database, to store the new contexts in our optimized format, while keeping the old data in the ancient format.&lt;/p&gt;
&lt;p&gt;Of course, there is still a lot of work to do, before this work is finished. We think that there are still more optimizations that are possible, and we need to test our branches on running nodes for some time to get confidence (TzScan might be the first tester !), but this is a very encouraging work for the future of Tezos !&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1390</id><title type="text">Improving Tezos Storage</title><updated>2019-01-15T17:01:24-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2019-01-03T00:00:00-00:00</published><link href="https://tarides.com/blog.html#2019-01-03-how-configurator-reads-c-constants" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;Dune comes with a library to query OS-specific information, called configurator.
It is able to evaluate C expressions and turn them into OCaml value.
Surprisingly, it even works when compiling for a different architecture. How can
it do that?&lt;/p&gt;
</content><id>https://tarides.com/blog.html#2019-01-03-how-configurator-reads-c-constants</id><title type="text">How configurator reads C constants</title><updated>2019-01-03T00:00:00-00:00</updated><author><name>Etienne M.</name></author></entry><entry><source><updated>2019-01-10T19:55:14-00:00</updated><link href="http://roscidus.com/blog/" rel="alternate"/><link href="http://roscidus.com/blog/blog/categories/ocaml/atom.xml" rel="self"/><generator uri="http://octopress.org/">Octopress</generator><id>http://roscidus.com/blog/</id><title type="text">Category: ocaml | Thomas Leonard's blog</title><author><name>Thomas Leonard</name></author></source><link href="http://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan/" rel="alternate"/><content xml:base="http://roscidus.com/blog/blog/categories/ocaml/atom.xml" type="html">&lt;p&gt;The vchan protocol is used to stream data between virtual machines on a Xen host without needing any locks.
It is largely undocumented.
The TLA Toolbox is a set of tools for writing and checking specifications.
In this post, Iâll describe my experiences using these tools to understand how the vchan protocol works.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#qubes-and-the-vchan-protocol&quot;&gt;Qubes and the vchan protocol&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tla&quot;&gt;TLA+&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#is-tla-useful&quot;&gt;Is TLA useful?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-tla-concepts&quot;&gt;Basic TLA concepts&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#variables-states-and-behaviour&quot;&gt;Variables, states and behaviour&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#actions&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#correctness-of-spec&quot;&gt;Correctness of Spec&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-model-checker&quot;&gt;The model checker&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-real-vchan&quot;&gt;The real vchan&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-algorithm&quot;&gt;The algorithm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing-the-full-spec&quot;&gt;Testing the full spec&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#some-odd-things&quot;&gt;Some odd things&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#why-does-vchan-work&quot;&gt;Why does vchan work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#proving-integrity&quot;&gt;Proving Integrity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#availability&quot;&gt;Availability&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#experiences-with-tlaps&quot;&gt;Experiences with TLAPS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-final-specification&quot;&gt;The final specification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-original-bug&quot;&gt;The original bug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://www.reddit.com/r/tlaplus/comments/abi3oz/using_tla_to_understand_xen_vchan/&quot;&gt;Reddit&lt;/a&gt;, &lt;a href=&quot;https://news.ycombinator.com/item?id=18814350&quot;&gt;Hacker News&lt;/a&gt;
and &lt;a href=&quot;https://lobste.rs/s/a5zer2/using_tla_understand_xen_vchan&quot;&gt;Lobsters&lt;/a&gt; )&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;h3 id=&quot;qubes-and-the-vchan-protocol&quot;&gt;Qubes and the vchan protocol&lt;/h3&gt;

&lt;p&gt;I run &lt;a href=&quot;https://www.qubes-os.org/&quot;&gt;QubesOS&lt;/a&gt; on my laptop.
A QubesOS desktop environment is made up of multiple virtual machines.
A privileged VM, called dom0, provides the desktop environment and coordinates the other VMs.
dom0 doesnât have network access, so you have to use other VMs for doing actual work.
For example, I use one VM for email and another for development work (these are called âapplication VMsâ).
There is another VM (called sys-net) that connects to the physical network, and
yet another VM (sys-firewall) that connects the application VMs to net-vm.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;http://roscidus.com/blog/images/qubes/qubes-desktop.png&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;My QubesOS desktop. The windows with blue borders are from my Debian development VM, while the green one is from a Fedora VM, etc.&quot; /&gt;&lt;span class=&quot;caption-text&quot;&gt;My QubesOS desktop. The windows with blue borders are from my Debian development VM, while the green one is from a Fedora VM, etc.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The default sys-firewall is based on Fedora Linux.
A few years ago, &lt;a href=&quot;http://roscidus.com/blog/blog/2016/01/01/a-unikernel-firewall-for-qubesos/&quot;&gt;I replaced sys-firewall with a MirageOS unikernel&lt;/a&gt;.
MirageOS is written in OCaml, and has very little C code (unlike Linux).
It boots much faster and uses much less RAM than the Fedora-based VM.
But recently, a user reported that &lt;a href=&quot;https://github.com/mirage/mirage-qubes/issues/25&quot;&gt;restarting mirage-firewall was taking a very long time&lt;/a&gt;.
The problem seemed to be that it was taking several minutes to transfer the information about the network configuration to the firewall.
This is sent over vchan.
The user reported that stracing the QubesDB process in dom0 revealed that it was sleeping for 10 seconds
between sending the records, suggesting that a wakeup event was missing.&lt;/p&gt;

&lt;p&gt;The lead developer of QubesOS said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Iâd guess missing evtchn trigger after reading/writing data in vchan.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perhaps &lt;a href=&quot;https://github.com/mirage/ocaml-vchan&quot;&gt;ocaml-vchan&lt;/a&gt;, the OCaml implementation of vchan, wasnât implementing the vchan specification correctly?
I wanted to check, but there was a problem: there was no vchan specification.&lt;/p&gt;

&lt;p&gt;The Xen wiki lists vchan under &lt;a href=&quot;https://wiki.xenproject.org/wiki/Xen_Document_Days/TODO#Documentation_on_lib.28xen.29vchan&quot;&gt;Xen Document Days/TODO&lt;/a&gt;.
The &lt;a href=&quot;https://xenbits.xen.org/gitweb/?p=xen.git;a=commit;h=1a16a3351ff2f2cf9f0cc0a27c89a0652eb8dfb4&quot;&gt;initial Git commit&lt;/a&gt; on 2011-10-06 said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;libvchan: interdomain communications library&lt;/p&gt;

  &lt;p&gt;This library implements a bidirectional communication interface between
applications in different domains, similar to unix sockets. Data can be
sent using the byte-oriented &lt;code&gt;libvchan_read&lt;/code&gt;/&lt;code&gt;libvchan_write&lt;/code&gt; or the
packet-oriented &lt;code&gt;libvchan_recv&lt;/code&gt;/&lt;code&gt;libvchan_send&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;Channel setup is done using a client-server model; domain IDs and a port
number must be negotiated prior to initialization. The server allocates
memory for the shared pages and determines the sizes of the
communication rings (which may span multiple pages, although the default
places rings and control within a single page).&lt;/p&gt;

  &lt;p&gt;With properly sized rings, testing has shown that this interface
provides speed comparable to pipes within a single Linux domain; it is
significantly faster than network-based communication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I looked in the xen-devel mailing list around this period in case the reviewers had asked about how it worked.&lt;/p&gt;

&lt;p&gt;One reviewer &lt;a href=&quot;https://lists.xenproject.org/archives/html/xen-devel/2011-08/msg00874.html&quot;&gt;suggested&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please could you say a few words about the functionality this new
library enables and perhaps the design etc? In particular a protocol
spec would be useful for anyone who wanted to reimplement for another
guest OS etc. [â¦]
I think it would be appropriate to add protocol.txt at the same time as
checking in the library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, the submitter pointed out that this was unnecessary, saying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The comments in the shared header file explain the layout of the shared
memory regions; any other parts of the protocol are application-defined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, ordinarily, I wouldnât be much interested in spending my free time
tracking down race conditions in 3rd-party libraries for the benefit of
strangers on the Internet. However, I did want to have another play with TLAâ¦&lt;/p&gt;

&lt;h3 id=&quot;tla&quot;&gt;TLA+&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://lamport.azurewebsites.net/tla/tla.html&quot;&gt;TLA+&lt;/a&gt; is a language for specifying algorithms.
It can be used for many things, but it is particularly designed for stateful parallel algorithms.&lt;/p&gt;

&lt;p&gt;I learned about TLA while working at Docker.
Docker EE provides software for managing large clusters of machines.
It includes various orchestrators (SwarmKit, Kubernetes and Swarm Classic) and
a web UI.
Ensuring that everything works properly is very important, and to this end
a large collection of tests had been produced.
Part of my job was to run these tests.
You take a test from a list in a web UI and click whatever buttons it tells you to click,
wait for some period of time,
and then check that what you see matches what the test says you should see.
There were a lot of these tests, and they all had to be repeated on every
supported platform, and for every release, release candidate or preview release.
There was a lot of waiting involved and not much thinking required, so to keep
my mind occupied, I started reading the TLA documentation.&lt;/p&gt;

&lt;p&gt;I read &lt;a href=&quot;https://lamport.azurewebsites.net/tla/hyperbook.html&quot;&gt;The TLA+ Hyperbook&lt;/a&gt; and &lt;a href=&quot;https://lamport.azurewebsites.net/tla/book.html&quot;&gt;Specifying Systems&lt;/a&gt;.
Both are by Leslie Lamport (the creator of TLA), and are freely available online.
Theyâre both very easy to read.
The hyperbook introduces the tools right away so you can start playing, while
Specifying Systems starts with more theory and discusses the tools later.
I think itâs worth reading both.&lt;/p&gt;

&lt;p&gt;Once Docker EE 2.0 was released,
we engineers were allowed to spend a week on whatever fun (Docker-related) project we wanted.
I used the time to read the SwarmKit design documents and make a TLA model of that.
I felt that using TLA prompted useful discussions with the SwarmKit developers
(which can see seen in the &lt;a href=&quot;https://github.com/docker/swarmkit/pull/2613&quot;&gt;pull request&lt;/a&gt; comments).&lt;/p&gt;

&lt;p&gt;A specification document can answer questions such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What does it do? (requirements / properties)&lt;/li&gt;
  &lt;li&gt;How does it do it? (the algorithm)&lt;/li&gt;
  &lt;li&gt;Does it work? (model checking)&lt;/li&gt;
  &lt;li&gt;Why does it work? (inductive invariant)&lt;/li&gt;
  &lt;li&gt;Does it &lt;em&gt;really&lt;/em&gt; work? (proofs)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You donât have to answer all of them to have a useful document,
but I will try to answer each of them for vchan.&lt;/p&gt;

&lt;h2 id=&quot;is-tla-useful&quot;&gt;Is TLA useful?&lt;/h2&gt;

&lt;p&gt;In my (limited) experience with TLA, whenever I have reached the end of a specification
(whether reading it or writing it), I always find myself thinking âWell, that was obvious.
It hardly seems worth writing a spec for that!â.
You might feel the same after reading this blog post.&lt;/p&gt;

&lt;p&gt;To judge whether TLA is useful, I suggest you take a few minutes to look at the code.
If you are good at reading C code then you might find, like the Xen reviewers,
that it is quite obvious what it does, how it works, and why it is correct.
Or, like me, you might find youâd prefer a little help.
You might want to jot down some notes about it now, to see whether you learn anything new.&lt;/p&gt;

&lt;p&gt;To give the big picture:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Two VMs decide to communicate over vchan. One will be the server and the other the client.&lt;/li&gt;
  &lt;li&gt;The server allocates three chunks of memory: one to hold data in transit from the client to
the server, one for data going from server to client, and the third to track information about
the state of the system. This includes counters saying how much data has been written and how
much read, in each direction.&lt;/li&gt;
  &lt;li&gt;The server tells Xen to grant the client access to this memory.&lt;/li&gt;
  &lt;li&gt;The client asks Xen to map the memory into its address space.
Now client and server can both access it at once.
There are no locks in the protocol, so be careful!&lt;/li&gt;
  &lt;li&gt;Either end sends data by writing it into the appropriate buffer and updating the appropriate counter
in the shared block. The buffers are &lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_buffer&quot;&gt;ring buffers&lt;/a&gt;, so after getting to the end, you
start again from the beginning.&lt;/li&gt;
  &lt;li&gt;The data-written (producer) counter and the data-read (consumer) counter together
tell you how much data is in the buffer, and where it is.
When the difference is zero, the reader must stop reading and wait for more data.
When the difference is the size of the buffer, the writer must stop writing and wait for more space.&lt;/li&gt;
  &lt;li&gt;When one end is waiting, the other can signal it using a &lt;a href=&quot;https://wiki.xen.org/wiki/Event_Channel_Internals&quot;&gt;Xen event channel&lt;/a&gt;.
This essentially sets a pending flag to true at the other end, and wakes the VM if it is sleeping.
If a VM tries to sleep while it has an event pending, it will immediately wake up again.
Sending an event when one is already pending has no effect.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=xen/include/public/io/libxenvchan.h;h=44284f437ab30f01049f280035dbb711103ca9b0;hb=HEAD&quot;&gt;public/io/libxenvchan.h&lt;/a&gt; header file provides some information,
including the shared structures and comments about them:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xen/include/public/io/libxenvchan.h &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;48&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ring_shared&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define VCHAN_NOTIFY_WRITE 0x1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define VCHAN_NOTIFY_READ 0x2&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt; * vchan_interface: primary shared data structure&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vchan_interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Standard consumer/producer interface, one pair per buffer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * left is client write, server read&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * right is client read, server write&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ring_shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * size of the rings, which determines their location&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * 10   - at offset 1024 in ring&amp;#39;s page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * 11   - at offset 2048 in ring&amp;#39;s page&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * 12+  - uses 2^(N-12) grants to describe the multi-page ring&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * These should remain constant once the page is shared.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Only one of the two orders can be 10 (or 11).&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Shutdown detection:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  0: client (or server) has exited&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  1: client (or server) is connected&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  2: client has not yet connected&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Notification bits:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  VCHAN_NOTIFY_WRITE: send notify when data is written&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     *  VCHAN_NOTIFY_READ: send notify when data is read (consumed)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * cli_notify is used for the client to inform the server of its action&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * Grant list: ordering is left, right. Must not extend into actual ring&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * or grow beyond the end of the initial shared page.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * These should remain constant once the page is shared, to allow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     * for possible remapping by a client that restarts.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;You might also like to look at &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git;a=tree;f=tools/libvchan;h=44e5af5adacc92511f29d1ab3e1c1037c7ea60fa;hb=HEAD&quot;&gt;the vchan source code&lt;/a&gt;.
Note that the &lt;code&gt;libxenvchan.h&lt;/code&gt; file in this directory includes and extends
the above header file (with the same name).&lt;/p&gt;

&lt;p&gt;For this blog post, we will ignore the Xen-specific business of sharing the memory
and telling the client where it is, and assume that the client has mapped the
memory and is ready to go.&lt;/p&gt;

&lt;h2 id=&quot;basic-tla-concepts&quot;&gt;Basic TLA concepts&lt;/h2&gt;

&lt;p&gt;Weâll take a first look at TLA concepts and notation using a simplified version of vchan.
TLA comes with excellent documentation, so I wonât try to make this a full tutorial,
but hopefully you will be able to follow the rest of this blog post after reading it.
We will just consider a single direction of the channel (e.g. client-to-server) here.&lt;/p&gt;

&lt;h3 id=&quot;variables-states-and-behaviour&quot;&gt;Variables, states and behaviour&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;variable&lt;/em&gt; in TLA is just what a programmer expects: something that changes over time.
For example, Iâll use &lt;code&gt;Buffer&lt;/code&gt; to represent the data currently being transmitted.&lt;/p&gt;

&lt;p&gt;We can also add variables that are just useful for the specification.
I use &lt;code&gt;Sent&lt;/code&gt; to represent everything the sender-side application asked the vchan library to transmit,
and &lt;code&gt;Got&lt;/code&gt; for everything the receiving application has received:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;VARIABLES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A &lt;em&gt;state&lt;/em&gt; in TLA represents a snapshot of the world at some point.
It gives a value for each variable.
For example, &lt;code&gt;{ Got: &quot;H&quot;, Buffer: &quot;i&quot;, Sent: &quot;Hi&quot;, ... }&lt;/code&gt; is a state.
The &lt;code&gt;...&lt;/code&gt; is just a reminder that a state also includes everything else in the world,
not just the variables we care about.&lt;/p&gt;

&lt;p&gt;Here are some more states:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;State&lt;/th&gt;
      &lt;th&gt;Got&lt;/th&gt;
      &lt;th&gt;Buffer&lt;/th&gt;
      &lt;th&gt;Sent&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;s0&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s1&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s2&lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s3&lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s4&lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s5&lt;/td&gt;
      &lt;td&gt;iH&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A &lt;em&gt;behaviour&lt;/em&gt; is a sequence of states, representing some possible history of the world.
For example, &lt;code&gt;&amp;lt;&amp;lt; s0, s1, s2, s3, s4 &amp;gt;&amp;gt;&lt;/code&gt; is a behaviour.
So is &lt;code&gt;&amp;lt;&amp;lt; s0, s1, s5 &amp;gt;&amp;gt;&lt;/code&gt;, but not one we want.
The basic idea in TLA is to specify precisely which behaviours we want and which we donât want.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;state expression&lt;/em&gt; is an expression that can be evaluated in the context of some state.
For example, this defines &lt;code&gt;Integrity&lt;/code&gt; to be a state expression that is true whenever what we have got
so far matches what we wanted to send:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* Take(m, i) is just the first i elements of message m. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubSeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* Everything except the first i elements of message m. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubSeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Integrity&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Integrity&lt;/code&gt; is true for all the states above except for &lt;code&gt;s5&lt;/code&gt;.
I added some helper operators &lt;code&gt;Take&lt;/code&gt; and &lt;code&gt;Drop&lt;/code&gt; here.
Sequences in TLA+ can be confusing because they are indexed from 1 rather than from 0,
so it is easy to make off-by-one errors.
These operators just use lengths, which we can all agree on.
In Python syntax, it would be written something like:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Integrity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A &lt;em&gt;temporal formula&lt;/em&gt; is an expression that is evaluated in the context of a complete behaviour.
It can use the temporal operators, which include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;[]&lt;/code&gt; (thatâs supposed to look like a square) : âalwaysâ&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; (thatâs supposed to look like a diamond) : âeventuallyâ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;[] F&lt;/code&gt; is true if the expression &lt;code&gt;F&lt;/code&gt; is true at &lt;em&gt;every&lt;/em&gt; point in the behaviour.
&lt;code&gt;&amp;lt;&amp;gt; F&lt;/code&gt; is true if the expression &lt;code&gt;F&lt;/code&gt; is true at &lt;em&gt;any&lt;/em&gt; point in the behaviour.&lt;/p&gt;

&lt;p&gt;Messages we send should eventually arrive.
Hereâs one way to express that:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;TLA syntax is a bit odd. Itâs rather like LaTeX (which is not surprising: Lamport is also the âLaâ in LaTeX).
&lt;code&gt;\A&lt;/code&gt; means âfor allâ (rendered as an upside-down A).
So this says that for every number &lt;code&gt;x&lt;/code&gt;, it is always true that if we have sent &lt;code&gt;x&lt;/code&gt; bytes then
eventually we will have received at least &lt;code&gt;x&lt;/code&gt; bytes.&lt;/p&gt;

&lt;p&gt;This pattern of &lt;code&gt;[] (F =&amp;gt; &amp;lt;&amp;gt;G)&lt;/code&gt; is common enough that it has a shorter notation of &lt;code&gt;F ~&amp;gt; G&lt;/code&gt;, which
is read as âF (always) leads to Gâ. So, &lt;code&gt;Availability&lt;/code&gt; can also be written as:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Weâre only checking the lengths in &lt;code&gt;Availability&lt;/code&gt;, but combined with &lt;code&gt;Integrity&lt;/code&gt; thatâs enough to ensure
that we eventually receive what we want.
So ideally, weâd like to ensure that every possible behaviour of the vchan library will satisfy
the temporal formula &lt;code&gt;Properties&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integrity&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;/\&lt;/code&gt; is âandâ by the way, and &lt;code&gt;\/&lt;/code&gt; is âorâ.
I did eventually start to be able to tell one from the other, though I still think &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; would be easier.
In case I forget to explain some syntax, &lt;a href=&quot;https://lamport.azurewebsites.net/tla/summary.pdf&quot;&gt;A Summary of TLA&lt;/a&gt; lists most of it.&lt;/p&gt;

&lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt;

&lt;p&gt;It is hopefully easy to see that &lt;code&gt;Properties&lt;/code&gt; defines properties we want.
A user of vchan would be happy to see that these are things they can rely on.
But they donât provide much help to someone trying to implement vchan.
For that, TLA provides another way to specify behaviours.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;action&lt;/em&gt; in TLA is an expression that is evaluated in the context of a pair of states,
representing a single atomic step of the system.
For example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Read&lt;/code&gt; action is true of a step if that step transfers all the data from &lt;code&gt;Buffer&lt;/code&gt; to &lt;code&gt;Got&lt;/code&gt;.
Unprimed variables (e.g. &lt;code&gt;Buffer&lt;/code&gt;) refer to the current state and primed ones (e.g. &lt;code&gt;Buffer'&lt;/code&gt;)
refer to the next state.
Thereâs some more strange notation here too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Weâre using &lt;code&gt;/\&lt;/code&gt; to form a bulleted list here rather than as an infix operator.
This is indentation-sensitive. TLA also supports &lt;code&gt;\/&lt;/code&gt; lists in the same way.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\o&lt;/code&gt; is sequence concatenation (&lt;code&gt;+&lt;/code&gt; in Python).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt; is the empty sequence (&lt;code&gt;[ ]&lt;/code&gt; in Python).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UNCHANGED Sent&lt;/code&gt; means &lt;code&gt;Sent' = Sent&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Python, it might look like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; \
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; \
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; \
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Actions correspond more closely to code than temporal formulas,
because they only talk about how the next state is related to the current one.&lt;/p&gt;

&lt;p&gt;This action only allows one thing: reading the whole buffer at once.
In the C implementation of vchan the receiving application can provide a buffer of any size
and the library will read at most enough bytes to fill the buffer.
To model that, we will need a slightly more flexible version:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This says that a step is a &lt;code&gt;Read&lt;/code&gt; step if there is any &lt;code&gt;n&lt;/code&gt; (in the range 1 to the length of the buffer)
such that we transferred &lt;code&gt;n&lt;/code&gt; bytes from the buffer. &lt;code&gt;\E&lt;/code&gt; means âthere exists â¦â.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Write&lt;/code&gt; action can be defined in a similar way:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;CONSTANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;CONSTANT&lt;/code&gt; defines a parameter (input) of the specification
(itâs constant in the sense that it doesnât change between states).
A &lt;code&gt;Write&lt;/code&gt; operation adds some message &lt;code&gt;m&lt;/code&gt; to the buffer, and also adds a copy of it to &lt;code&gt;Sent&lt;/code&gt;
so we can talk about what the system is doing.
&lt;code&gt;Seq(Byte)&lt;/code&gt; is the set of all possible sequences of bytes,
and &lt;code&gt;\ {&amp;lt;&amp;lt; &amp;gt;&amp;gt;}&lt;/code&gt; just excludes the empty sequence.&lt;/p&gt;

&lt;p&gt;A step of the combined system is either a &lt;code&gt;Read&lt;/code&gt; step or a &lt;code&gt;Write&lt;/code&gt; step:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We also need to define what a valid starting state for the algorithm looks like:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can put all this together to get a temporal formula for the algorithm:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Some more notation here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;[Next]_vars&lt;/code&gt; (thatâs &lt;code&gt;Next&lt;/code&gt; in brackets with a subscript &lt;code&gt;vars&lt;/code&gt;) means
&lt;code&gt;Next \/ UNCHANGED vars&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Using &lt;code&gt;Init&lt;/code&gt; (a state expression) in a temporal formula means it must be
true for the &lt;em&gt;first&lt;/em&gt; state of the behaviour.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[][Action]_vars&lt;/code&gt; means that &lt;code&gt;[Action]_vars&lt;/code&gt; must be true for each step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TLA syntax requires the &lt;code&gt;_vars&lt;/code&gt; subscript here.
This is because other things can be going on in the world beside our algorithm,
so it must always be possible to take a step without our algorithm doing anything.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Spec&lt;/code&gt; defines behaviours just like &lt;code&gt;Properties&lt;/code&gt; does,
but in a way that makes it more obvious how to implement the protocol.&lt;/p&gt;

&lt;h3 id=&quot;correctness-of-spec&quot;&gt;Correctness of Spec&lt;/h3&gt;

&lt;p&gt;Now we have definitions of &lt;code&gt;Spec&lt;/code&gt; and &lt;code&gt;Properties&lt;/code&gt;,
it makes sense to check that every behaviour of &lt;code&gt;Spec&lt;/code&gt; satisfies &lt;code&gt;Properties&lt;/code&gt;.
In Python terms, we want to check that all behaviours &lt;code&gt;b&lt;/code&gt; satisfy this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpecOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;i.e. either &lt;code&gt;b&lt;/code&gt; isnât a behaviour that could result from the actions of our algorithm or,
if it is, it satisfies &lt;code&gt;Properties&lt;/code&gt;. In TLA notation, we write this as:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;SpecOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Itâs OK if a behaviour is allowed by &lt;code&gt;Properties&lt;/code&gt; but not by &lt;code&gt;Spec&lt;/code&gt;.
For example, the behaviour which goes straight from &lt;code&gt;Got=&quot;&quot;, Sent=&quot;&quot;&lt;/code&gt; to
&lt;code&gt;Got=&quot;Hi&quot;, Sent=&quot;Hi&quot;&lt;/code&gt; in one step meets our requirements, but itâs not a
behaviour of &lt;code&gt;Spec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The real implementation may itself further restrict &lt;code&gt;Spec&lt;/code&gt;.
For example, consider the behaviour &lt;code&gt;&amp;lt;&amp;lt; s0, s1, s2 &amp;gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;State&lt;/th&gt;
      &lt;th&gt;Got&lt;/th&gt;
      &lt;th&gt;Buffer&lt;/th&gt;
      &lt;th&gt;Sent&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;s0&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s1&lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s2&lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
      &lt;td&gt;Â &lt;/td&gt;
      &lt;td&gt;Hi&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The sender sends two bytes at once, but the reader reads them one at a time.
This &lt;em&gt;is&lt;/em&gt; a behaviour of the C implementation,
because the reading application can ask the library to read into a 1-byte buffer.
However, it is &lt;em&gt;not&lt;/em&gt; a behaviour of the OCaml implementation,
which gets to choose how much data to return to the application and will return both bytes together.&lt;/p&gt;

&lt;p&gt;Thatâs fine.
We just need to show that &lt;code&gt;OCamlImpl =&amp;gt; Spec&lt;/code&gt; and &lt;code&gt;Spec =&amp;gt; Properties&lt;/code&gt; and we can deduce that
&lt;code&gt;OCamlImpl =&amp;gt; Properties&lt;/code&gt;.
This is, of course, the key purpose of a specification:
we only need to check that each implementation implements the specification,
not that each implementation directly provides the desired properties.&lt;/p&gt;

&lt;p&gt;It might seem strange that an implementation doesnât have to allow all the specified behaviours.
In fact, even the trivial specification &lt;code&gt;Spec == FALSE&lt;/code&gt; is considered to be a correct implementation of &lt;code&gt;Properties&lt;/code&gt;,
because it has no bad behaviours (no behaviours at all).
But thatâs OK.
Once the algorithm is running, it must have &lt;em&gt;some&lt;/em&gt; behaviour, even if that behaviour is to do nothing.
As the user of the library, you are responsible for checking that you can use it
(e.g. by ensuring that the &lt;code&gt;Init&lt;/code&gt; conditions are met).
An algorithm without any behaviours corresponds to a library you could never use,
not to one that goes wrong once it is running.&lt;/p&gt;

&lt;h3 id=&quot;the-model-checker&quot;&gt;The model checker&lt;/h3&gt;

&lt;p&gt;Now comes the fun part: we can ask TLC (the TLA model checker) to check that &lt;code&gt;Spec =&amp;gt; Properties&lt;/code&gt;.
You do this by asking the toolbox to create a new model (I called mine &lt;code&gt;SpecOK&lt;/code&gt;) and setting &lt;code&gt;Spec&lt;/code&gt; as the
âbehaviour specâ. It will prompt for a value for &lt;code&gt;BufferSize&lt;/code&gt;. I used &lt;code&gt;2&lt;/code&gt;.
There will be various things to fix up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To check &lt;code&gt;Write&lt;/code&gt;, TLC first tries to get every possible &lt;code&gt;Seq(Byte)&lt;/code&gt;, which is an infinite set.
I defined &lt;code&gt;MSG == Seq(Byte)&lt;/code&gt; and changed &lt;code&gt;Write&lt;/code&gt; to use &lt;code&gt;MSG&lt;/code&gt;.
I then added an alternative definition for &lt;code&gt;MSG&lt;/code&gt; in the model so that we only send messages of limited length.
In fact, my replacement &lt;code&gt;MSG&lt;/code&gt; ensures that &lt;code&gt;Sent&lt;/code&gt; will always just be an incrementing sequence (&lt;code&gt;&amp;lt;&amp;lt; 1, 2, 3, ... &amp;gt;&amp;gt;&lt;/code&gt;).
Thatâs enough to check &lt;code&gt;Properties&lt;/code&gt;, and much quicker than checking every possible message.&lt;/li&gt;
  &lt;li&gt;The system can keep sending forever. I added a state constraint to the model: &lt;code&gt;Len(Sent) &amp;lt; 4&lt;/code&gt;
This tells TLC to stop considering any execution once this becomes false.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that, the model runs successfully.
This is a nice feature of TLA: instead of changing our specification to make it testable,
we keep the specification correct and just override some aspects of it in the model.
So, the specification says we can send any message, but the model only checks a few of them.&lt;/p&gt;

&lt;p&gt;Now we can add &lt;code&gt;Integrity&lt;/code&gt; as an invariant to check.
That passes, but itâs good to double-check by changing the algorithm.
I changed &lt;code&gt;Read&lt;/code&gt; so that it doesnât clear the buffer, using &lt;code&gt;Buffer' = Drop(Buffer, 0)&lt;/code&gt;
(with &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;n&lt;/code&gt;).
Then TLC reports a counter-example (âInvariant Integrity is violatedâ):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The sender writes &lt;code&gt;&amp;lt;&amp;lt; 1, 2 &amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Buffer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The reader reads one byte, to give &lt;code&gt;Got=1, Buffer=12, Sent=12&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The reader reads another byte, to give &lt;code&gt;Got=11, Buffer=12, Sent=12&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looks like it really was checking what we wanted.
Itâs good to be careful. If weâd accidentally added &lt;code&gt;Integrity&lt;/code&gt; as a âpropertyâ to check rather than
as an âinvariantâ then it would have interpreted it as a temporal formula and reported success just because
it &lt;em&gt;is&lt;/em&gt; true in the &lt;em&gt;initial&lt;/em&gt; state.&lt;/p&gt;

&lt;p&gt;One really nice feature of TLC is that (unlike a fuzz tester) it does a breadth-first search and therefore
finds minimal counter-examples for invariants.
The example above is therefore the quickest way to violate &lt;code&gt;Integrity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Checking &lt;code&gt;Availability&lt;/code&gt; complains because of the use of &lt;code&gt;Nat&lt;/code&gt; (weâre asking it to check for every possible
length).
I replaced the &lt;code&gt;Nat&lt;/code&gt; with &lt;code&gt;AvailabilityNat&lt;/code&gt; and overrode that to be &lt;code&gt;0..4&lt;/code&gt; in the model.
It then complains âTemporal properties were violatedâ and shows an example where the sender wrote
some data and the reader never read it.&lt;/p&gt;

&lt;p&gt;The problem is, &lt;code&gt;[Next]_vars&lt;/code&gt; always allows us to do nothing.
To fix this, we can specify a âweak fairnessâ constraint.
&lt;code&gt;WF_vars(action)&lt;/code&gt;, says that we canât just stop forever with &lt;code&gt;action&lt;/code&gt; being always possible but never happening.
I updated &lt;code&gt;Spec&lt;/code&gt; to require the &lt;code&gt;Read&lt;/code&gt; action to be fair:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WF_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Again, care is needed here.
If we had specified &lt;code&gt;WF_vars(Next)&lt;/code&gt; then we would be forcing the sender to keep sending forever, which users of vchan are not required to do.
Worse, this would mean that every possible behaviour of the system would result in &lt;code&gt;Sent&lt;/code&gt; growing forever.
Every behaviour would therefore hit our &lt;code&gt;Len(Sent) &amp;lt; 4&lt;/code&gt; constraint and
TLC wouldnât consider it further.
That means that TLC would &lt;em&gt;never&lt;/em&gt; check any actual behaviour against &lt;code&gt;Availability&lt;/code&gt;,
and its reports of success would be meaningless!
Changing &lt;code&gt;Read&lt;/code&gt; to require &lt;code&gt;n \in 2..Len(Buffer)&lt;/code&gt; is a quick way to see that TLC is actually checking &lt;code&gt;Availability&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hereâs the complete spec so far: &lt;a href=&quot;http://roscidus.com/blog/images/tla/vchan1.pdf&quot;&gt;vchan1.pdf&lt;/a&gt; (&lt;a href=&quot;https://github.com/talex5/spec-vchan/commit/75a846d5c83d86ba7be42b5c3b9f98635bcc544d&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;the-real-vchan&quot;&gt;The real vchan&lt;/h2&gt;

&lt;p&gt;The simple &lt;code&gt;Spec&lt;/code&gt; algorithm above has some limitations.
One obvious simplification is that &lt;code&gt;Buffer&lt;/code&gt; is just the sequence of bytes in transit, whereas in the real system it is a ring buffer, made up of an array of bytes along with the producer and consumer counters.
We could replace it with three separate variables to make that explicit.
However, ring buffers in Xen are well understood and I donât feel that it would make the specification any clearer
to include that.&lt;/p&gt;

&lt;p&gt;A more serious problem is that &lt;code&gt;Spec&lt;/code&gt; assumes that there is a way to perform the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; operations atomically.
Otherwise the real system would have behaviours not covered by the spec.
To implement the above &lt;code&gt;Spec&lt;/code&gt; correctly, youâd need some kind of lock.
The real vchan protocol is more complicated than &lt;code&gt;Spec&lt;/code&gt;, but avoids the need for a lock.&lt;/p&gt;

&lt;p&gt;The real system has more shared state than just &lt;code&gt;Buffer&lt;/code&gt;.
I added extra variables to the spec for each item of shared state in the C code, along with its initial value:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SenderLive = TRUE&lt;/code&gt; (sender sets to FALSE to close connection)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ReceiverLive = TRUE&lt;/code&gt; (receiver sets to FALSE to close connection)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;NotifyWrite = TRUE&lt;/code&gt; (receiver wants to be notified of next write)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;DataReadyInt = FALSE&lt;/code&gt; (sender has signalled receiver over event channel)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;NotifyRead = FALSE&lt;/code&gt; (sender wants to be notified of next read)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SpaceAvailableInt = FALSE&lt;/code&gt; (receiver has notified sender over event channel)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;DataReadyInt&lt;/code&gt; represents the state of the receiverâs event port.
The sender can make a Xen hypercall to set this and wake (or interrupt) the receiver.
I guess sending these events is somewhat slow,
because the &lt;code&gt;NotifyWrite&lt;/code&gt; system is used to avoid sending events unnecessarily.
Likewise, &lt;code&gt;SpaceAvailableInt&lt;/code&gt; is the senderâs event port.&lt;/p&gt;

&lt;h3 id=&quot;the-algorithm&quot;&gt;The algorithm&lt;/h3&gt;

&lt;p&gt;Here is my understanding of the protocol. On the sending side:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The sending application asks to send some bytes.&lt;br /&gt;
We check whether the receiver has closed the channel and abort if so.&lt;/li&gt;
  &lt;li&gt;We check the amount of buffer space available.&lt;/li&gt;
  &lt;li&gt;If there isnât enough, we set &lt;code&gt;NotifyRead&lt;/code&gt; so the receiver will notify us when there is more.&lt;br /&gt;
We also check the space again after this, in case it changed while setting the flag.&lt;/li&gt;
  &lt;li&gt;If there is any space:
    &lt;ul&gt;
      &lt;li&gt;We write as much data as we can to the buffer.&lt;/li&gt;
      &lt;li&gt;If the &lt;code&gt;NotifyWrite&lt;/code&gt; flag is set, we clear it and notify the receiver of the write.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If we wrote everything, we return success.&lt;/li&gt;
  &lt;li&gt;Otherwise, we wait to be notified of more space.&lt;/li&gt;
  &lt;li&gt;We check whether the receiver has closed the channel.&lt;br /&gt;
If so we abort. Otherwise, we go back to step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the receiving side:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The receiving application asks us to read up to some amount of data.&lt;/li&gt;
  &lt;li&gt;We check the amount of data available in the buffer.&lt;/li&gt;
  &lt;li&gt;If there isnât as much as requested, we set &lt;code&gt;NotifyWrite&lt;/code&gt; so the sender will notify us when there is.&lt;br /&gt;
We also check the space again after this, in case it changed while setting the flag.&lt;/li&gt;
  &lt;li&gt;If there is any data, we read up to the amount requested.&lt;br /&gt;
If the &lt;code&gt;NotifyRead&lt;/code&gt; flag is set, we clear it and notify the sender of the new space.&lt;br /&gt;
We return success to the application (even if we didnât get as much as requested).&lt;/li&gt;
  &lt;li&gt;Otherwise (if there was no data), we check whether the sender has closed the connection.&lt;/li&gt;
  &lt;li&gt;If not (if the connection is still open), we wait to be notified of more data,
and then go back to step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Either side can close the connection by clearing their âliveâ flag and signalling
the other side. I assumed there is also some process-local way that the close operation
can notify its own side if itâs currently blocked.&lt;/p&gt;

&lt;p&gt;To make expressing this kind of step-by-step algorithm easier,
TLA+ provides a programming-language-like syntax called PlusCal.
It then translates PlusCal into TLA actions.&lt;/p&gt;

&lt;p&gt;Confusingly, there are two different syntaxes for PlusCal: Pascal style and C style.
This means that, when you search for examples on the web,
there is a 50% chance they wonât work because theyâre using the other flavour.
I started with the Pascal one because that was the first example I found, but switched to C-style later because it was more compact.&lt;/p&gt;

&lt;p&gt;Here is my attempt at describing the sender algorithm above in PlusCal:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWrite&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* Our idea of how much free space is available.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* The data we haven&amp;#39;t sent yet.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* Everything we were asked to send.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;\* Remember we wanted to send this&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_request_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_write_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_recheck_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_write_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_check_notify_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* Atomic test-and-clear&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_notify_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* Signal receiver&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_ready&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_ready&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_blocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_check_recv_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The labels (e.g. &lt;code&gt;sender_request_notify:&lt;/code&gt;) represent points in the program where other actions can happen.
Everything between two labels is considered to be atomic.
I &lt;a href=&quot;https://github.com/talex5/spec-vchan/blob/d6e1c803820c952c53314da47270812e2fe88e79/vchan.tla#L654-L692&quot;&gt;checked&lt;/a&gt; that every block of code between labels accesses only one shared variable.
This means that the real system canât see any states that we donât consider.
The toolbox doesnât provide any help with this; you just have to check manually.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sender_ready&lt;/code&gt; label represents a state where the client application hasnât yet decided to send any data.
Its label is tagged with &lt;code&gt;-&lt;/code&gt; to indicate that fairness doesnât apply here, because the protocol doesnât
require applications to keep sending more data forever.
The other steps are fair, because once weâve decided to send something we should keep going.&lt;/p&gt;

&lt;p&gt;Taking a step from &lt;code&gt;sender_ready&lt;/code&gt; to &lt;code&gt;sender_write&lt;/code&gt; corresponds to the vchan libraryâs write function
being called with some argument &lt;code&gt;m&lt;/code&gt;.
The &lt;code&gt;with (m \in MSG)&lt;/code&gt; says that &lt;code&gt;m&lt;/code&gt; could be any message from the set &lt;code&gt;MSG&lt;/code&gt;.
TLA also contains a &lt;code&gt;CHOOSE&lt;/code&gt; operator that looks like it might do the same thing, but it doesnât.
When you use &lt;code&gt;with&lt;/code&gt;, you are saying that TLC should check &lt;em&gt;all&lt;/em&gt; possible messages.
When you use &lt;code&gt;CHOOSE&lt;/code&gt;, you are saying that it doesnât matter which message TLC tries (and it will always try the
same one).
Or, in terms of the specification, a &lt;code&gt;CHOOSE&lt;/code&gt; would say that applications can only ever send one particular message, without telling you what that message is.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;sender_write_data&lt;/code&gt;, we set &lt;code&gt;free := 0&lt;/code&gt; for no obvious reason.
This is just to reduce the number of states that the model checker needs to explore,
since we donât care about its value after this point.&lt;/p&gt;

&lt;p&gt;Some of the code is a little awkward because I had to put things in &lt;code&gt;else&lt;/code&gt; branches that would more naturally go after the whole &lt;code&gt;if&lt;/code&gt; block, but the translator wouldnât let me do that.
The use of semi-colons is also a bit confusing: the PlusCal-to-TLA translator requires them after a closing brace in some places, but the PDF generator messes up the indentation if you include them.&lt;/p&gt;

&lt;p&gt;Hereâs how the code block starting at &lt;code&gt;sender_request_notify&lt;/code&gt; gets translated into a TLA action:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sender_request_notify&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;k-Conditional&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k-Conditional&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k-Conditional&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pc&lt;/code&gt; is a mapping from process ID to the label where that process is currently executing.
So &lt;code&gt;sender_request_notify&lt;/code&gt; can only be performed when the SenderWriteID process is
at the &lt;code&gt;sender_request_notify&lt;/code&gt; label.
Afterwards &lt;code&gt;pc[SenderWriteID]&lt;/code&gt; will either be at &lt;code&gt;sender_write_data&lt;/code&gt; or &lt;code&gt;sender_recheck_len&lt;/code&gt;
(if there wasnât enough space for the whole message).&lt;/p&gt;

&lt;p&gt;Hereâs the code for the receiver:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* The amount of data we think the buffer contains.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* The amount of data the user wants us to read.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Pseudo-variable recording all data ever received by receiver.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxReadLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_got_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_recheck_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_check_notify_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;\* (atomic test-and-clear)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_notify_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;\* Return success&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* Return success&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_await_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Itâs quite similar to before.
&lt;code&gt;recv_ready&lt;/code&gt; corresponds to a state where the application hasnât yet called &lt;code&gt;read&lt;/code&gt;.
When it does, we take &lt;code&gt;n&lt;/code&gt; (the maximum number of bytes to read) as an argument and
store it in the local variable &lt;code&gt;want&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: you can use the C library in blocking or non-blocking mode.
In blocking mode, a &lt;code&gt;write&lt;/code&gt; (or &lt;code&gt;read&lt;/code&gt;) waits until data is sent (or received).
In non-blocking mode, it returns a special code to the application indicating that it needs to wait.
The application then does the waiting itself and then calls the library again.
I think the specification above covers both cases, depending on whether you think of
&lt;code&gt;sender_blocked&lt;/code&gt; and &lt;code&gt;recv_await_data&lt;/code&gt; as representing code inside or outside of the library.&lt;/p&gt;

&lt;p&gt;We also need a way to close the channel.
It wasnât clear to me, from looking at the C headers, when exactly youâre allowed to do that.
I &lt;em&gt;think&lt;/em&gt; that if you had a multi-threaded program and you called the close function while the write
function was blocked, it would unblock and return.
But if you happened to call it at the wrong time, it would try to use a closed file descriptor and fail
(or read from the wrong one).
So I guess itâs single threaded, and you should use the non-blocking mode if you want to cancel things.&lt;/p&gt;

&lt;p&gt;That means that the sender can close only when it is at &lt;code&gt;sender_ready&lt;/code&gt; or &lt;code&gt;sender_blocked&lt;/code&gt;,
and similarly for the receiver.
The situation with the OCaml code is the same, because it is cooperatively threaded and so the close
operation can only be called while blocked or idle.
However, I decided to make the specification more general and allow for closing at any point
by modelling closing as separate processes:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sender_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Clear liveness flag&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sender_notify_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* Signal receiver&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverClose&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;recv_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;\* Clear liveness flag&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;recv_notify_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Signal sender&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Again, the processes are âfairâ because once we start closing we should finish,
but the initial labels are tagged with â-â to disable fairness there: itâs OK if
you keep a vchan open forever.&lt;/p&gt;

&lt;p&gt;Thereâs a slight naming problem here.
The PlusCal translator names the actions it generates after the &lt;em&gt;starting&lt;/em&gt; state of the action.
So &lt;em&gt;sender_open&lt;/em&gt; is the action that moves &lt;em&gt;from&lt;/em&gt; the &lt;em&gt;sender_open&lt;/em&gt; label.
That is, the &lt;em&gt;sender_open&lt;/em&gt; action actually closes the connection!&lt;/p&gt;

&lt;p&gt;Finally, we share the event channel with the buffer going in the other direction, so we might
get notifications that are nothing to do with us.
To ensure we handle that, I added another process that can send events at any time:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpuriousInterrupts&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpuriousID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;spurious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;either/or&lt;/code&gt; says that we need to consider both possibilities.
This process isnât marked fair, because we canât rely these interrupts coming.
But we do have to handle them when they happen.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-full-spec&quot;&gt;Testing the full spec&lt;/h3&gt;

&lt;p&gt;PlusCal code is written in a specially-formatted comment block, and you have to press Ctrl-T to
generate (or update) then TLA translation before running the model checker.&lt;/p&gt;

&lt;p&gt;Be aware that the TLA Toolbox is a bit unreliable about keyboard short-cuts.
While typing into the editor always works, short-cuts such as Ctrl-S (save) sometimes get disconnected.
So you think youâre doing âedit/save/translate/save/checkâ cycles, but really youâre just checking some old version over and over again.
You can avoid this by always running the model checker with the keyboard shortcut too, since that always seems to fail at the same time as the others.
Focussing a different part of the GUI and then clicking back in the editor again fixes everything for a while.&lt;/p&gt;

&lt;p&gt;Anyway, running our model on the new spec shows that &lt;code&gt;Integrity&lt;/code&gt; is still OK.
However, the &lt;code&gt;Availability&lt;/code&gt; check fails with the following counter-example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The sender writes &lt;code&gt;&amp;lt;&amp;lt; 1 &amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Buffer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The sender closes the connection.&lt;/li&gt;
  &lt;li&gt;The receiver closes the connection.&lt;/li&gt;
  &lt;li&gt;All processes come to a stop, but the data never arrived.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to update &lt;code&gt;Availability&lt;/code&gt; to consider the effects of closing connections.
And at this point, Iâm very unsure what vchan is intended to do.
We could say:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvailabilityNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That passes.
But vchan describes itself as being like a Unix socket.
If you write to a Unix socket and then close it, you still expect the data to be delivered.
So actually I tried this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Availability&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvailabilityNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This says that if a sender write operation completes successfully (weâre back at &lt;code&gt;sender_ready&lt;/code&gt;)
and at that point the sender hasnât closed the connection, then the receiver will eventually receive
the data (or close its end).&lt;/p&gt;

&lt;p&gt;That is how I would expect it to behave.
But TLC reports that the new spec does &lt;em&gt;not&lt;/em&gt; satisfy this, giving this example (simplified - there are 16 steps in total):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The receiver starts reading. It finds that the buffer is empty.&lt;/li&gt;
  &lt;li&gt;The sender writes some data to &lt;code&gt;Buffer&lt;/code&gt; and returns to &lt;code&gt;sender_ready&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The sender closes the channel.&lt;/li&gt;
  &lt;li&gt;The receiver sees that the connection is closed and stops.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Is this a bug? Without a specification, itâs impossible to say.
Maybe vchan was never intended to ensure delivery once the sender has closed its end.
But this case only happens if youâre very unlucky about the scheduling.
If the receiving application calls &lt;code&gt;read&lt;/code&gt; when the sender has closed the connection but there is data
available then the C code &lt;em&gt;does&lt;/em&gt; return the data in that case.
Itâs only if the sender happens to close the connection just after the receiver has checked the buffer and just before it checks the close flag that this happens.&lt;/p&gt;

&lt;p&gt;Itâs also easy to fix.
I changed the code in the receiver to do a final check on the buffer before giving up:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_final_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;With that change, we can be sure that data sent while the connection is open will always be delivered
(provided only that the receiver doesnât close the connection itself).
If you spotted this issue yourself while you were reviewing the code earlier, then well done!&lt;/p&gt;

&lt;p&gt;Note that when TLC finds a problem with a temporal property (such as &lt;code&gt;Availability&lt;/code&gt;),
it does not necessarily find the shortest example first.
I changed the limit on &lt;code&gt;Sent&lt;/code&gt; to &lt;code&gt;Len(Sent) &amp;lt; 2&lt;/code&gt; and added an action constraint of &lt;code&gt;~SpuriousInterrupts&lt;/code&gt;
to get a simpler example, with only 1 byte being sent and no spurious interrupts.&lt;/p&gt;

&lt;h3 id=&quot;some-odd-things&quot;&gt;Some odd things&lt;/h3&gt;

&lt;p&gt;I noticed a couple of other odd things, which I thought Iâd mention.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;NotifyWrite&lt;/code&gt; is initialised to &lt;code&gt;TRUE&lt;/code&gt;, which seemed unnecessary.
We can initialise it to &lt;code&gt;FALSE&lt;/code&gt; instead and everything still works.
We can even initialise it with &lt;code&gt;NotifyWrite \in {TRUE, FALSE}&lt;/code&gt; to allow either behaviour,
and thus test that old programs that followed the original version of the spec still work
with either behaviour.&lt;/p&gt;

&lt;p&gt;Thatâs a nice advantage of using a specification language.
Saying âthe code is the specâ becomes less useful as you build up more and more versions of the code!&lt;/p&gt;

&lt;p&gt;However, because there was no spec before, we canât be sure that existing programs do follow it.
And, in fact, I found that QubesDB uses the vchan library in a different and unexpected way.
Instead of calling read, and then waiting if libvchan says to, QubesDB blocks first in all cases, and
then calls the read function once it gets an event.&lt;/p&gt;

&lt;p&gt;We can document that by adding an extra step at the start of ReceiverRead:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_ready&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;\* (recommended)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;\* (QubesDB does this)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxReadLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_await_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Then TLC shows that &lt;code&gt;NotifyWrite&lt;/code&gt; cannot start as &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second odd thing is that the receiver sets &lt;code&gt;NotifyRead&lt;/code&gt; whenever there isnât enough data available
to fill the applicationâs buffer completely.
But usually when you do a read operation you just provide a buffer large enough for the largest likely message.
It would probably make more sense to set &lt;code&gt;NotifyWrite&lt;/code&gt; only when the buffer is completely empty.
After checking the current version of the algorithm, I changed the specification to allow either behaviour.&lt;/p&gt;

&lt;h3 id=&quot;why-does-vchan-work&quot;&gt;Why does vchan work?&lt;/h3&gt;

&lt;p&gt;At this point, we have specified what vchan should do and how it does it.
We have also checked that it does do this, at least for messages up to 3 bytes long with a buffer size of 2.
That doesnât sound like much, but we still checked 79,288 distinct states, with behaviours up to 38 steps long.
This would be a perfectly reasonable place to declare the specification (and blog post) finished.&lt;/p&gt;

&lt;p&gt;However, TLA has some other interesting abilities.
In particular, it provides a very interesting technique to help discover &lt;em&gt;why&lt;/em&gt; the algorithm works.&lt;/p&gt;

&lt;p&gt;Weâll start with &lt;code&gt;Integrity&lt;/code&gt;.
We would like to argue as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;Integrity&lt;/code&gt; is true in any initial state (i.e. &lt;code&gt;Init =&amp;gt; Integrity&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Any &lt;code&gt;Next&lt;/code&gt; step preserves &lt;code&gt;Integrity&lt;/code&gt; (i.e. &lt;code&gt;Integrity /\ Next =&amp;gt; Integrity'&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then it would just be a matter looking at each possible action that makes up &lt;code&gt;Next&lt;/code&gt; and
checking that each one individually preserves &lt;code&gt;Integrity&lt;/code&gt;.
However, we canât do this with &lt;code&gt;Integrity&lt;/code&gt; because (2) isnât true.
For example, the state &lt;code&gt;{ Got: &quot;&quot;, Buffer: &quot;21&quot;, Sent: &quot;12&quot; }&lt;/code&gt; satisfies &lt;code&gt;Integrity&lt;/code&gt;,
but if we take a read step then the new state wonât.
Instead, we have to argue âIf we take a &lt;code&gt;Next&lt;/code&gt; step in any reachable state then &lt;code&gt;Integrity'&lt;/code&gt;â,
but thatâs very difficult because how do we know whether a state is reachable without searching them all?&lt;/p&gt;

&lt;p&gt;So the idea is to make a stronger version of &lt;code&gt;Integrity&lt;/code&gt;, called &lt;code&gt;IntegrityI&lt;/code&gt;, which does what we want.
&lt;code&gt;IntegrityI&lt;/code&gt; is called an &lt;em&gt;inductive invariant&lt;/em&gt;.
The first step is fairly obvious - I began with:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Integrity&lt;/code&gt; just said that &lt;code&gt;Got&lt;/code&gt; is a prefix of &lt;code&gt;Sent&lt;/code&gt;.
This says specifically that the rest is &lt;code&gt;Buffer \o msg&lt;/code&gt; - the data currently being transmitted and the data yet to be transmitted.&lt;/p&gt;

&lt;p&gt;We can ask TLC to check &lt;code&gt;Init /\ [][Next]_vars =&amp;gt; []IntegrityI&lt;/code&gt; to check that it is an invariant, as before.
It does that by finding all the &lt;code&gt;Init&lt;/code&gt; states and then taking &lt;code&gt;Next&lt;/code&gt; steps to find all reachable states.
But we can also ask it to check &lt;code&gt;IntegrityI /\ [][Next]_vars =&amp;gt; []IntegrityI&lt;/code&gt;.
That is, the same thing but starting from any state matching &lt;code&gt;IntegrityI&lt;/code&gt; instead of &lt;code&gt;Init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I created a new model (&lt;code&gt;IntegrityI&lt;/code&gt;) to do that.
It reports a few technical problems at the start because it doesnât know the types of anything.
For example, it canât choose initial values for &lt;code&gt;SenderLive&lt;/code&gt; without knowing that &lt;code&gt;SenderLive&lt;/code&gt; is a boolean.
I added a &lt;code&gt;TypeOK&lt;/code&gt; state expression that gives the expected type of every variable:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;FINITE_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FINITE_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;BOOLEAN&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FINITE_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxWriteLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxReadLen&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We also need to tell it all the possible states of &lt;code&gt;pc&lt;/code&gt; (which says which label each process it at):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;SW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_reading&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_got_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_read_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_final_check&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;spurious&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;You might imagine that the PlusCal translator would generate that for you, but it doesnât.
We also need to override &lt;code&gt;MESSAGE&lt;/code&gt; with &lt;code&gt;FINITE_MESSAGE(n)&lt;/code&gt; for some &lt;code&gt;n&lt;/code&gt; (I used &lt;code&gt;2&lt;/code&gt;).
Otherwise, it canât enumerate all possible messages.
Now we have:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;With that out of the way, TLC starts finding real problems
(that is, examples showing that &lt;code&gt;IntegrityI /\ Next =&amp;gt; IntegrityI'&lt;/code&gt; isnât true).
First, &lt;code&gt;recv_read_data&lt;/code&gt; would do an out-of-bounds read if &lt;code&gt;have = 1&lt;/code&gt; and &lt;code&gt;Buffer = &amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/code&gt;.
Our job is to explain why that isnât a valid state.
We can fix it with an extra constraint:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_read_data&amp;quot;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;(note: that &lt;code&gt;=&amp;gt;&lt;/code&gt; is âimpliesâ, while the &lt;code&gt;&amp;lt;=&lt;/code&gt; is âless-than-or-equal-toâ)&lt;/p&gt;

&lt;p&gt;Now it complains that if we do &lt;code&gt;recv_got_len&lt;/code&gt; with &lt;code&gt;Buffer = &amp;lt;&amp;lt; &amp;gt;&amp;gt;, have = 1, want = 0&lt;/code&gt; then we end up in &lt;code&gt;recv_read_data&lt;/code&gt; with
&lt;code&gt;Buffer = &amp;lt;&amp;lt; &amp;gt;&amp;gt;, have = 1&lt;/code&gt;, and we have to explain why &lt;em&gt;that&lt;/em&gt; canât happen and so on.&lt;/p&gt;

&lt;p&gt;Because TLC searches breadth-first, the examples it finds never have more than 2 states.
You just have to explain why the first state canât happen in the real system.
Eventually, you get a big ugly pile of constraints, which you then think about for a bit and simply.
I ended up with:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sent&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Itâs a good idea to check the final &lt;code&gt;IntegrityI&lt;/code&gt; with the original &lt;code&gt;SpecOK&lt;/code&gt; model,
just to check it really is an invariant.&lt;/p&gt;

&lt;p&gt;So, in summary, &lt;code&gt;Integrity&lt;/code&gt; is always true because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Sent&lt;/code&gt; is always the concatenation of &lt;code&gt;Got&lt;/code&gt;, &lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;msg&lt;/code&gt;.
Thatâs fairly obvious, because &lt;code&gt;sender_ready&lt;/code&gt; sets &lt;code&gt;msg&lt;/code&gt; and appends the same thing to &lt;code&gt;Sent&lt;/code&gt;,
and the other steps (&lt;code&gt;sender_write_data&lt;/code&gt; and &lt;code&gt;recv_read_data&lt;/code&gt;) just transfer some bytes from
the start of one variable to the end of another.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Although, like all local information, the receiverâs &lt;code&gt;have&lt;/code&gt; variable might be out-of-date,
there must be &lt;em&gt;at least&lt;/em&gt; that much data in the buffer, because the sender process will only
have added more, not removed any. This is sufficient to ensure that we never do an
out-of-range read.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Likewise, the senderâs &lt;code&gt;free&lt;/code&gt; variable is a lower bound on the true amount of free space,
because the receiver only ever creates more space. We will therefore never write beyond the
free space.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think this ability to explain why an algorithm works, by being shown examples where the inductive property
doesnât hold, is a really nice feature of TLA.
Inductive invariants are useful as a first step towards writing a proof,
but I think theyâre valuable even on their own.
If youâre documenting your own algorithm,
this process will get you to explain your own reasons for believing it works
(I &lt;a href=&quot;https://github.com/mirage/capnp-rpc/pull/149&quot;&gt;tried it&lt;/a&gt; on a simple algorithm in my own code and it seemed helpful).&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Originally, I had the &lt;code&gt;free&lt;/code&gt; and &lt;code&gt;have&lt;/code&gt; constraints depending on &lt;code&gt;pc&lt;/code&gt;.
However, the algorithm sets them to zero when not in use so it turns out theyâre always true.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;IntegrityI&lt;/code&gt; matches 532,224 states, even with a maximum &lt;code&gt;Sent&lt;/code&gt; length of 1, but it passes!
There are some games you can play to speed things up;
see &lt;a href=&quot;https://lamport.azurewebsites.net/tla/inductive-invariant.pdf&quot;&gt;Using TLC to Check Inductive Invariance&lt;/a&gt; for some suggestions
(I only discovered that while writing this up).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proving-integrity&quot;&gt;Proving Integrity&lt;/h3&gt;

&lt;p&gt;TLA provides a syntax for writing proofs,
and integrates with &lt;a href=&quot;https://tla.msr-inria.inria.fr/tlaps/content/Home.html&quot;&gt;TLAPS&lt;/a&gt; (the &lt;em&gt;TLA+ Proof System&lt;/em&gt;) to allow them to be checked automatically.&lt;/p&gt;

&lt;p&gt;Proving &lt;code&gt;IntegrityI&lt;/code&gt; is just a matter of showing that &lt;code&gt;Init =&amp;gt; IntegrityI&lt;/code&gt; and that it is preserved
by any possible &lt;code&gt;[Next]_vars&lt;/code&gt; step.
To do that, we consider each action of &lt;code&gt;Next&lt;/code&gt; individually, which is long but simple enough.&lt;/p&gt;

&lt;p&gt;I was able to prove it, but the &lt;code&gt;recv_read_data&lt;/code&gt; action was a little difficult
because we donât know that &lt;code&gt;want &amp;gt; 0&lt;/code&gt; at that point, so we have to do some extra work
to prove that transferring 0 bytes works, even though the real system never does that.&lt;/p&gt;

&lt;p&gt;I therefore added an extra condition to &lt;code&gt;IntegrityI&lt;/code&gt; that &lt;code&gt;want&lt;/code&gt; is non-zero whenever itâs in use,
and also conditions about &lt;code&gt;have&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; being 0 when not in use, for completeness:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                          &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                          &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_got_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_read_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3 id=&quot;availability&quot;&gt;Availability&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Integrity&lt;/code&gt; was quite easy to prove, but I had more trouble trying to explain &lt;code&gt;Availability&lt;/code&gt;.
One way to start would be to add &lt;code&gt;Availability&lt;/code&gt; as a property to check to the &lt;code&gt;IntegrityI&lt;/code&gt; model.
However, it takes a while to check properties as it does them at the end, and the examples
it finds may have several steps (it took 1m15s to find a counter-example for me).&lt;/p&gt;

&lt;p&gt;Hereâs a faster way (37s).
The algorithm will deadlock if both sender and receiver are in their blocked states and neither
interrupt is pending, so I made a new invariant, &lt;code&gt;I&lt;/code&gt;, which says that deadlock canât happen:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I discovered some obvious facts about closing the connection.
For example, the &lt;code&gt;SenderLive&lt;/code&gt; flag is set if and only if the senderâs close thread hasnât done anything.
Iâve put them all together in &lt;code&gt;CloseOK&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* Some obvious facts about shutting down connections. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* An endpoint is live iff its close thread hasn&amp;#39;t done anything:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_open&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_open&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* The send and receive loops don&amp;#39;t terminate unless someone has closed the connection:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_final_check&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If the receiver closed the connection then we will get (or have got) the signal:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;But I had problems with other examples TLC showed me, and
I realised that I didnât actually know why this algorithm doesnât deadlock.&lt;/p&gt;

&lt;p&gt;Intuitively it seems clear enough:
the sender puts data in the buffer when thereâs space and notifies the receiver,
and the receiver reads it and notifies the writer.
What could go wrong?
But both processes are working with information that can be out-of-date.
By the time the sender decides to block because the buffer looked full, the buffer might be empty.
And by the time the receiver decides to block because it looked empty, it might be full.&lt;/p&gt;

&lt;p&gt;Maybe you already saw why it works from the C code, or the algorithm above,
but it took me a while to figure it out!
I eventually ended up with an invariant of the form:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SendMayBlock&lt;/span&gt;    &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceWakeupComing&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiveMayBlock&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWakeupComing&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SendMayBlock&lt;/code&gt; is &lt;code&gt;TRUE&lt;/code&gt; if weâre in a state that may lead to being blocked without checking the
bufferâs free space again. Likewise, &lt;code&gt;ReceiveMayBlock&lt;/code&gt; indicates that the receiver might block.
&lt;code&gt;SpaceWakeupComing&lt;/code&gt; and &lt;code&gt;DataWakeupComing&lt;/code&gt; predict whether weâre going to get an interrupt.
The idea is that if weâre going to block, we need to be sure weâll be woken up.
Itâs a bit ugly, though, e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;DataWakeupComing&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* Event sent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;\* Event being sent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_closed&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* Event requested and ...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;\* Sender can see receiver is still alive and ...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceWakeupComing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It did pass my model that tested sending one byte, and I decided to try a proof.
Well, it didnât work.
The problem seems to be that &lt;code&gt;DataWakeupComing&lt;/code&gt; and &lt;code&gt;SpaceWakeupComing&lt;/code&gt; are really mutually recursive.
The reader will wake up if the sender wakes it, but the sender might be blocked, or about to block.
Thatâs OK though, as long as the receiver will wake it, which it will do, once the sender wakes itâ¦&lt;/p&gt;

&lt;p&gt;Youâve probably already figured it out, but I thought Iâd document my confusion.
It occurred to me that although each process might have out-of-date information,
that could be fine as long as at any one moment one of them was right.
The last process to update the buffer must know how full it is,
so one of them must have correct information at any given time, and that should be enough to avoid deadlock.&lt;/p&gt;

&lt;p&gt;That didnât work either.
When youâre at a proof step and canât see why itâs correct, you can ask TLC to show you an example.
e.g. if youâre stuck trying to prove that &lt;code&gt;sender_request_notify&lt;/code&gt; preserves &lt;code&gt;I&lt;/code&gt; when the
receiver is at &lt;code&gt;recv_ready&lt;/code&gt;, the buffer is full, and &lt;code&gt;ReceiverLive = FALSE&lt;/code&gt;,
you can ask for an example of that:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_ready&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;You then create a new model that searches &lt;code&gt;Example /\ [][Next]_vars&lt;/code&gt; and tests &lt;code&gt;I&lt;/code&gt;.
As long as &lt;code&gt;Example&lt;/code&gt; has several constraints, you can use a much larger model for this.
I also ask it to check the property &lt;code&gt;[][FALSE]_vars&lt;/code&gt;, which means it will show any step starting from &lt;code&gt;Example&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It quickly became clear what was wrong: it is quite possible that neither process is up-to-date.
If both processes see the buffer contains &lt;code&gt;X&lt;/code&gt; bytes of data, and the sender sends &lt;code&gt;Y&lt;/code&gt; bytes and the receiver reads &lt;code&gt;Z&lt;/code&gt; bytes, then the sender will think there are &lt;code&gt;X + Y&lt;/code&gt; bytes in the buffer and the receiver will think there are &lt;code&gt;X - Z&lt;/code&gt; bytes, and neither is correct.
My original 1-byte buffer was just too small to find a counter-example.&lt;/p&gt;

&lt;p&gt;The real reason why vchan works is actually rather obvious.
I donât know why I didnât see it earlier.
But eventually it occurred to me that I could make use of &lt;code&gt;Got&lt;/code&gt; and &lt;code&gt;Sent&lt;/code&gt;.
I defined &lt;code&gt;WriteLimit&lt;/code&gt; to be the total number of bytes that the sender would write before blocking,
if the receiver never did anything further.
And I defined &lt;code&gt;ReadLimit&lt;/code&gt; to be the total number of bytes that the receiver would read if the sender
never did anything else.&lt;/p&gt;

&lt;p&gt;Did I define these limits correctly?
Itâs easy to ask TLC to check some extra properties while itâs running.
For example, I used this to check that &lt;code&gt;ReadLimit&lt;/code&gt; behaves sensibly:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;ReadLimitCorrect&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* We will eventually receive what ReadLimit promises:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WF_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;s&quot;&gt;\A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AvailabilityNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* ReadLimit can only decrease if we decide to shut down:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* ReceiverRead steps don&amp;#39;t change the read limit:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_vars&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Because &lt;code&gt;ReadLimit&lt;/code&gt; is defined in terms of what it does when no other processes run,
this property should ideally be tested in a model without the fairness conditions
(i.e. just &lt;code&gt;Init /\ [][Next]_vars&lt;/code&gt;).
Otherwise, fairness may force the sender to perform a step.
We still want to allow other steps, though, to show that &lt;code&gt;ReadLimit&lt;/code&gt; is a lower bound.&lt;/p&gt;

&lt;p&gt;With this, we can argue that e.g. a 2-byte buffer will eventually transfer 3 bytes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The receiver will eventually read 3 bytes as long as the sender eventually sends 3 bytes.&lt;/li&gt;
  &lt;li&gt;The sender will eventually send 3, if the receiver reads at least 1.&lt;/li&gt;
  &lt;li&gt;The receiver will read 1 if the sender sends at least 1.&lt;/li&gt;
  &lt;li&gt;The sender will send 1 if the reader has read at least 0 bytes, which is always true.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By this point, I was learning to be more cautious before trying a proof,
so I added some new models to check this idea further.
One prevents the sender from ever closing the connection and the other prevents the receiver from ever closing.
That reduces the number of states to consider and I was able to check a slightly larger model.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If the reader is stuck, but data is available, the sender will unblock it:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderShouldBeUnblocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* The sender is going to write more:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The sender is about to increase ReadLimit:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The sender is about to notify us of shutdown:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If the writer is stuck, but there is now space available, the receiver will unblock it:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriterShouldBeUnblocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;\* The reader is going to read more:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The reader is about to increase WriteLimit:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_read&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;c&quot;&gt;\* The receiver is about to notify us of shutdown:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_notify_closed&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;If a process is on a path to being blocked then it must have set its notify flag.
&lt;code&gt;NotifyFlagsCorrect&lt;/code&gt; says that in that case, the flag it still set, or the interrupt has been sent,
or the other process is just about to trigger the interrupt.&lt;/p&gt;

&lt;p&gt;I managed to use that to prove that the senderâs steps preserved &lt;code&gt;I&lt;/code&gt;,
but I needed a little extra to finish the receiver proof.
At this point, I finally spotted the obvious invariant (which you, no doubt, saw all along):
whenever &lt;code&gt;NotifyRead&lt;/code&gt; is still set, the sender has accurate information about the buffer.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;c&quot;&gt;\* The sender has accurate information about the buffer:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;c&quot;&gt;\* Or the flag is being cleared right now:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_check_notify_read&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Thatâs pretty obvious, isnât it?
The sender checks the buffer after setting the flag, so it must have accurate information at that point.
The receiver clears the flag after reading from the buffer (which invalidates the senderâs information).&lt;/p&gt;

&lt;p&gt;Now I had a dilemma.
There was obviously going to be a matching property about &lt;code&gt;NotifyWrite&lt;/code&gt;.
Should I add that, or continue with just this?
I was nearly done, so I continued and finished off the proofs.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;I&lt;/code&gt; proved, I was able to prove some other nice things quite easily:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That says that, whenever the sender is idle or blocked, the receiver will read everything sent so far,
without any further help from the sender. And:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That says that whenever the receiver is blocked, the sender can fill the buffer.
Thatâs pretty nice.
It would be possible to make a vchan system that e.g. could only send 1 byte at a time and still
prove it couldnât deadlock and would always deliver data,
but here we have shown that the algorithm can use the whole buffer.
At least, thatâs what these theorems say as long as you believe that &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; are defined correctly.&lt;/p&gt;

&lt;p&gt;With the proof complete, I then went back and deleted all the stuff about &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; from &lt;code&gt;I&lt;/code&gt;
and started again with just the new rules about &lt;code&gt;NotifyRead&lt;/code&gt; and &lt;code&gt;NotifyWrite&lt;/code&gt;.
Instead of using &lt;code&gt;WriteLimit = Len(Got) + BufferSize&lt;/code&gt; to indicate that the sender has accurate information,
I made a new &lt;code&gt;SenderInfoAccurate&lt;/code&gt; that just returns &lt;code&gt;TRUE&lt;/code&gt; whenever the sender will fill the buffer without further help.
That avoids some unnecessary arithmetic, which TLAPS needs a lot of help with.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* The sender&amp;#39;s information is accurate if whenever it is going to block, the buffer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;   really is full. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* We have accurate information:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* In these states, we&amp;#39;re going to check the buffer before blocking:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_recheck_len&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_recv_live&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_request_notify&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If we&amp;#39;ve been signalled, we&amp;#39;ll immediately wake next time we try to block:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* We&amp;#39;re about to write some data:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_write_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;\* But we won&amp;#39;t need to block&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;\* If we wrote all the data we intended to, we&amp;#39;ll return without blocking:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sender_check_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;By talking about accuracy instead of the write limit, I was also able to include âDoneâ in with
the other happy cases.
Before, that had to be treated as a possible problem because the sender canât use the full buffer when itâs Done.&lt;/p&gt;

&lt;p&gt;With this change, the proof of &lt;code&gt;Spec =&amp;gt; []I&lt;/code&gt; became much simpler (384 lines shorter).
And most of the remaining steps were trivial.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; idea still seemed useful, though,
but I found I was able to prove the same things from &lt;code&gt;I&lt;/code&gt;.
e.g. we can still conclude this, even if &lt;code&gt;I&lt;/code&gt; doesnât mention &lt;code&gt;WriteLimit&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Thatâs nice, because it keeps the invariant and its proofs simple,
but we still get the same result in the end.&lt;/p&gt;

&lt;p&gt;I initially defined &lt;code&gt;WriteLimit&lt;/code&gt; to be the number of bytes the sender &lt;em&gt;could&lt;/em&gt; write if
the sending application wanted to send enough data,
but I later changed it to be the actual number of bytes it &lt;em&gt;would&lt;/em&gt; write if the application didnât
try to send any more.
This is because otherwise, with packet-based sends
(where we only write when the buffer has enough space for the whole message at once)
&lt;code&gt;WriteLimit&lt;/code&gt; could go down.
e.g. we think we can write another 3 bytes,
but then the application decides to write 10 bytes and now we canât write anything more.&lt;/p&gt;

&lt;p&gt;The limit theorems above are useful properties,
but it would be good to have more confidence that &lt;code&gt;ReadLimit&lt;/code&gt; and &lt;code&gt;WriteLimit&lt;/code&gt; are correct.
I was able to prove some useful lemmas here.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;ReceiverRead&lt;/code&gt; steps donât change &lt;code&gt;ReadLimit&lt;/code&gt; (as long as the receiver hasnât closed
the connection):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverReadPreservesReadLimit&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This gives us a good reason to think that ReadLimit is correct:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the receiver is blocked it cannot read any more than it has without help.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ReadLimit&lt;/code&gt; is defined to be &lt;code&gt;Len(Got)&lt;/code&gt; then, so &lt;code&gt;ReadLimit&lt;/code&gt; is obviously correct for this case.&lt;/li&gt;
  &lt;li&gt;Since read steps preserve &lt;code&gt;ReadLimit&lt;/code&gt;, this shows that ReadLimit is correct in all cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g. if &lt;code&gt;ReadLimit = 5&lt;/code&gt; and no other processes do anything,
then we will end up in a state with the receiver blocked, and &lt;code&gt;ReadLimit = Len(Got) = 5&lt;/code&gt;
and so we really did read a total of 5 bytes.&lt;/p&gt;

&lt;p&gt;I was also able to prove that it never decreases (unless the receiver closes the connection):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimitMonotonic&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadLimit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;So, if &lt;code&gt;ReadLimit = n&lt;/code&gt; then it will always be at least &lt;code&gt;n&lt;/code&gt;,
and if the receiver ever blocks then it will have read at least &lt;code&gt;n&lt;/code&gt; bytes.&lt;/p&gt;

&lt;p&gt;I was able to prove similar properties about &lt;code&gt;WriteLimit&lt;/code&gt;.
So, I feel reasonably confident that these limit predictions are correct.&lt;/p&gt;

&lt;p&gt;Disappointingly, we canât actually prove &lt;code&gt;Availability&lt;/code&gt; using TLAPS,
because currently it understands very little temporal logic (see &lt;a href=&quot;https://github.com/tlaplus/v2-tlapm/blob/c0ea83d8481e9dffbcbc5b54822c0e235ff59153/library/TLAPS.tla#L312&quot;&gt;TLAPS limitations&lt;/a&gt;).
However, I could show that the system canât deadlock while thereâs data to be transmitted:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* We can&amp;#39;t get into a state where the sender and receiver are both blocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;   and there is no wakeup pending: *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeadlockFree1&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUFFICES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_blocked&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpaceAvailableInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;bp&quot;&gt;FALSE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyRead&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferSizeType&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;(* We can&amp;#39;t get into a state where the sender is idle and the receiver is blocked&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;   unless the buffer is empty (all data sent has been consumed): *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeadlockFree2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_ready&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recv_await_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverLive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReadyInt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Iâve included the proof of &lt;code&gt;DeadlockFree1&lt;/code&gt; above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To show deadlock canât happen, it suffices to assume it has happened and show a contradiction.&lt;/li&gt;
  &lt;li&gt;If both processes are blocked then &lt;code&gt;NotifyRead&lt;/code&gt; and &lt;code&gt;NotifyWrite&lt;/code&gt; must both be set
(because processes donât block without setting them,
and if theyâd been unset then an interrupt would now be pending and we wouldnât be blocked).&lt;/li&gt;
  &lt;li&gt;Since &lt;code&gt;NotifyRead&lt;/code&gt; is still set,
the sender is correct in thinking that the buffer is still full.&lt;/li&gt;
  &lt;li&gt;Since &lt;code&gt;NotifyWrite&lt;/code&gt; is still set,
the receiver is correct in thinking that the buffer is still empty.&lt;/li&gt;
  &lt;li&gt;That would be a contradiction, since &lt;code&gt;BufferSize&lt;/code&gt; isnât zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it doesnât deadlock, then some process must keep getting woken up by interrupts,
which means that interrupts keep being sent.
We only send interrupts after making progress (writing to the buffer or reading from it),
so we must keep making progress.
Weâll have to content ourselves with that argument.&lt;/p&gt;

&lt;h2 id=&quot;experiences-with-tlaps&quot;&gt;Experiences with TLAPS&lt;/h2&gt;

&lt;p&gt;The toolbox doesnât come with the proof system, so you need to install it separately.
The instructions are out-of-date and have a lot of broken links.
In May, I turned the steps into a Dockerfile, which got it partly installed, and asked on the TLA group for help,
but no-one else seemed to know how to install it either.
By looking at the error messages and searching the web for programs with the same names, I finally managed to get it working in December.
If you have trouble installing it too, try using &lt;a href=&quot;https://github.com/talex5/tla&quot;&gt;my Docker image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed, you can write a proof in the toolbox and then press Ctrl-G, Ctrl-G to check it.
On success, the proof turns green. On failure, the failing step turns red.
You can also do the Ctrl-G, Ctrl-G combination on a single step to check just that step.
Thatâs useful, because itâs pretty slow.
It takes more than 10 minutes to check the complete specification.&lt;/p&gt;

&lt;p&gt;TLA proofs are done in the mathematical style,
which is to write a set of propositions and vaguely suggest that thinking about these will lead you to the proof.
This is good for building intuition, but bad for reproducibility.
A mathematical proof is considered correct if the reader is convinced by it, which depends on the reader.
In this case, the âreaderâ is a collection of automated theorem-provers with various timeouts.
This means that whether a proof is correct or not depends on how fast your computer is,
how many programs are currently running, etc.
A proof might pass one day and fail the next.
Some proof steps consistently pass when you try them individually,
but consistently fail when checked as part of the whole proof.
If a step fails, you need to break it down into smaller steps.&lt;/p&gt;

&lt;p&gt;Sometimes the proof system is very clever, and immediately solves complex steps.
For example, here is the proof that the &lt;code&gt;SenderClose&lt;/code&gt; process (which represents the sender closing the channel),
preserves the invariant &lt;code&gt;I&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClosePreservesI&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUFFICES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k-Conditional&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_open&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_open&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sender_notify_closed&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k-Conditional&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_notify_closed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender_notify_closed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderWriteID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverReadID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiverCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SenderCloseID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Done&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegrityI&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyFlagsCorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReaderInfoAccurate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CloseOK&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SenderClose&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A step such as &lt;code&gt;IntegrityI' BY DEF IntegrityI&lt;/code&gt; says
âYou can see that &lt;code&gt;IntegrityI&lt;/code&gt; will be true in the next step just by looking at its definitionâ.
So this whole lemma is really just saying âitâs obviousâ.
And TLAPS agrees.&lt;/p&gt;

&lt;p&gt;At other times, TLAPS can be maddeningly stupid.
And it canât tell you what the problem is - it can only make things go red.&lt;/p&gt;

&lt;p&gt;For example, this fails:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Weâre trying to say that &lt;code&gt;pc[2]&lt;/code&gt; is unchanged, given that &lt;code&gt;pc'&lt;/code&gt; is the same as &lt;code&gt;pc&lt;/code&gt; except that we changed &lt;code&gt;pc[1]&lt;/code&gt;.
The problem is that TLA is an untyped language.
Even though we know we did a mapping update to &lt;code&gt;pc&lt;/code&gt;,
that isnât enough (apparently) to conclude that &lt;code&gt;pc&lt;/code&gt; is in fact a mapping.
To fix it, you need:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l1&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The extra &lt;code&gt;pc \in [Nat -&amp;gt; STRING]&lt;/code&gt; tells TLA the type of the &lt;code&gt;pc&lt;/code&gt; variable.
I found missing type information to be the biggest problem when doing proofs,
because you just automatically assume that the computer will know the types of things.
Another example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;OBVIOUS&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Weâre just trying to remove the &lt;code&gt;x + ...&lt;/code&gt; from both sides of the equation.
The problem is, TLA doesnât know that &lt;code&gt;Min(y, 10)&lt;/code&gt; is a number,
so it doesnât know whether the normal laws of addition apply in this case.
It canât tell you that, though - it can only go red.
Hereâs the solution:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;THEOREM&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;BY DEF Min&lt;/code&gt; tells TLAPS to share the definition of &lt;code&gt;Min&lt;/code&gt; with the solvers.
Then they can see that &lt;code&gt;Min(y, 10)&lt;/code&gt; must be a natural number too and everything works.&lt;/p&gt;

&lt;p&gt;Another annoyance is that sometimes it canât find the right lemma to use,
even when you tell it exactly what it needs.
Hereâs an extreme case:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* (TLAPS doesn&amp;#39;t cope with &amp;quot;NEW VARAIBLE src&amp;quot;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;PROOF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OMITTED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SameAgain&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;\* (TLAPS doesn&amp;#39;t cope with &amp;quot;NEW VARAIBLE src&amp;quot;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;TransferFacts&lt;/code&gt; states some useful facts about transferring data between two variables.
You can prove that quite easily.
&lt;code&gt;SameAgain&lt;/code&gt; is identical in every way, and just refers to &lt;code&gt;TransferFacts&lt;/code&gt; for the proof.
But even with only one lemma to consider - one that matches all the assumptions and conclusions perfectly -
none of the solvers could figure this one out!&lt;/p&gt;

&lt;p&gt;My eventual solution was to name the bundle of results.
This works:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;TransferResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNCHANGED&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;TransferResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;PROOF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OMITTED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;LEMMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SameAgain&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ASSUME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;\o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;n&quot;&gt;PROVE&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;TransferResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransferFacts&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Most of the art of using TLAPS is in controlling how much information to share with the provers.
Too little (such as failing to provide the definition of &lt;code&gt;Min&lt;/code&gt;) and they donât have enough information to find the proof.
Too much (such as providing the definition of &lt;code&gt;TransferResults&lt;/code&gt;) and they get overwhelmed and fail to find the proof.&lt;/p&gt;

&lt;p&gt;Itâs all a bit frustrating, but it does work,
and being machine checked does give you some confidence that your proofs are actually correct.&lt;/p&gt;

&lt;p&gt;Another, perhaps more important, benefit of machine checked proofs is that
when you decide to change something in the specification you can just ask it to re-check everything.
Go and have a cup of tea, and when you come back it will have highlighted in red any steps that need to be updated.
I made a lot of changes, and this worked very well.&lt;/p&gt;

&lt;p&gt;The TLAPS philosophy is that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are concerned with an algorithm or system, you should not be spending your time proving basic mathematical facts.
Instead, you should assert the mathematical theorems you need as assumptions or theorems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So even if you canât find a formal proof of every step, you can still use TLAPS to break it down into steps than you
either can prove, or that you think are obvious enough that they donât require a proof.
However, I was able to prove everything I needed for the vchan specification within TLAPS.&lt;/p&gt;

&lt;h2 id=&quot;the-final-specification&quot;&gt;The final specification&lt;/h2&gt;

&lt;p&gt;I did a little bit of tidying up at the end.
In particular, I removed the &lt;code&gt;want&lt;/code&gt; variable from the specification.
I didnât like it because it doesnât correspond to anything in the OCaml implementation,
and the only place the algorithm uses it is to decide whether to set &lt;code&gt;NotifyWrite&lt;/code&gt;,
which I thought might be wrong anyway.&lt;/p&gt;

&lt;p&gt;I changed this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_got_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;tla&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;recv_got_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv_read_data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ni&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;NotifyWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;ni&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That always allows an implementation to set &lt;code&gt;NotifyWrite&lt;/code&gt; if it wants to,
or to skip that step just as long as &lt;code&gt;have &amp;gt; 0&lt;/code&gt;.
That covers the current C behaviour, my proposed C behaviour, and the OCaml implementation.
It also simplifies the invariant, and even made the proofs shorter!&lt;/p&gt;

&lt;p&gt;I put the final specification online at &lt;a href=&quot;https://github.com/talex5/spec-vchan&quot;&gt;spec-vchan&lt;/a&gt;.
I also configured Travis CI to check all the models and verify all the proofs.
Thatâs useful because sometimes Iâm too impatient to recheck everything on my laptop before pushing updates.&lt;/p&gt;

&lt;p&gt;You can generate a PDF version of the specification with &lt;code&gt;make pdfs&lt;/code&gt;.
Expressions there can be a little easier to read because they use proper symbols, but
it also breaks things up into pages, which is highly annoying.
It would be nice if it could omit the proofs too, as theyâre really only useful if youâre trying to edit them.
Iâd rather just see the statement of each theorem.&lt;/p&gt;

&lt;h2 id=&quot;the-original-bug&quot;&gt;The original bug&lt;/h2&gt;

&lt;p&gt;With my new understanding of vchan, I couldnât see anything obvious wrong with the C code
(at least, as long as you keep the connection open, which the firewall does).&lt;/p&gt;

&lt;p&gt;I then took a look at &lt;a href=&quot;https://github.com/mirage/ocaml-vchan&quot;&gt;ocaml-vchan&lt;/a&gt;.
The first thing I noticed was that someone had commented out all the memory barriers,
noting in the Git log that they werenât needed on x86.
I am using x86, so thatâs not it, but I filed a bug about it anyway: &lt;a href=&quot;https://github.com/mirage/ocaml-vchan/issues/122&quot;&gt;Missing memory barriers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other strange thing I saw was the behaviour of the &lt;code&gt;read&lt;/code&gt; function.
It claims to implement the Mirage &lt;code&gt;FLOW&lt;/code&gt; interface, which says that &lt;code&gt;read&lt;/code&gt;
âblocks until some data is available and returns a fresh buffer containing itâ.
However, looking at the code, what it actually does is to return a pointer directly into the shared buffer.
It then delays updating the consumer counter until the &lt;em&gt;next&lt;/em&gt; call to &lt;em&gt;read&lt;/em&gt;.
Thatâs rather dangerous, and I filed another bug about that: &lt;a href=&quot;https://github.com/mirage/ocaml-vchan/issues/119&quot;&gt;Read has very surprising behaviour&lt;/a&gt;.
However, when I checked the &lt;code&gt;mirage-qubes&lt;/code&gt; code, it just takes this buffer and &lt;a href=&quot;https://github.com/mirage/mirage-qubes/blob/ea900d5ac93278a43150cd21ced407806416681c/lib/msg_chan.ml#L34&quot;&gt;makes a copy of it&lt;/a&gt; immediately.
So thatâs not the bug either.&lt;/p&gt;

&lt;p&gt;Also, the original bug report mentioned a 10 second timeout,
and neither the C implementation nor the OCaml one had any timeouts.
Time to look at QubesDB itself.&lt;/p&gt;

&lt;p&gt;QubesDB accepts messages from either the guest VM (the firewall) or from local clients connected over Unix domain sockets.
The basic structure is:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vchan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vchan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive_buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;handle_vchan_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;handle_client_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The suspicion was that we were missing a vchan event,
but then it was discovering that there was data in the buffer anyway due to the timeout.
Looking at the code, it does seem to me that there is a possible race condition here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A local client asks to send some data.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;handle_client_data&lt;/code&gt; sends the data to the firewall using a blocking write.&lt;/li&gt;
  &lt;li&gt;The firewall sends a message to QubesDB at the same time and signals an event because the firewall-to-db buffer has data.&lt;/li&gt;
  &lt;li&gt;QubesDB gets the event but ignores it because itâs doing a blocking write and thereâs still no space in the db-to-firewall direction.&lt;/li&gt;
  &lt;li&gt;The firewall updates its consumer counter and signals another event, because the buffer now has space.&lt;/li&gt;
  &lt;li&gt;The blocking write completes and QubesDB returns to the main loop.&lt;/li&gt;
  &lt;li&gt;QubesDB goes to sleep for 10 seconds, without checking the buffer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I donât think this is the cause of the bug though,
because the only messages the firewall might be sending here are &lt;code&gt;QDB_RESP_OK&lt;/code&gt; messages,
and QubesDB just discards such messages.&lt;/p&gt;

&lt;p&gt;I managed to reproduce the problem myself,
and saw that in fact QubesDB doesnât make any progress due to the 10 second timeout.
It just tries to go back to sleep for another 10 seconds and then
immediately gets woken up by a message from a local client.
So, it looks like QubesDB is only sending updates every 10 seconds because its client, &lt;code&gt;qubesd&lt;/code&gt;,
is only asking it to send updates every 10 seconds!
And looking at the &lt;code&gt;qubesd&lt;/code&gt; logs, I saw stacktraces about libvirt failing to attach network devices, so
I read the Xen network device attachment specification to check that the firewall implemented that correctly.&lt;/p&gt;

&lt;p&gt;Iâm kidding, of course.
There isnât any such specification.
But maybe this blog post will inspire someone to write oneâ¦&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;As users of open source software, weâre encouraged to look at the source code and check that itâs correct ourselves.
But thatâs pretty difficult without a specification saying what things are &lt;em&gt;supposed&lt;/em&gt; to do.
Often I deal with this by learning just enough to fix whatever bug Iâm working on,
but this time I decided to try making a proper specification instead.
Making the TLA specification took rather a long time, but it was quite pleasant.
Hopefully the next person who needs to know about vchan will appreciate it.&lt;/p&gt;

&lt;p&gt;A TLA specification generally defines two sets of behaviours.
The first is the set of desirable behaviours (e.g. those where the data is delivered correctly).
This definition should clearly explain what users can expect from the system.
The second defines the behaviours of a particular algorithm.
This definition should make it easy to see how to implement the algorithm.
The TLC model checker can check that the algorithmâs behaviours are all acceptable,
at least within some defined limits.&lt;/p&gt;

&lt;p&gt;Writing a specification using the TLA notation forces us to be precise about what we mean.
For example, in a prose specification we might say âdata sent will eventually arriveâ, but in an
executable TLA specification weâre forced to clarify what happens if the connection is closed.
I would have expected that if a sender writes some data and then closes the connection then the data would still arrive,
but the C implementation of vchan does not always ensure that.
The TLC model checker can find a counter-example showing how this can fail in under a minute.&lt;/p&gt;

&lt;p&gt;To explain why the algorithm always works, we need to find an inductive invariant.
The TLC model checker can help with this,
by presenting examples of unreachable states that satisfy the invariant but donât preserve it after taking a step.
We must add constraints to explain why these states are invalid.
This was easy for the &lt;code&gt;Integrity&lt;/code&gt; invariant, which explains why we never receive incorrect data, but
I found it much harder to prove that the system cannot deadlock.
I suspect that the original designer of a system would find this step easy, as presumably they already know why it works.&lt;/p&gt;

&lt;p&gt;Once we have found an inductive invariant, we can write a formal machine-checked proof that the invariant is always true.
Although TLAPS doesnât allow us to prove liveness properties directly,
I was able to prove various interesting things about the algorithm: it doesnât deadlock; when the sender is blocked, the receiver can read everything that has been sent; and when the receiver is blocked, the sender can fill the entire buffer.&lt;/p&gt;

&lt;p&gt;Writing formal proofs is a little tedious, largely because TLA is an untyped language.
However, there is nothing particularly difficult about it,
once you know how to work around various limitations of the proof checkers.&lt;/p&gt;

&lt;p&gt;You might imagine that TLA would only work on very small programs like libvchan, but this is not the case.
Itâs just a matter of deciding what to specify in detail.
For example, in this specification I didnât give any details about how ring buffers work,
but instead used a single &lt;code&gt;Buffer&lt;/code&gt; variable to represent them.
For a specification of a larger system using vchan, I would model each channel using just &lt;code&gt;Sent&lt;/code&gt; and &lt;code&gt;Got&lt;/code&gt;
and an action that transferred some of the difference on each step.&lt;/p&gt;

&lt;p&gt;The TLA Toolbox has some rough edges.
The ones I found most troublesome were: the keyboard shortcuts frequently stop working;
when a temporal property is violated, it doesnât tell you which one it was; and
the model explorer tooltips appear right under the mouse pointer,
preventing you from scrolling with the mouse wheel.
It also likes to check its ânews feedâ on a regular basis.
It canât seem to do this at the same time as other operations,
and if youâre in the middle of a particularly complex proof checking operation,
it will sometimes suddenly pop up a box suggesting that you cancel your job,
so that it can get back to reading the news.&lt;/p&gt;

&lt;p&gt;However, it is improving.
In the latest versions, when you get a syntax error, it now tells you where in the file the error is.
And pressing Delete or Backspace while editing no longer causes it to crash and lose all unsaved data.
In general I feel that the TLA Toolbox is quite usable now.
If I were designing a new protocol, I would certainly use TLA to help with the design.&lt;/p&gt;

&lt;p&gt;TLA does not integrate with any language type systems, so even after you have a specification
you still need to check manually that your code matches the spec.
It would be nice if you could check this automatically, somehow.&lt;/p&gt;

&lt;p&gt;One final problem is that whenever I write a TLA specification, I feel the need to explain first what TLA is.
Hopefully it will become more popular and that problem will go away.&lt;/p&gt;

&lt;p&gt;Update 2019-01-10: Marek Marczykowski-GÃ³recki told me that the state model for network devices is the same as
the one for block devices, which is documented in the &lt;code&gt;blkif.h&lt;/code&gt; block device header file, and provided libvirt debugging help -
so the bug is &lt;a href=&quot;https://github.com/mirage/mirage-qubes/issues/25#issuecomment-452921207&quot;&gt;now fixed&lt;/a&gt;!&lt;/p&gt;

</content><id>http://roscidus.com/blog/blog/2019/01/01/using-tla-plus-to-understand-xen-vchan</id><title xml:base="http://roscidus.com/blog/blog/categories/ocaml/atom.xml" type="html">Using TLA+ to understand Xen vchan</title><updated>2019-01-01T09:15:18-00:00</updated><author><name>Thomas Leonard</name></author></entry><entry><summary xml:base="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" type="html">&lt;p&gt;camlCase is a blockchain research and development company, based in
Brooklyn, NY. We build developer tools, write educational material, and offer consulting services for Tezos, with a particular focus on Michelson,
Tezos&amp;#039; smart contract language.&lt;/p&gt;

&lt;p&gt;You might be a good fit if your experience and interest includes any of the
following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type-safe programming languages: OCaml, Haskell, Rust, PureScript&lt;/li&gt;
&lt;li&gt;Programming language design implementation: parsers, interpreters,
compilers, type systems, etc.&lt;/li&gt;
&lt;li&gt;Stack Machines: WebAssembly, the Ethereum Virtual Machine, Forth&lt;/li&gt;
&lt;li&gt;Reproducible declarative package management: Nix, Guix&lt;/li&gt;
&lt;li&gt;Formal verification tools: Coq, Agda, Idris&lt;/li&gt;
&lt;li&gt;Cryptography: Elliptic curves, zero-knowledge proofs, multisignature schemes&lt;/li&gt;
&lt;li&gt;Distributed systems: consensus algorithms, peer-to-peer network protocols&lt;/li&gt;
&lt;li&gt;Technical writing: tutorials, documentation, and other educational material&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We offer a flexible work environment with the possibility of remote work; as well as benefits and equity.&lt;/p&gt;
&lt;p&gt;Get information on &lt;a href=&quot;https://functionaljobs.com/jobs/9133-senior-software-engineer-at-camlcase&quot;&gt;how to apply&lt;/a&gt; for this position.&lt;/p&gt;</summary><source><updated>2019-01-20T17:02:01-00:00</updated><link href="https://functionaljobs.com/" rel="alternate"/><link title="Functional Jobs: Search 'ocaml'" type="application/atom+xml" href="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" rel="self"/><id>urn:uuid:50e619eb-15a8-f501-e0ba-bf6b6c4772f4</id><title xml:base="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" type="html">Functional Jobs: Search 'ocaml'</title><author><name>Functional Jobs</name></author><author><name>FunctionalJobs.com</name></author></source><link href="https://functionaljobs.com/jobs/9133-senior-software-engineer-at-camlcase" rel="alternate"/><id>urn:uuid:8d2607bf-4306-75d2-ae4c-adcf10b9e68b</id><title xml:base="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" type="html">Senior Software Engineer at camlCase (Full-time)</title><updated>2018-12-27T16:52:38-00:00</updated><author><name>FunctionalJobs.com</name></author></entry><entry><source><updated>2019-01-18T16:02:45-00:00</updated><rights type="text">Copyright 2019 OCaml Forge</rights><link title="OCaml Forge Project News" type="text/html" href="http://forge.ocamlcore.org/news/" rel="related"/><link title="OCaml Forge Project News" type="application/rss+xml" href="http://forge.ocamlcore.org/export/rss20_news.php" rel="self"/><generator>OCaml Forge RSS generator</generator><id>http://forge.ocamlcore.org/news/</id><title type="text">OCaml Forge Project News</title><author><name>OCamlCore Forge News</name></author></source><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=965" rel="alternate"/><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=965" rel="related"/><content xml:base="http://forge.ocamlcore.org/export/rss20_news.php" type="html">The ocaml-http project now resides on Github, https://github.com/sacerdot/ocaml-http. Further developments and new releases will take place on Github, not on this forge.</content><id>http://forge.ocamlcore.org/forum/forum.php?forum_id=965</id><title type="text">ocaml-http--migration-to-github</title><updated>2018-12-17T21:24:29-00:00</updated><author><email>sacerdot@users.forge.ocamlcore.org</email><name>Claudio Sacerdoti Coen</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/12/14/opam-2-0-2-release/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/12/14/opam-2-0-2-release/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;We are pleased to announce the release of &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.2&quot;&gt;opam 2.0.2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As &lt;strong&gt;sandbox scripts&lt;/strong&gt; have been updated, don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to update yours.&lt;/p&gt;
&lt;p&gt;This new version contains mainly &lt;a href=&quot;https://github.com/ocaml/opam/pull/3669&quot;&gt;backported fixes&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doc:
&lt;ul&gt;
&lt;li&gt;update man page&lt;/li&gt;
&lt;li&gt;add message for deprecated options&lt;/li&gt;
&lt;li&gt;reinsert removed ones to print a deprecated message instead of fail (e.g. &lt;code&gt;--alias-of&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;deprecate&lt;code&gt;Â no-aspcud&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pin:
&lt;ul&gt;
&lt;li&gt;on pinning, rebuild updated &lt;code&gt;pin-depends&lt;/code&gt; packages reliably&lt;/li&gt;
&lt;li&gt;include descr &amp;amp; url files on pinning 1.2 opam files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sandbox:
&lt;ul&gt;
&lt;li&gt;handle symlinks in bubblewrap for system directories such as &lt;code&gt;/bin&lt;/code&gt; or &lt;code&gt;/lib&lt;/code&gt; (&lt;a href=&quot;https://github.com/ocaml/opam/pull/3661&quot;&gt;#3661&lt;/a&gt;). Fixes sandboxing on some distributions such as CentOS 7 and Arch Linux.&lt;/li&gt;
&lt;li&gt;allow use of unix domain sockets on macOS (&lt;a href=&quot;https://github.com/ocaml/opam/issues/3659&quot;&gt;#3659&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;change one-line conditional to if statement which was incompatible with set -e&lt;/li&gt;
&lt;li&gt;make /var readonly instead of empty and rw&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Path: resolve default opam root path&lt;/li&gt;
&lt;li&gt;System: suffix .out for read_command_output stdout files&lt;/li&gt;
&lt;li&gt;Locked: check consistency with opam file when reading lock file to suggest regeneration message&lt;/li&gt;
&lt;li&gt;Show: remove pin depends messages&lt;/li&gt;
&lt;li&gt;Cudf: Fix closure computation in the presence of cycles to have a complete graph if a cycle is present in the graph (typically &lt;code&gt;ocaml-base-compiler&lt;/code&gt; â &lt;code&gt;ocaml&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;List: Fix some cases of listing coinstallable packages&lt;/li&gt;
&lt;li&gt;Format upgrade: extract archived source files of version-pinned packages&lt;/li&gt;
&lt;li&gt;Core: add is_archive in OpamSystem and OpamFilename&lt;/li&gt;
&lt;li&gt;Init: don&amp;#8217;t fail if empty compiler given&lt;/li&gt;
&lt;li&gt;Lint: fix light_uninstall flag for error 52&lt;/li&gt;
&lt;li&gt;Build: partial port to dune&lt;/li&gt;
&lt;li&gt;Update cold compiler to 4.07.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installation instructions (unchanged):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From binaries: run
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or download manually from &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.2&quot;&gt;the Github &amp;#8220;Releases&amp;#8221; page&lt;/a&gt; to your PATH.&lt;br /&gt;
In this case, don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed or to update your sandbox script.&lt;/li&gt;
&lt;li&gt;From source, using opam:
&lt;pre&gt;&lt;code&gt;opam update; opam install opam-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(then copy the opam binary to your PATH as explained, and don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed or to update you sandbox script)&lt;/li&gt;
&lt;li&gt;From source, manually: see the instructions in the &lt;a href=&quot;https://github.com/ocaml/opam/tree/2.0.2#compiling-this-repo&quot;&gt;README&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope you enjoy this new minor version, and remain open to &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;bug reports&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;suggestions&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: this article is cross-posted on &lt;a href=&quot;https://opam.ocaml.org/blog/&quot;&gt;opam.ocaml.org&lt;/a&gt; and &lt;a href=&quot;http://www.ocamlpro.com/category/blog/&quot;&gt;ocamlpro.com&lt;/a&gt;. Please head to the latter for the comments!&lt;/p&gt;&lt;/blockquote&gt;
</content><category term="OPAM"/><id>http://www.ocamlpro.com/?p=1344</id><title type="text">opam 2.0.2 release</title><updated>2018-12-14T15:06:30-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-12-12T00:00:00-00:00</updated><link href="https://opam.ocaml.org/blog/feed.xml" rel="self"/><contributor><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>{ Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:David.Allsopp(%C3%A0)cl.cam.ac.uk</uri><name>{ David Allsopp }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://anil.recoil.org</uri><name>{ Anil Madhavapeddy, Louis Gesbert }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert, Hannes Mehnert }</name></contributor><contributor><uri>https://opam.ocaml.org</uri><name>{ OCaml Platform Team }</name></contributor><contributor><uri>http://dave.recoil.org/</uri><name>{ Dave Scott }</name></contributor><contributor><uri>http://gazagnaire.org</uri><name>{ Thomas Gazagnaire }</name></contributor><contributor><uri>https://github.com/def-lkb</uri><name>{ Frederic Bour, Thomas Refis }</name></contributor><contributor><uri>http://roscidus.com/blog/</uri><name>{ Thomas Leonard }</name></contributor><contributor><uri>https://github.com/diml</uri><name>{ JÃ©rÃ©mie Dimino }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Thomas Gazagnaire }</name></contributor><id>https://opam.ocaml.org/blog/</id><title type="text">The OCaml Platform Blog</title><author><name>OCaml Platform</name></author><author><uri>https://opam.ocaml.org/</uri><name>The OCaml Platform Team</name></author></source><link type="text/html" href="https://opam.ocaml.org/blog/opam-2-0-2/" rel="alternate"/><link href="https://opam.ocaml.org/blog/opam-2-0-2/" rel="self"/><content xml:base="http://opam.ocaml.org/blog/feed.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">

<p>We are pleased to announce the release of <a href="https://github.com/ocaml/opam/releases/tag/2.0.2">opam 2.0.2</a>.</p>
<p>As <strong>sandbox scripts</strong> have been updated, don't forget to run <code>opam init --reinit -ni</code> to update yours.</p>
<p>This new version contains mainly <a href="https://github.com/ocaml/opam/pull/3669">backported fixes</a>:</p>
<ul><li>Doc:<ul><li>update man page</li><li>add message for deprecated options</li><li>reinsert removed ones to print a deprecated message instead of fail (e.g. <code>--alias-of</code>)</li><li>deprecate <code>no-aspcud</code></li></ul></li><li>Pin:<ul><li>on pinning, rebuild updated <code>pin-depends</code> packages reliably</li><li>include descr &amp; url files on pinning 1.2 opam files</li></ul></li><li>Sandbox:<ul><li>handle symlinks in bubblewrap for system directories such as <code>/bin</code> or <code>/lib</code> (<a href="https://github.com/ocaml/opam/pull/3661">#3661</a>).  Fixes sandboxing on some distributions such as CentOS 7 and Arch Linux.</li><li>allow use of unix domain sockets on macOS (<a href="https://github.com/ocaml/opam/issues/3659">#3659</a>)</li><li>change one-line conditional to if statement which was incompatible with set -e</li><li>make /var readonly instead of empty and rw</li></ul></li><li>Path: resolve default opam root path</li><li>System: suffix .out for read_command_output stdout files</li><li>Locked: check consistency with opam file when reading lock file to suggest regeneration message</li><li>Show: remove pin depends messages</li><li>Cudf: Fix closure computation in the presence of cycles to have a complete graph if a cycle is present in the graph (typically <code>ocaml-base-compiler</code> â <code>ocaml</code>) </li><li>List: Fix some cases of listing coinstallable packages</li><li>Format upgrade: extract archived source files of version-pinned packages</li><li>Core: add is_archive in OpamSystem and OpamFilename</li><li>Init: don't fail if empty compiler given</li><li>Lint: fix light_uninstall flag for error 52</li><li>Build: partial port to dune</li><li>Update cold compiler to 4.07.1</li></ul>

<p><hr/>Installation instructions (unchanged):</p>
<ol><li><p>From binaries: run</p>
<pre><code>sh &lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)</code></pre>

<p>or download manually from <a href="https://github.com/ocaml/opam/releases/tag/2.0.2">the Github &quot;Releases&quot; page</a> to your PATH. In this case, don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed or to update your sandbox script.</p>
</li><li><p>From source, using opam:</p>
<pre><code>opam update; opam install opam-devel</code></pre>

<p>(then copy the opam binary to your PATH as explained, and don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed or to update you sandbox script)</p>
</li><li><p>From source, manually: see the instructions in the <a href="https://github.com/ocaml/opam/tree/2.0.2#compiling-this-repo">README</a>.</p>
</li></ol>

<p>We hope you enjoy this new minor version, and remain open to <a href="https://github.com/ocaml/opam/issues">bug reports</a> and <a href="https://github.com/ocaml/opam/issues">suggestions</a>.</p>
<blockquote><p>NOTE: this article is cross-posted on <a href="https://opam.ocaml.org/blog/">opam.ocaml.org</a> and <a href="http://www.ocamlpro.com/category/blog/">ocamlpro.com</a>. Please head to the latter for the comments!</p>
</blockquote></div></content><id>https://opam.ocaml.org/blog/opam-2-0-2/</id><title type="text">opam 2.0.2 release</title><updated>2018-12-12T00:00:00-00:00</updated><author><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2018-12-06T00:00:00-00:00</published><link href="https://tarides.com/blog.html#2018-12-06-mirageos-towards-a-smaller-and-safer-os" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;Presentation about MirageOS in Lambda World CadÃ¬z on October 26th&lt;/p&gt;
</content><id>https://tarides.com/blog.html#2018-12-06-mirageos-towards-a-smaller-and-safer-os</id><title type="text">MirageOS, towards a smaller and safer OS</title><updated>2018-12-06T00:00:00-00:00</updated><author><name>Romain C.</name></author></entry><entry><source><updated>2018-12-05T08:00:00-00:00</updated><logo>http://gallium.inria.fr/blog/</logo><link title="Gagallium" type="text/html" href="http://gallium.inria.fr/blog/index.rss" rel="related"/><link title="Gagallium" type="application/rss+xml" href="http://gallium.inria.fr/blog/index.rss" rel="self"/><generator>Stog</generator><id>http://gallium.inria.fr/blog/index.rss</id><title type="text">Gagallium</title><author><name>GaGallium</name></author></source><link href="http://gallium.inria.fr/blog/fixin-your-automata" rel="alternate"/><content xml:base="http://gallium.inria.fr/blog/index.rss" type="html">

&lt;p&gt;There are several ways of compiling a &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;regular expression&lt;/a&gt; (RE) down to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Deterministic_finite_automaton&quot;&gt;deterministic finite-state automaton&lt;/a&gt; (DFA). One such way is based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Brzozowski_derivative&quot;&gt;Brzozowski derivatives&lt;/a&gt; of regular expressions. In this post, I describe a concise OCaml implementation of this transformation. This is an opportunity to illustrate the use of &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt;, a library that offers facilities for constructing (recursive) memoized functions and for performing least fixed point computations.&lt;/p&gt;




&lt;h2 id=&quot;from-res-to-dfas-via-brzozowski-derivatives&quot;&gt;From REs to DFAs, via Brzozowski derivatives&lt;/h2&gt;
&lt;p&gt;Suppose &lt;code&gt;e&lt;/code&gt; denotes a set of words. Then, its &lt;strong&gt;derivative&lt;/strong&gt; &lt;code&gt;delta a e&lt;/code&gt; is the set of words obtained by keeping only the words that begin with &lt;code&gt;a&lt;/code&gt; and by crossing out, in each such word, the initial letter &lt;code&gt;a&lt;/code&gt;. For instance, the derivative of the set &lt;code&gt;{ ace, amid, bar }&lt;/code&gt; with respect to &lt;code&gt;a&lt;/code&gt; is the set &lt;code&gt;{ ce, mid }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A regular expression is a syntactic description of a set of words. If the set &lt;code&gt;e&lt;/code&gt; is described by a regular expression, then its derivative &lt;code&gt;delta a e&lt;/code&gt; is also described by a regular expression, which can be effectively computed.&lt;/p&gt;
&lt;p&gt;Now, suppose that I am a machine and I am scanning a text, searching for a certain pattern. At each point in time, my current &lt;strong&gt;state&lt;/strong&gt; of mind is described by a regular expression &lt;code&gt;e&lt;/code&gt;: this expression represents the set of words that I am hoping to read, and that I am willing to accept. After I read one character, say &lt;code&gt;a&lt;/code&gt;, my current state &lt;strong&gt;changes&lt;/strong&gt; to &lt;code&gt;delta a e&lt;/code&gt;, because I have restricted my attention to the words of &lt;code&gt;e&lt;/code&gt; that begin with &lt;code&gt;a&lt;/code&gt;, and I am now hoping to recognize the remainder of such a word.&lt;/p&gt;
&lt;p&gt;Thus, the idea, in a nutshell, is to &lt;strong&gt;build a deterministic automaton whose states are regular expressions and whose transition function is &lt;code&gt;delta&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main nontrivial aspect of this apparently simple-minded approach is the fact that &lt;strong&gt;only a finite number of states arise&lt;/strong&gt; when one starts with a regular expression &lt;code&gt;e&lt;/code&gt; and explores its descendants through &lt;code&gt;delta&lt;/code&gt;. In other words, a regular expression &lt;code&gt;e&lt;/code&gt; only has a finite number of iterated derivatives, up to a certain equational theory. Thanks to this property, which I wonât prove here, the construction terminates, and yields a &lt;strong&gt;finite-state&lt;/strong&gt; automaton.&lt;/p&gt;
&lt;p&gt;For more details, please consult the paper &lt;a href=&quot;https://www.cs.kent.ac.uk/people/staff/sao/documents/jfp09.pdf&quot;&gt;Regular-expression derivatives re-examined&lt;/a&gt; by Scott Owens, John Reppy and Aaron Turon. In particular, Definition 4.1 in that paper gives a number of equations that must be exploited when deciding whether two regular expressions are equal. In the following, I refer to these equations collectively as &lt;strong&gt;EQTH&lt;/strong&gt;, for &lt;em&gt;equational theory&lt;/em&gt;. Among other things, these equations state that disjunction is associative, commutative, and idempotent. In other words, a disjunction must be viewed as a set of disjuncts. The empty regular expression can be viewed as an empty disjunction.&lt;/p&gt;

&lt;h2 id=&quot;an-alphabet&quot;&gt;An alphabet&lt;/h2&gt;
&lt;p&gt;Throughout, I assume that the alphabet is given by a module &lt;code&gt;Char&lt;/code&gt; whose signature is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;nc&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The fact that this alphabet is finite is witnessed by the existence of the function &lt;code&gt;Char.foreach&lt;/code&gt;, which enumerates all characters.&lt;/p&gt;
&lt;p&gt;As an exercise for the reader, this can be used to define an auxiliary function &lt;code&gt;exists_char&lt;/code&gt; of type &lt;code&gt;(Char.t -&amp;gt; bool) -&amp;gt; bool&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;regular-expressions-hash-consed&quot;&gt;Regular expressions, hash-consed&lt;/h2&gt;
&lt;p&gt;The syntax of regular expressions (expressions, for short) is naturally described by an algebraic data type &lt;code&gt;regexp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is the same syntax as in &lt;a href=&quot;https://www.cs.kent.ac.uk/people/staff/sao/documents/jfp09.pdf&quot;&gt;Owens et al.âs paper&lt;/a&gt;, except I use n-ary disjunctions and conjunctions. As explained above, this is dictated by the need to take EQTH into account. The data constructors &lt;code&gt;EDisj&lt;/code&gt; and &lt;code&gt;EConj&lt;/code&gt; carry a list of subexpressions. This list is normalized in such a way that, if two lists are equal as sets, then they are equal as lists, too. This list is never a singleton list. It can be empty: &lt;code&gt;EDisj []&lt;/code&gt; is the empty expression &lt;code&gt;zero&lt;/code&gt;, while &lt;code&gt;EConj []&lt;/code&gt; is the universal expression &lt;code&gt;one&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HashCons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;

&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EEpsilon&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EChar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ECat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EStar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EDisj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EConj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ENeg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A slight twist is that expressions are &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_consing&quot;&gt;&lt;strong&gt;hash-consed&lt;/strong&gt;&lt;/a&gt;. That is, every expression is decorated with an integer identifier. (A record of type &lt;code&gt;skeleton HashCons.cell&lt;/code&gt; is a pair of an integer identifier and a skeleton.) These identifiers are unique: two expressions are equal if and only if they carry the same identifier. (This notion of equality takes EQTH into account.) This allows testing very quickly whether two expressions are equal. This also allows building efficient dictionaries whose keys are expressions, or in other words, efficient memoized functions of type &lt;code&gt;regexp -&amp;gt; ...&lt;/code&gt;. This is heavily exploited in the code that follows: the functions &lt;code&gt;nullable&lt;/code&gt;, &lt;code&gt;delta&lt;/code&gt;, and &lt;code&gt;nonempty&lt;/code&gt; are three examples, and there are more. &lt;/p&gt;
&lt;p&gt;The module &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/blob/master/src/HashCons.mli&quot;&gt;HashCons&lt;/a&gt;, which is part of &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt;, provides facilities for hash-consing. (The reader is encouraged to take a look at &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/blob/master/src/HashCons.ml&quot;&gt;its implementation:&lt;/a&gt; it is very short.) It is used as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HashCons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ForHashedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;(* Define equality and hashing of skeletons. *)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;HashCons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;make&lt;/code&gt; is where the magic takes place: whenever one wishes to construct a new expression, one constructs just a skeleton and passes it to &lt;code&gt;make&lt;/code&gt;, which takes care of determining whether this skeleton is already known (in which case an existing integer identity is re-used) or is new (in which case a fresh integer identity is allocated). The function &lt;code&gt;skeleton&lt;/code&gt;, which converts between an expression and a skeleton in the reverse direction, is just a pair projection.&lt;/p&gt;
&lt;p&gt;Here are two basic examples of the use of &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EEpsilon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EDisj&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Still using &lt;code&gt;make&lt;/code&gt;, one can define several &lt;em&gt;smart constructors&lt;/em&gt; that build expressions: concatenation &lt;code&gt;@@&lt;/code&gt;, disjunction, conjunction, iteration, negation. These smart constructors reduce expressions to a normal form with respect to the equational theory EQTH. In particular, &lt;code&gt;disjunction&lt;/code&gt; flattens nested disjunctions, sorts the disjuncts, and removes duplicate disjuncts, so that two disjunctions that are equal according to EQTH are indeed recognized as equal.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(@@)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disjunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conjunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;nullability&quot;&gt;Nullability&lt;/h2&gt;
&lt;p&gt;An expression is nullable if and only if it accepts the empty word. Determining whether an expression is nullable is a simple matter of writing a recursive function &lt;code&gt;nullable&lt;/code&gt; of type &lt;code&gt;regexp -&amp;gt; bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I memoize this function, so the nullability of an expression is computed at most once and can be retrieved immediately if requested again. (This is not mandatory, but it is convenient to be able to call &lt;code&gt;nullable&lt;/code&gt; without worrying about its cost. Another approach, by the way, would be to store nullability information inside each expression.)&lt;/p&gt;
&lt;p&gt;The module &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/blob/master/src/Memoize.mli&quot;&gt;Memoize&lt;/a&gt;, which is part of &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt;, provides facilities for memoization. To use it, I apply the functor &lt;code&gt;Memoize.ForHashedType&lt;/code&gt; to a little module &lt;code&gt;R&lt;/code&gt; (not shown) which equips the type &lt;code&gt;regexp&lt;/code&gt; with equality, comparison, and hashing functions. (Because expressions carry unique integer identifiers, the definition of &lt;code&gt;R&lt;/code&gt; is trivial.) This functor application yields a module &lt;code&gt;M&lt;/code&gt; which offers a memoizing fixed-point combinator &lt;code&gt;M.fix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, instead of defining &lt;code&gt;nullable&lt;/code&gt; directly as a recursive function, I define it as an application of &lt;code&gt;M.fix&lt;/code&gt;, as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ForHashedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EEpsilon&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EStar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ECat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EDisj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EConj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ENeg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;derivation&quot;&gt;Derivation&lt;/h2&gt;
&lt;p&gt;It is now time to define a key operation: computing the Brzozowski derivative of an expression. If &lt;code&gt;a&lt;/code&gt; is a character and &lt;code&gt;e&lt;/code&gt; is an expression, then &lt;code&gt;delta a e&lt;/code&gt; is the derivative of &lt;code&gt;e&lt;/code&gt; with respect to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Implementing &lt;code&gt;delta&lt;/code&gt; is a textbook exercise. A key remark, though, is that this function &lt;strong&gt;must&lt;/strong&gt; be memoized in order to ensure good complexity. A naive, non-memoizing version of it would have exponential cost, due to the duplication that takes place in the cases of concatenation and iteration.&lt;/p&gt;
&lt;p&gt;In order to memoize a function of two arguments, one possible approach would be to rewrite it as a function that takes a pair as an argument. Here, instead, I rely on currying. For every character &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;delta a&lt;/code&gt; is a function of type &lt;code&gt;regexp -&amp;gt; regexp&lt;/code&gt;. I memoize each such function independently using &lt;code&gt;fix&lt;/code&gt;, and I memoize the function &lt;code&gt;delta&lt;/code&gt; itself using &lt;code&gt;memoize&lt;/code&gt;, a nonrecursive memoization combinator.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ForHashedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ForHashedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memoize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EEpsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EChar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ECat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EStar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EDisj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;disjunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EConj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;conjunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ENeg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;nonemptiness&quot;&gt;(Non)Emptiness&lt;/h2&gt;
&lt;p&gt;During the construction of the DFA (which comes up next), it is convenient to be able to (efficiently) decide whether an expression is nonempty (that is, whether it accepts at least one word).&lt;/p&gt;
&lt;p&gt;Following &lt;a href=&quot;https://www.cs.kent.ac.uk/people/staff/sao/documents/jfp09.pdf&quot;&gt;Owens et al.&lt;/a&gt;, I have included all three Boolean operators (disjunction, conjunction, negation) in the syntax of expressions. The presence of conjunction makes it apparently nontrivial to determine whether an expression is nonempty.&lt;/p&gt;
&lt;p&gt;Fortunately, by exploiting &lt;code&gt;nullable&lt;/code&gt;, &lt;code&gt;delta&lt;/code&gt;, and with the help of &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt;, I am able to define an efficient nonemptiness test in four lines of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ForHashedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lfp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test is based on the following fact: &lt;code&gt;e&lt;/code&gt; is nonempty if and only if either &lt;code&gt;e&lt;/code&gt; is nullable or there exists a character &lt;code&gt;a&lt;/code&gt; such that &lt;code&gt;delta a e&lt;/code&gt; is nonempty.&lt;/p&gt;
&lt;p&gt;This statement, however, cannot be used directly as a recursive definition of &lt;code&gt;nonempty&lt;/code&gt;, because such a definition would not be well-founded. An attempt to define &lt;code&gt;nonempty&lt;/code&gt; using &lt;code&gt;let rec&lt;/code&gt; or &lt;code&gt;M.fix&lt;/code&gt; would construct a possibly nonterminating function.&lt;/p&gt;
&lt;p&gt;Instead, the above statement must be viewed as &lt;strong&gt;an inductive characterization&lt;/strong&gt; of nonemptiness. That is, &lt;code&gt;nonempty&lt;/code&gt; is the &lt;strong&gt;least fixed point&lt;/strong&gt; in the Boolean lattice (where &lt;code&gt;false&lt;/code&gt; is less than &lt;code&gt;true&lt;/code&gt;) of the equation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists_char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main module of the &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt; library, named &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/blob/master/src/Core.mli&quot;&gt;Fix&lt;/a&gt;, is an algorithm for computing a least fixed point of type &lt;code&gt;variable -&amp;gt; property&lt;/code&gt;, where the type &lt;code&gt;property&lt;/code&gt; forms a lattice. The functor application &lt;code&gt;Fix.ForHashedType(R)(Prop.Boolean)&lt;/code&gt; instantiates this algorithm so that the type &lt;code&gt;variable&lt;/code&gt; is &lt;code&gt;regexp&lt;/code&gt; and the type &lt;code&gt;property&lt;/code&gt; is &lt;code&gt;bool&lt;/code&gt;. Then, the fixed point combinator &lt;code&gt;F.lfp&lt;/code&gt; allows us to give a straightforward definition of &lt;code&gt;nonempty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;nonempty&lt;/code&gt; thus defined is incremental. Nothing is computed when the function is constructed; computation takes place only when the function is invoked. It is also memoized: the nonemptiness of an expression, once computed, is recorded and is never recomputed. Thus, one can invoke this function without worrying about its cost.&lt;/p&gt;
&lt;p&gt;The reader might note that nonemptiness could also be computed via a graph traversal: an expression is nonempty if only there is exists a path from this expression to a nullable expression in the graph whose vertices are expressions and whose edges are determined by &lt;code&gt;delta&lt;/code&gt;. What I have just done is exploit the fact that co-accessibility is easily expressed as a least fixed point.&lt;/p&gt;



&lt;h2 id=&quot;constructing-a-dfa&quot;&gt;Constructing a DFA&lt;/h2&gt;
&lt;p&gt;The tools are now at hand to convert an expression to a deterministic finite-state automaton.&lt;/p&gt;
&lt;p&gt;I must first settle on a representation of such an automaton as a data structure in memory. I choose to represent a state as an integer in the range of &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of states. An automaton can then be described as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;init&lt;/code&gt; is the initial state. If it is absent, then the automaton rejects every input.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;decode&lt;/code&gt; maps every state to the expression that this state accepts. This expression is guaranteed to be nonempty. This state is a final state if and only if this expression is nullable.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;transition&lt;/code&gt; maps every state and character to an optional target state.&lt;/p&gt;
&lt;p&gt;Now, how does one construct a DFA for an expression &lt;code&gt;e&lt;/code&gt;? The answer is simple, really. Consider the infinite graph whose vertices are the nonempty expressions and whose edges are determined by &lt;code&gt;delta&lt;/code&gt;. The fragment of this graph that is reachable from &lt;code&gt;e&lt;/code&gt; is guaranteed to be finite, and is exactly the desired automaton.&lt;/p&gt;

&lt;p&gt;There are several ways of approaching the construction of this finite graph fragment. I choose to first perform a forward graph traversal during which I discover the vertices that are reachable from &lt;code&gt;e&lt;/code&gt; and number them from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;. Once this is done, completing the construction of a data structure of type &lt;code&gt;dfa&lt;/code&gt; is easy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach_successor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e'&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach_root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ForHashedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonempty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code, the module &lt;code&gt;G&lt;/code&gt; is a description of the graph that I wish to traverse.&lt;/p&gt;
&lt;p&gt;The module &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/blob/master/src/Number.mli&quot;&gt;Number&lt;/a&gt;, which is part of &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt;, helps explore this graph. The functor application &lt;code&gt;Number.ForHashedType(R)(G)&lt;/code&gt; performs a traversal of the graph &lt;code&gt;G&lt;/code&gt; and constructs a numbering &lt;code&gt;N&lt;/code&gt; of its vertices. The module &lt;code&gt;N&lt;/code&gt; contains the following data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;n&lt;/code&gt; is the number of vertices that have been discovered. The functions &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt; record the correspondence between vertices and numbers. In other words, &lt;code&gt;decode&lt;/code&gt; has type &lt;code&gt;state -&amp;gt; regexp&lt;/code&gt; and maps a state to the nonempty expression that this state stands for. Conversely, &lt;code&gt;encode&lt;/code&gt; has type &lt;code&gt;regexp -&amp;gt; state&lt;/code&gt; and maps a nonempty expression to a state.&lt;/p&gt;
&lt;p&gt;I extend &lt;code&gt;encode&lt;/code&gt; to a function of type &lt;code&gt;regexp -&amp;gt; state option&lt;/code&gt;, which can be applied to a possibly empty expression. Once this is done, the initial state &lt;code&gt;init&lt;/code&gt; is obtained by transporting the expression &lt;code&gt;e&lt;/code&gt; through the encoding, while the transition function &lt;code&gt;transition&lt;/code&gt; is obtained by transporting the function &lt;code&gt;delta&lt;/code&gt; through the encoding.&lt;/p&gt;
&lt;p&gt;Thatâs all!&lt;/p&gt;
&lt;p&gt;The automaton thus obtained is not necessarily minimal.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;The expression &lt;code&gt;dead&lt;/code&gt; gives rise, quite naturally, to the following automaton. As usual, every transition is labelled with a character. In addition, every state is labelled with the expression that it represents.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;dead.true.dot.png&quot;&gt;&lt;img src=&quot;dead.true.dot.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Naturally, this automaton is not very useful, as it merely tests whether the input &lt;strong&gt;begins&lt;/strong&gt; with &lt;code&gt;dead&lt;/code&gt;. To &lt;strong&gt;search&lt;/strong&gt; the input for the word &lt;code&gt;dead&lt;/code&gt;, one should use the expression &lt;code&gt;1dead&lt;/code&gt;. (Here, &lt;code&gt;1&lt;/code&gt; denotes the universal expression &lt;code&gt;one&lt;/code&gt;.) This expression gives rise to the following automaton:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;onedead.true.dot.png&quot;&gt;&lt;img src=&quot;onedead.true.dot.png&quot; style=&quot;width:100.0%&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is another example of searching for a nontrivial pattern. This automaton corresponds to the expression &lt;code&gt;1a(a|b)*(bc)*&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;oneastarabstarbc.true.dot.png&quot;&gt;&lt;img src=&quot;oneastarabstarbc.true.dot.png&quot; style=&quot;width:100.0%&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reader may notice that a final state can have outgoing transitions. If one is interested in finding all matches or in finding a longest match, then this is useful.&lt;/p&gt;
&lt;p&gt;However, if one is interested only in searching for a first match and a shortest match, then there is no need for a final state to have outgoing transitions. The above construction can easily be modified so that final states do not carry any outgoing transitions. This leads to slightly simpler automata. For instance, the expression &lt;code&gt;1dead&lt;/code&gt; leads to the following first-match automaton:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;onedead.false.dot.png&quot;&gt;&lt;img src=&quot;onedead.false.dot.png&quot; style=&quot;width:100.0%&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feeding an input text into this automaton is essentially equivalent to searching for the word &lt;code&gt;dead&lt;/code&gt; using the Knuth-Morris-Pratt algorithm.&lt;/p&gt;
&lt;p&gt;The expression &lt;code&gt;1(add|dead)&lt;/code&gt;, which is used to search a text for one of the words &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;dead&lt;/code&gt;, gives rise to the following first-match automaton:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;oneadddead.false.dot.png&quot;&gt;&lt;img src=&quot;oneadddead.false.dot.png&quot; style=&quot;width:100.0%&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feeding an input text into this automaton is essentially equivalent to searching for one of the words &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;dead&lt;/code&gt; using Aho and Corasickâs algorithm.&lt;/p&gt;


&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Memoization, hash-consing, and fixed points are powerful tools. The &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/&quot;&gt;fix&lt;/a&gt; library makes these tools easy to use. The conversion of regular expressions to deterministic finite-state automata by Brzozowskiâs method is a good illustration of their application.&lt;/p&gt;
&lt;p&gt;For more details, please look at the &lt;a href=&quot;https://gitlab.inria.fr/fpottier/fix/blob/master/demos/brz/&quot;&gt;full source code for this demo&lt;/a&gt;.&lt;/p&gt;


</content><id>http://gallium.inria.fr/blog/fixin-your-automata</id><title type="text">Fixin' your automata</title><updated>2018-12-05T08:00:00-00:00</updated><author><name>FranÃ§ois Pottier</name></author></entry><entry><source><updated>2018-11-29T12:00:00-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#e57ec3a4b50fbe07c1a9574ed82c1ce7</id><title type="text">Frama-C 18.0 (Argon) is out. Download ithere.</title><updated>2018-11-29T12:00:00-00:00</updated><author><name>Frama-C</name></author></entry><entry><summary xml:base="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" type="html">&lt;p&gt;&lt;strong&gt;Position summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are looking for senior Haskell engineers to join our team in London or work remotely.&lt;/p&gt;

&lt;p&gt;We want you to be someone who is looking to really help shape the future of the development team, have real impact on strategy, architecture and be the lead on our most important projects.&lt;/p&gt;

&lt;p&gt;You will expand our application&amp;rsquo;s capabilities in data ingestion, data exports, data standardisation and machine learning. We work in a functional programming stack in Haskell and Elm, together with machine learning components written in Python. Our development process includes CI/CD and automated tests. All developers work closely with our Chief Product Officer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills &amp;amp; experience required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Significant experience in a functional programming language, for instance: Haskell, Scala, F#, Ocaml, Clojure, etc.&lt;/li&gt;
&lt;li&gt;Extensive knowledge working with a major RDBMS: PostgreSQL, MySQL, MS SQL Server.&lt;/li&gt;
&lt;li&gt;Significant exposure to Javascript (node.js) and SPAs.&lt;/li&gt;
&lt;li&gt;Good understanding of Linux and Shell Scripting in Bash.&lt;/li&gt;
&lt;li&gt;Experience with basic machine learning algorithms, scikit-learn, Python, numPy, and pandas is highly beneficial.&lt;/li&gt;
&lt;li&gt;Experience with AWS Cloud services, particularly EC2, RDS, Codedeploy, Codebuild, Codepipelines, S3.&lt;/li&gt;
&lt;li&gt;Knowledge of build tools: Webpack, Makefiles.&lt;/li&gt;
&lt;li&gt;Experience with web servers: basics of load balancers, Nginx configuration, etc.&lt;/li&gt;
&lt;li&gt;Familiarity with Git and GitHub.&lt;/li&gt;
&lt;li&gt;Familiarity with Docker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;About the Company&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PRODA is a PropTech start-up founded in January 2017. We focus on solving core data processing pain points in real estate, and believe that unstructured data is a key barrier to digital transformation in the industry. &lt;/p&gt;

&lt;p&gt;PRODA is combining real estate expertise with data science to develop machine leaning-enabled software, with the aim of truly automating many analysis and reporting tasks for real estate professionals.&lt;/p&gt;

&lt;p&gt;Our software automatically captures property data from spreadsheets, before standardising, error-checking &amp;amp; securely storing it. This enables users to standardise and access all their data, regardless of the country, asset class or company that it originated from.&lt;/p&gt;

&lt;p&gt;Once standardised, many exciting machine-learning analyses, track changes and machine written reports are possible.&lt;/p&gt;

&lt;p&gt;Please find press releases and the PRODA Whitepaper in the &lt;a href=&quot;https://www.proda.ai/news/&quot;&gt;PRODA news section&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based in a smart We-work in London&amp;#039;s South-bank PRODA has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern, open office with communal areas, quite spaces, table games, unlimited teas and coffees and beers in the evenings&lt;/li&gt;
&lt;li&gt;Focus on getting in specialists, encouraging meetups, conferences, training and learning for software engineers&lt;/li&gt;
&lt;li&gt;Regular team meals and activities&lt;/li&gt;
&lt;li&gt;Culture of smart individuals who collaborate to solve interesting problems using interesting technologies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Get information on &lt;a href=&quot;https://functionaljobs.com/jobs/9117-senior-haskell-full-stack-developer-at-proda-ltd&quot;&gt;how to apply&lt;/a&gt; for this position.&lt;/p&gt;</summary><source><updated>2019-01-20T17:02:01-00:00</updated><link href="https://functionaljobs.com/" rel="alternate"/><link title="Functional Jobs: Search 'ocaml'" type="application/atom+xml" href="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" rel="self"/><id>urn:uuid:50e619eb-15a8-f501-e0ba-bf6b6c4772f4</id><title xml:base="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" type="html">Functional Jobs: Search 'ocaml'</title><author><name>Functional Jobs</name></author><author><name>FunctionalJobs.com</name></author></source><link href="https://functionaljobs.com/jobs/9117-senior-haskell-full-stack-developer-at-proda-ltd" rel="alternate"/><id>urn:uuid:b32657ba-f50a-c57f-5f39-31b127f11f5f</id><title xml:base="http://functionaljobs.com/jobs/search/?q=ocaml&amp;format=rss" type="html">Senior Haskell / Full Stack Developer at PRODA Ltd (Full-time)</title><updated>2018-11-26T15:20:47-00:00</updated><author><name>FunctionalJobs.com</name></author></entry><entry><source><updated>2018-12-05T08:00:00-00:00</updated><logo>http://gallium.inria.fr/blog/</logo><link title="Gagallium" type="text/html" href="http://gallium.inria.fr/blog/index.rss" rel="related"/><link title="Gagallium" type="application/rss+xml" href="http://gallium.inria.fr/blog/index.rss" rel="self"/><generator>Stog</generator><id>http://gallium.inria.fr/blog/index.rss</id><title type="text">Gagallium</title><author><name>GaGallium</name></author></source><link href="http://gallium.inria.fr/blog/safely-typing-algebraic-effects" rel="alternate"/><content xml:base="http://gallium.inria.fr/blog/index.rss" type="html">

&lt;p&gt;Last year (2017), I was following the &lt;a href=&quot;https://wikimpri.dptinfo.ens-cachan.fr/&quot;&gt;MPRI&lt;/a&gt;, a research-oriented master programme in Paris. The project for the &lt;a href=&quot;https://gitlab.inria.fr/fpottier/mpri-2.4-public/tree/978160d262d503714e212fc2d28c9451c63fe714&quot;&gt;Functional programming and type systems&lt;/a&gt; course (taught by &lt;a href=&quot;http://gallium.inria.fr/~fpottier/&quot;&gt;FranÃ§ois Pottier&lt;/a&gt;, &lt;a href=&quot;http://cristal.inria.fr/~remy/&quot;&gt;Didier RÃ©my&lt;/a&gt;, &lt;a href=&quot;http://yann.regis-gianas.org/&quot;&gt;Yann RÃ©gis-Gianas&lt;/a&gt; and &lt;a href=&quot;https://pages.lip6.fr/Pierre-Evariste.Dagand/&quot;&gt;Pierre-Ãvariste Dagand&lt;/a&gt;) was to write a compiler for a tiny functional language. I extended that project with algebraic effects and a static type system checking that effects could not be unhandled. Explaining the type system of &lt;a href=&quot;https://github.com/Ekdohibs/joujou/&quot;&gt;my implementation&lt;/a&gt; is what this post is about.&lt;/p&gt;




&lt;h2 id=&quot;introduction-to-algebraic-effects&quot;&gt;Introduction to algebraic effects&lt;/h2&gt;
&lt;p&gt;In programming, we say that an expression performs a side effect when its behaviour can depend on the context where it is executed, or modify that context. The most basic examples of this are accessing and modifying a mutable mutable variable, as well as input and output.&lt;/p&gt;
&lt;p&gt;Algebraic effects take this idea one step further, and allow functions to perform user-defined effects, whose behaviour is given dynamically by an effect handler. Effect handlers control the behaviour to give to effects during the evaluation of an expression. The syntax and semantics are very similar to that of exceptions and the &lt;code&gt;match with exception&lt;/code&gt; syntax. Let us recall how these work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When evaluating the expression above, &lt;code&gt;f ()&lt;/code&gt; will be called. If it returns a value &lt;code&gt;x&lt;/code&gt;, then &lt;code&gt;g x&lt;/code&gt; will be called and its result will be the result of the whole &lt;code&gt;match&lt;/code&gt; expression. However, if it raises the exception &lt;code&gt;Not_found&lt;/code&gt;, then the result of the &lt;code&gt;match&lt;/code&gt; expression will be &lt;code&gt;42&lt;/code&gt;, and if it raises another exception, the whole &lt;code&gt;match&lt;/code&gt; construct will raise that same exception. Note that there is an important difference with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in that exceptions in &lt;code&gt;g x&lt;/code&gt; are not handled by the &lt;code&gt;match&lt;/code&gt; example: if it raises &lt;code&gt;Not_found&lt;/code&gt;, the &lt;code&gt;match&lt;/code&gt; example will re-raise the exception, while the &lt;code&gt;try&lt;/code&gt; example will return 42.&lt;/p&gt;
&lt;p&gt;Algebraic effects are quite similar, although the syntax is slightly different. The keyword &lt;code&gt;perform&lt;/code&gt; is used instead of &lt;code&gt;raise&lt;/code&gt;, and &lt;code&gt;effect&lt;/code&gt; instead of &lt;code&gt;exception&lt;/code&gt;, with a couple differences. The following expression&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is a handler around the scrutinee computation &lt;code&gt;...&lt;/code&gt;. If evaluating the scrutinee returns a value &lt;code&gt;x&lt;/code&gt;, it is passed by the handler unchanged. If it raises the &lt;code&gt;Get&lt;/code&gt; effect, then the behaviour is determined by the way the &lt;code&gt;effect Get&lt;/code&gt; clause handles its âcontinuationâ &lt;code&gt;k&lt;/code&gt;: the value passed to &lt;code&gt;k&lt;/code&gt; in this clause (here 6) is used to continue the computation of the scrutinee, starting over where &lt;code&gt;perform&lt;/code&gt; was interrupted (effect handlers generalize Lispâs âresumable exceptionsâ).&lt;/p&gt;
&lt;p&gt;With a full example, we have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the scrutinee is &lt;code&gt;perform Get * 7&lt;/code&gt;, so the computation restarts as &lt;code&gt;6 * 7&lt;/code&gt;, and the whole &lt;code&gt;match&lt;/code&gt; expression returns &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will not dwell on the uses of algebraic effects here, as our goal, typing effects, only requires to know what the basics of effects are. If you are interested in them, you can learn more &lt;a href=&quot;https://github.com/ocamllabs/ocaml-effects-tutorial&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;https://www.eff-lang.org/handlers-tutorial.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One problem happening with effects is the same that happens with exceptions: not handling an effect or an exception is an error and interrupts the program. However, it is much more important in the case of effects than exceptions, as effect handlers, unlike exceptions, are not used only in exceptional situations, so there are a lot more places where there is a risk of an error. The whole point of typing being to avoid statically-identifiable errors, we want a type system that prevents them from happening in the first place.&lt;/p&gt;
&lt;h2 id=&quot;typing-with-effects&quot;&gt;Typing with effects&lt;/h2&gt;
&lt;p&gt;When we want to type effects, we have to make a difference between values, which have a type, and computations, which have a type and can produce effects when executed. We usually write a typing judgement &lt;code&gt;e : t!Î&lt;/code&gt; when &lt;code&gt;e&lt;/code&gt; is an expression of type &lt;code&gt;t&lt;/code&gt; which produces an effect &lt;code&gt;Î&lt;/code&gt; when executed. However, if we execute &lt;code&gt;let x = e;;&lt;/code&gt; in the toplevel, then the answer will be of the form &lt;code&gt;val x : t&lt;/code&gt;, since the value of &lt;code&gt;x&lt;/code&gt; has the type &lt;code&gt;t&lt;/code&gt;, and the effect &lt;code&gt;Î&lt;/code&gt; has already happened, and no longer exists in the type.&lt;/p&gt;
&lt;p&gt;Moreover, since functions perform computations, there is an effect in the type of the function itself. Thus, an arrow type takes a type and produces a type with effect. We write &lt;code&gt;s -&amp;gt; (t!Î)&lt;/code&gt; as &lt;code&gt;s -[Î]-&amp;gt; t&lt;/code&gt; with the effect on the arrow to make it explicit that it is the function that performs the effect.&lt;/p&gt;
&lt;p&gt;Note that a function of type &lt;code&gt;s -[Î]-&amp;gt; t&lt;/code&gt; may perform the effects in &lt;code&gt;Î&lt;/code&gt;, but it does not have to. However, it may not perform any effect not listed in &lt;code&gt;Î&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another thing to note is that effects can already be expressed in existing languages using monads, where the type &lt;code&gt;t!Î&lt;/code&gt; woould be replaced by a value of type &lt;code&gt;M Î t&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; is a monad expressing computation. However, making effects first-class both expresses that effects only happen at computation time and do not impact the behaviour of an expression after that, and allows easier design and experimentation about the type system.&lt;/p&gt;
&lt;h2 id=&quot;first-try-row-polymorphism-and-the-usual-unification-algorithm&quot;&gt;First try: row polymorphism and the usual unification algorithm&lt;/h2&gt;
&lt;p&gt;The first idea for typing effects is to use Hindley-Milner typing. To capture the fact that a function of type &lt;code&gt;s -[Î]-&amp;gt; t&lt;/code&gt; is also of type &lt;code&gt;s -[Î']-&amp;gt; t&lt;/code&gt; when &lt;code&gt;Î&lt;/code&gt; is included in &lt;code&gt;Î'&lt;/code&gt;, we use row polymorphism. The type of the function would now be &lt;code&gt;s -[Î; !r]-&amp;gt; t&lt;/code&gt; with &lt;code&gt;!r&lt;/code&gt; a row variable, that is a variable that quantifies over what can be added to &lt;code&gt;Î&lt;/code&gt;. That type can later be instantiated to any &lt;code&gt;s -[Î']-&amp;gt; t&lt;/code&gt; with &lt;code&gt;Î&lt;/code&gt; included in &lt;code&gt;Î'&lt;/code&gt; by taking &lt;code&gt;!r&lt;/code&gt; as the difference of &lt;code&gt;Î'&lt;/code&gt; and &lt;code&gt;Î&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, we could define function composition:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;compose&lt;/code&gt; function takes two functions as arguments, and returns their composition. It assumes both input functions can only produce the effect &lt;code&gt;!r&lt;/code&gt;, and the function it returns can then only produce that effect &lt;code&gt;!r&lt;/code&gt;. The two extra effect variables, &lt;code&gt;!s&lt;/code&gt; and &lt;code&gt;!t&lt;/code&gt;, are used to make the function type more general, since we want to use the partial applications, which will produce no effect at all, in a context where any function is expected.&lt;/p&gt;
&lt;p&gt;However, doing so suffers from over-unification. Indeed, consider the following program for which we wish to infer types using effects:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We would like to get the following type annotations:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we have row variables everywhere, as usual with row polymorphism. This is because we want to be able to use a function that does not perform any effect in any place where a function that performs an effect is expected. So, while giving &lt;code&gt;double&lt;/code&gt; the type&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;('a -[!r]-&amp;gt; 'a) -[]-&amp;gt; ('a -[!r]-&amp;gt; 'a)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;would be correct, it would not allow us to use the function &lt;code&gt;double f&lt;/code&gt; (where &lt;code&gt;f&lt;/code&gt; is any function), in a place where a function performing an effect is expected.&lt;/p&gt;
&lt;p&gt;However, with the usual Hindley-Milner type inference algorithm, we get something less general:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;double&lt;/code&gt; can only take a function that performs no effect at all.&lt;/p&gt;
&lt;p&gt;So, what happened? If we look in the definition of &lt;code&gt;iter&lt;/code&gt;, the recursive call is done with a type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;int -[!s]-&amp;gt; ('a -[!s]-&amp;gt; 'a) -[!s]-&amp;gt; 'a -[!s]-&amp;gt; 'a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This type is not the same as &lt;code&gt;int -[!r]-&amp;gt; ('a -[!s]-&amp;gt; 'a) -[!t]-&amp;gt; 'a -[!s]-&amp;gt; 'a&lt;/code&gt;, but only an &lt;em&gt;instantiation&lt;/em&gt; of the former. Since this is a recursive function, the types must be exactly the same, resulting in &lt;code&gt;!r&lt;/code&gt; and &lt;code&gt;!t&lt;/code&gt; being unified with &lt;code&gt;!s&lt;/code&gt;. Then, when creating &lt;code&gt;double&lt;/code&gt;, the resulting effect of the evaluation is unified with the empty effect, since top-level statements are forbidden to produce an effect (remember, we want checked effects), which prevents &lt;code&gt;double&lt;/code&gt; from using a function that performs an effect.&lt;/p&gt;
&lt;p&gt;The problem in the definition of &lt;code&gt;iter&lt;/code&gt; is exactly the same that happens when we write the following in vanilla OCaml:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, a resulting type of &lt;code&gt;'a -&amp;gt; 'b -&amp;gt; 'c&lt;/code&gt; would be sound as well, but requires polymorphic recursion. It is possible to do that in the OCaml type system, but requires an explicit annotation. We do not want that for effects, as it would require to annotate &lt;em&gt;every single recursive function&lt;/em&gt; with its type to get the types we would like. Although polymorphic recursion making Hindley-Milner type inference undecidable is a folklore result, it might not be the case if limited to effect variables as we are trying to do. The existence of the solution presented below, even if it is based on a different type system, could be seen as a hint that it might actually remain decidable, but I did not explore this idea further.&lt;/p&gt;
&lt;h2 id=&quot;exploiting-subtyping&quot;&gt;Exploiting subtyping&lt;/h2&gt;
&lt;p&gt;We need to exploit the structure that exists in the problem at hand to be able to get general enough types. One property we have is subtyping: a function that performs no effect at all can be used where a function that can perform an effect is expected.&lt;/p&gt;
&lt;p&gt;In a system with effect subtyping, we expect the following types for the two functions above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, the recursive call in &lt;code&gt;iter&lt;/code&gt; is allowed, since &lt;code&gt;int -[]-&amp;gt; ('a -[!r]-&amp;gt; 'a) -[]-&amp;gt; 'a -[!r]-&amp;gt; 'a&lt;/code&gt; is a subtype of &lt;code&gt;int -[!r]-&amp;gt; ('a -[!r]-&amp;gt; 'a) -[!r]-&amp;gt; 'a -[!r]-&amp;gt; 'a&lt;/code&gt;, and thus can be used in its place. &lt;code&gt;double&lt;/code&gt; has the expected type, since the effect type variable &lt;code&gt;!r&lt;/code&gt; did not get unified.&lt;/p&gt;
&lt;p&gt;The advantage of using subtyping here is that we did not require polymorphic recursion, that the usual ML type inference algorithm was not able to handle. Unfortunately, by doing so, it seems like we went out of the frying pan and into the fire: we no longer need polymorphic recursion, but we need to handle subtyping instead. Fortunately, a solution exists, which is the recent MLsub inference algorithm by Stephen Dolan, which infers compact (constraint-less) principal types for programs using subtyping.&lt;/p&gt;
&lt;p&gt;MLsub is easy to extend to support additional features, in our case checking effects. We only need to define how effects are typed. Let us first see a quick summary of MLsubâs features. MLsub extends types with type union &lt;code&gt;a | b&lt;/code&gt; and intersection &lt;code&gt;a &amp;amp; b&lt;/code&gt;, as well as neutral elements, &lt;code&gt;bottom&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt;, for these operations. Subtyping in MLsub is structural and not based on quantification: if a type &lt;code&gt;a&lt;/code&gt; is a subtype of &lt;code&gt;b&lt;/code&gt;, then every value of type &lt;code&gt;a&lt;/code&gt; is a value of type &lt;code&gt;b&lt;/code&gt;, but the other direction is wrong. This means that to prove that a type &lt;code&gt;a&lt;/code&gt; is a subtype of type &lt;code&gt;b&lt;/code&gt;, only logical operations such as commutativity and associativity of &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;, or their basic properties can be used. For instance, &lt;code&gt;int &amp;amp; string&lt;/code&gt; would not be a subtype of &lt;code&gt;bottom&lt;/code&gt;, even if it is a logically empty type, because proving it would require proving that either &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt; are subtypes of &lt;code&gt;bottom&lt;/code&gt;, both of which are false. Moreover, variables as really treated as indeterminates and not as quantification, for purposes of subtyping. MLsub also has recursive types, which are needed to assign a principal type to some expressions like &lt;code&gt;let rec f x = f&lt;/code&gt;. Finally, in order to make type inference decidable, MLsub makes a difference between positive and negative positions and variable occurrences: during type inference, &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; may only appear in positive positions, while &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; may only appear in negative positions. As a consequence, user-definable types must not include &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt; or &lt;code&gt;top&lt;/code&gt;, since they can be used in both positive and negative positions.&lt;/p&gt;
&lt;p&gt;We will not get into the details of how MLsubâs inference algorithm works here. Instead, we will see how effects, that we add to MLsub, are typed. We use a multi-kinded type system, with two kinds: types and effect types. An effect type corresponds to whether a specific effect can be present or not: it can either be &lt;code&gt;absent&lt;/code&gt; or &lt;code&gt;maybe present&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, as with the other types, we extend this type system to add &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, and type variables. Both &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; are added as well, but are redundant: &lt;code&gt;top&lt;/code&gt; is the same as &lt;code&gt;maybe present&lt;/code&gt;, and &lt;code&gt;bottom&lt;/code&gt; as &lt;code&gt;absent&lt;/code&gt;, except that &lt;code&gt;absent&lt;/code&gt; and &lt;code&gt;maybe present&lt;/code&gt; can be used in both positive and negative positions. Then, when an expression is typed, we use a single effect type for each effect that appears in the expression, and a catchall effect type for all other effects, which will all behave in the same way for that expression, since they do not appear in it. In other words:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16%&quot;/&gt;
&lt;col style=&quot;width: 52%&quot;/&gt;
&lt;col style=&quot;width: 31%&quot;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Arrow type&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Desugared&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Can performâ¦&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;-[]-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;-[catchall: absent]-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;no effect at all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;-[A, B]-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;-[A: maybe present, B: maybe present, catchall: absent]-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;the effects &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;-[C, !r]-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;-[C: maybe present, catchall: !r]-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;the effect &lt;code&gt;C&lt;/code&gt; or an effect in &lt;code&gt;!r&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is actually the same thing that we had for row polymorphism, except that with subtyping, row variables are not as omnipresent as previously: subtyping allows us to use &lt;code&gt;_ -[]-&amp;gt; _&lt;/code&gt; for a function that does not perform any effect, whereas with only row polymorphism, we would have needed to use &lt;code&gt;_ -[!r]-&amp;gt; _&lt;/code&gt; to be able to use this function in a context expecting a function that produces an effect.&lt;/p&gt;
&lt;p&gt;Integrating that in the MLsub inference algorithm gives us precisely what we previously wanted, that is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-[!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;implementation-and-conclusion&quot;&gt;Implementation and conclusion&lt;/h2&gt;
&lt;p&gt;I &lt;a href=&quot;https://github.com/Ekdohibs/joujou/&quot;&gt;implemented&lt;/a&gt; MLsubâs type inference algorithm for that project. Although MLsubâs &lt;a href=&quot;http://stedolan.net/research/mlsub.pdf&quot;&gt;paper&lt;/a&gt; explained quite well the ideas behind MLsub to give a good enough intuition about it, I needed to read Stephen Dolanâs &lt;a href=&quot;https://www.cl.cam.ac.uk/~sd601/thesis.pdf&quot;&gt;thesis&lt;/a&gt; to be able to implement it. Besides, I managed to get a simple implementation only after reading his code and realizing that a structural type with destructive unification can be used to implicitely represent the automaton with references, making the implementation of the algorithm a lot closer to that of Hindley-Milner type inference with destructive unification, and thus a lot simpler. With that representation in mind, all algorithms become a lot more natural to write and easier to understand, at least for someone which has already some experience with Hindley-Milner type inference. All in all, the typer, which only supports a very simple type system if you exclude effects and subtyping, is about 1500 lines long and requires quite complicated types in some places (one of them is a type where some constructors contain sets of elements of the type itself, requiring the use of recursive modules).&lt;/p&gt;
&lt;p&gt;There still are some rough edges, though. First and foremost, effects cannot hold type information. This means that polymorphic effects are completely impossible. Second, it is unclear how to treat local effects (similar to local exceptions in OCaml): how can it be guaranteed that a function that raises a given local effect can never escape the scope where that local effect is defined?&lt;/p&gt;
&lt;p&gt;The first of these problems is mainly due to the semantics of effect matching. In the case of nested effect handlers for the same effect, performing the effect inside the innermost handler causes that handler to be used. However, in some cases, that use of the effect will have been typed with respect to the outermost handler. With pre-defined effects that have a fixed type, this causes no problem. However, with polymorphic effects, they might correspond to different instantiations, breaking type safety. For instance, consider the functions below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, &lt;code&gt;g&lt;/code&gt; is well-typed with type&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;(unit -[Exit : 'a, !r]-&amp;gt; 'a) -[!r]-&amp;gt; 'a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is a subtype of&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;(unit -[!r]-&amp;gt; 'a) -[!r]-&amp;gt; 'a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instanciating it with &lt;code&gt;!r = Exit : bool&lt;/code&gt; and &lt;code&gt;'a = int&lt;/code&gt; makes the whole expression well-typed, when it tests if &lt;code&gt;false &amp;lt; 7&lt;/code&gt; at runtime, breaking type safety.&lt;/p&gt;
&lt;p&gt;A way to prevent that which would not be overly restrictive in terms of expressivity would be to disallow such cases in the type system, and add &lt;code&gt;protect&lt;/code&gt; and &lt;code&gt;unprotect&lt;/code&gt; operators that would hide the effect of a subexpression from the surrounding effect handler. They could even be added in a type-directed way, but the semantics of the language will depend on the typing.&lt;/p&gt;
&lt;p&gt;Concerning the second problem with local effects, a straightforward check is to ensure the added effect does not leak into the return type of the function. However, I have no proof that it is correct for now, so if you have one or find a counter-example, please leave a comment about it.&lt;/p&gt;
&lt;p&gt;In case you want to learn more about MLsub, I encourage you to read Stephen Dolanâs MLsub &lt;a href=&quot;http://stedolan.net/research/mlsub.pdf&quot;&gt;paper&lt;/a&gt;, or even his whole &lt;a href=&quot;https://www.cl.cam.ac.uk/~sd601/thesis.pdf&quot;&gt;thesis&lt;/a&gt;. If you are interested in joujouâs typing rules, you can have a look at them in the &lt;a href=&quot;https://github.com/Ekdohibs/joujou/blob/master/report/report.pdf&quot;&gt;report&lt;/a&gt; for the project (in French).&lt;/p&gt;


</content><id>http://gallium.inria.fr/blog/safely-typing-algebraic-effects</id><title type="text">Safely typing algebraic effects</title><updated>2018-11-26T08:00:00-00:00</updated><author><name>NathanaÃ«l Courant</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/11/21/an-introduction-to-tezos-rpcs-signing-operations/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/11/21/an-introduction-to-tezos-rpcs-signing-operations/#comments" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;In a &lt;a href=&quot;http://www.ocamlpro.com/2018/11/15/an-introduction-to-tezos-rpcs-a-basic-wallet/&quot;&gt;previous blog post&lt;/a&gt;, we presented the RPCs used by tezos-client to&lt;br /&gt;
send a transfer operation to a tezos-node. We were left with two&lt;br /&gt;
remaining questions:&lt;/p&gt;
&lt;p&gt;* How to forge a binary operation, for signature&lt;br /&gt;
* How to sign a binary operation&lt;/p&gt;
&lt;p&gt;In this post, we will reply to these questions. We are still assuming&lt;br /&gt;
a node running and waiting for RPCs on address 127.0.0.1:9731. Since we will ask this node to forge a request, we really need to trust it, as a malicious node could send a different binary transaction from the one we sent him.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take back our first operation:&lt;/p&gt;
&lt;pre&gt;{
  &quot;branch&quot;: &quot;BMHBtAaUv59LipV1czwZ5iQkxEktPJDE7A9sYXPkPeRzbBasNY8&quot;,
  &quot;contents&quot;: [
    { &quot;kind&quot;: &quot;transaction&quot;,
      &quot;source&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
      &quot;fee&quot;: &quot;50000&quot;,
      &quot;counter&quot;: &quot;3&quot;,
      &quot;gas_limit&quot;: &quot;200&quot;,
      &quot;storage_limit&quot;: &quot;0&quot;,
      &quot;amount&quot;: &quot;100000000&quot;,
      &quot;destination&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot;
   } ]
}&lt;/pre&gt;
&lt;p&gt;So, we need to translate this operation into a binary format, more amenable for signature. For that, we use a new RPC to forge operations. Under Linux, we can use the tool &lt;code&gt;curl&lt;/code&gt;Â to send the request to the node:&lt;/p&gt;
&lt;pre&gt;curl -v -X POST http://127.0.0.1:9731/chains/main/blocks/head/helpers/forge/operations -H &quot;Content-type: application/json&quot; --data '{
  &quot;branch&quot;: &quot;BMHBtAaUv59LipV1czwZ5iQkxEktPJDE7A9sYXPkPeRzbBasNY8&quot;,
  &quot;contents&quot;: [
    { &quot;kind&quot;: &quot;transaction&quot;,
      &quot;source&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
      &quot;fee&quot;: &quot;50000&quot;,
      &quot;counter&quot;: &quot;3&quot;,
      &quot;gas_limit&quot;: &quot;200&quot;,
      &quot;storage_limit&quot;: &quot;0&quot;,
      &quot;amount&quot;: &quot;100000000&quot;,
      &quot;destination&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot;
  } ]
}'&lt;/pre&gt;
&lt;p&gt;Note that we use a POST request (request with content), with a Content-type header indicating that the content is in JSON format. We get the following body in the reply :&lt;/p&gt;
&lt;pre&gt;&quot;ce69c5713dac3537254e7be59759cf59c15abd530d10501ccf9028a5786314cf08000002298c03ed7d454a101eb7022bc95f7e5f41ac78d0860303c8010080c2d72f0000e7670f32038107a59a2b9cfefae36ea21f5aa63c00&quot;&lt;/pre&gt;
&lt;p&gt;This is the binary representation of our operation, in hexadecimal format, exactly what we were looking for to be able to include operations on the blockchain. However, this representation is not yet complete, since we also need the operation to be signed by the manager.&lt;/p&gt;
&lt;p&gt;To sign this operation, we will first use &lt;code&gt;tezos-client&lt;/code&gt;. That&amp;#8217;s something that we can do if we want, for example, to sign an operation offline, for better security. Let&amp;#8217;s assume that we have saved the content of the string (&lt;code&gt;ce69...3c00&lt;/code&gt;Â without the quotes) in a file &lt;code&gt;operation.hex&lt;/code&gt;, we can ask tezos-client to sign it with:&lt;/p&gt;
&lt;pre&gt;tezos-client --addr 127.0.0.1 --port 9731 sign bytes 0x03$(cat operation.hex) for bootstrap1
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;0x03$(cat operation.hex)&lt;/code&gt;Â is the concatenation of the &lt;code&gt;0x03&lt;/code&gt; prefix and the hexa content of the &lt;code&gt;operation.hex&lt;/code&gt;, which is equivalent to &lt;code&gt;0x03ce69...3c00&lt;/code&gt;. The prefix is used (1) to indicate that the representation is hexadecimal (&lt;code&gt;0x&lt;/code&gt;), and (2) that it should start with &lt;code&gt;03&lt;/code&gt;, which is a watermark for operations in Tezos.&lt;/p&gt;
&lt;p&gt;We get the following reply in the console:&lt;/p&gt;
&lt;pre&gt;Signature: edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg&lt;/pre&gt;
&lt;p&gt;Wonderful, we have a signature, in &lt;code&gt;base58check&lt;/code&gt; format ! We can use this signature in the &lt;code&gt;run_operation&lt;/code&gt; and &lt;code&gt;preapply&lt;/code&gt; RPCs&amp;#8230; but not in the &lt;code&gt;injection&lt;/code&gt; RPC, which requires a binary format. So, to inject the operation, we need to convert to the hexadecimal version of the signature.Â  For that, we will use the &lt;code&gt;base58check&lt;/code&gt; package of Python (we could do it in OCaml, but then, we could just use &lt;code&gt;tezos-client&lt;/code&gt; all along, no ?):&lt;/p&gt;
&lt;pre&gt;pip3 install base58check
python
&amp;gt;&amp;gt;&amp;gt;import base58check
&amp;gt;&amp;gt;&amp;gt;base58check.b58decode(b'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg').hex()
'09f5cd8612637e08251cae646a42e6eb8bea86ece5256cf777c52bc474b73ec476ee1d70e84c6ba21276d41bc212e4d878615f4a31323d39959e07539bc066b84174a8ff0de436e3a7'
&lt;/pre&gt;
&lt;p&gt;All signatures in Tezos start withÂ &lt;code&gt;09f5cd8612&lt;/code&gt;, which is used to generate the &lt;code&gt;edsig&lt;/code&gt; prefix. Also, the last 4 bytes are used as a checksum (&lt;code&gt;e436e3a7&lt;/code&gt;). Thus, the signature itself is after this prefix and before the checksum:Â &lt;code&gt;637e08251cae64...174a8ff0d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we just need to append the binary operation with the binary signature for the injection, and put them into a string, and send that to the server for injection. If we have stored the hexadecimal representation of the signature in a file &lt;code&gt;signature.hex&lt;/code&gt;, then we can use :&lt;/p&gt;
&lt;pre&gt;curl -v -H &quot;Content-type: application/json&quot; 'http://127.0.0.1:9731/injection/operation?chain=main' --data '&quot;'$(cat operation.hex)$(cat signature.hex)'&quot;'
&lt;/pre&gt;
&lt;p&gt;and we receive the hash of this new operation:&lt;/p&gt;
&lt;pre&gt;&quot;oo1iWZDczV8vw3XLunBPW6A4cjmdekYTVpRxRh77Fd1BVv4HV2R&quot;
&lt;/pre&gt;
&lt;p&gt;Again, we cheated a little, by using &lt;code&gt;tezos-client&lt;/code&gt; to generate the signature. Let&amp;#8217;s try to do it in Python, too !&lt;/p&gt;
&lt;p&gt;First, we will need the secret key of bootstrap1. We can export from &lt;code&gt;tezos-client&lt;/code&gt; to use it directly:&lt;/p&gt;
&lt;pre&gt;$ tezos-client show address bootstrap1 -S
Hash: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
Public Key: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
Secret Key: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
&lt;/pre&gt;
&lt;p&gt;The secret key is exported on the last line by using the &lt;code&gt;-S&lt;/code&gt; argument, and it usually starts with &lt;code&gt;edsk&lt;/code&gt;. Again, it is in base58check, so we can use the same trick to extract its binary value:&lt;/p&gt;
&lt;pre&gt;$ python3
&amp;gt;&amp;gt;&amp;gt; import base58check
&amp;gt;&amp;gt;&amp;gt; base58check.b58decode(b'edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh').hex()[8:72]
'8500c86780141917fcd8ac6a54a43a9eeda1aba9d263ce5dec5a1d0e5df1e598'
&lt;/pre&gt;
&lt;p&gt;This time, we directly extracted the key, by removing the first 8 hexa chars, and keeping only 64 hexa chars (using &lt;code&gt;[8:72]&lt;/code&gt;), since the key is 32-bytes long. Let&amp;#8217;s suppose that we save this value in a file &lt;code&gt;bootstrap1.hex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we will use the following script to compute the signature:&lt;/p&gt;
&lt;pre&gt;import binascii

operation=binascii.unhexlify(open(&quot;operation.hex&quot;,&quot;rb&quot;).readline()[:-1])
seed = binascii.unhexlify(open(&quot;bootstrap1.hex&quot;,&quot;rb&quot;).readline()[:-1])

from pyblake2 import blake2b
h = blake2b(digest_size=32)
h.update(b'\x03' + operation)
digest = h.digest()

import ed25519
sk = ed25519.SigningKey(seed)
sig = sk.sign(digest)
print(sig.hex())
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;binascii&lt;/code&gt; module is used to read the files in&lt;br /&gt;
hexadecimal (after removing the newlines), to get the binary representation of the operation and of the Ed25519 seed. Ed25519 is an elliptive curve used in Tezos to manage &lt;code&gt;tz1&lt;/code&gt; addresses, i.e. to sign data and check signatures.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;blake2b&lt;/code&gt; module is used to hash the message, before signature. Again, we add a watermark to the operation, i.e. &lt;code&gt;\x03&lt;/code&gt;, before hashing. We also have to specify the size of the hash, i.e. &lt;code&gt;digest_size=32&lt;/code&gt;, becase the Blake2b hashing function can generate hashes with different sizes.&lt;/p&gt;
&lt;p&gt;Finally, we use the &lt;code&gt;ed25519&lt;/code&gt; module to transform the seed (private/secret key) into a signing key, and use it to sign the hash, that we print in hexadecimal. We obtain:&lt;/p&gt;
&lt;pre&gt;637e08251cae646a42e6eb8bea86ece5256cf777c52bc474b73ec476ee1d70e84c6ba21276d41bc212e4d878615f4a31323d39959e07539bc066b84174a8ff0d
&lt;/pre&gt;
&lt;p&gt;This result is exactly the same as what we got using &lt;code&gt;tezos-client&lt;/code&gt; !&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone wp-image-1326&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/11/SignTransaction-791x1024.jpg&quot; alt=&quot;&quot; width=&quot;522&quot; height=&quot;676&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/11/SignTransaction-791x1024.jpg 791w, http://www.ocamlpro.com/wp-content/uploads/2018/11/SignTransaction-232x300.jpg 232w, http://www.ocamlpro.com/wp-content/uploads/2018/11/SignTransaction-768x994.jpg 768w, http://www.ocamlpro.com/wp-content/uploads/2018/11/SignTransaction.jpg 816w&quot; sizes=&quot;(max-width: 522px) 100vw, 522px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;We now have a complete wallet, i.e. the ability to create transactions and sign them without &lt;code&gt;tezos-client&lt;/code&gt;. Of course, there are several limitations to this work: first, we have exposed the private key in clear, which is usually not a very good idea for security; also, Tezos supports three types of keys, &lt;code&gt;tz1&lt;/code&gt; for Ed25519 keys, &lt;code&gt;tz2&lt;/code&gt; for Secp256k1 keys (same as Bitcoin/Ethereum) and &lt;code&gt;tz3&lt;/code&gt; for P256 keys; finally, a realistic wallet would probably use cryptographic chips, on a mobile phone or an external device (Ledger, etc.).&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-1151 size-thumbnail alignleft&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-150x150.jpg&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;150&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-150x150.jpg 150w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-300x300.jpg 300w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-250x250.jpg 250w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-174x174.jpg 174w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278.jpg 718w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot; /&gt;&lt;strong&gt;Fabrice Le Fessant&lt;/strong&gt;: Fabrice is the founder of OCamlPro, and a member of the TzScan development team. Fabrice contributed to multiple projects around Tezos, in particular the first version of Liquidity, and its Michelson-to-Liquidity decompiler.Â Fabrice is a former researcher at INRIA, in peer-to-peer systems and programming languages, and developed several open-source projects, such as MLdonkey, JOCaml or the LAMP movie player.&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1304</id><title type="text">An Introduction to Tezos RPCs: Signing Operations</title><updated>2018-11-21T14:34:42-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/11/15/an-introduction-to-tezos-rpcs-a-basic-wallet/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/11/15/an-introduction-to-tezos-rpcs-a-basic-wallet/#comments" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;In this technical blog post, we will briefly introduce Tezos RPCs through a simple example: we will show how the &lt;code&gt;tezos-client&lt;/code&gt; program interacts with the &lt;code&gt;tezos-node&lt;/code&gt; during a &lt;code&gt;transfer&lt;/code&gt; command. Tezos RPCs are HTTP queries (&lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;) to which &lt;code&gt;tezos-node&lt;/code&gt; replies in JSON format. They are the only way for wallets to interact with the node. However, given the large number of RPCs accepted by the node, it is not always easy to understand which ones can be useful if you want to write a wallet. So, here, we useÂ &lt;code&gt;tezos-client&lt;/code&gt;Â as a simple example, that we will complete in another blog post for wallets that do not have access to the Tezos Protocol OCaml code.&lt;/p&gt;
&lt;p&gt;As for the basic setup, we run a sandboxed node locally on port 9731, with two known addresses in its wallet, called &lt;em&gt;bootstrap1&lt;/em&gt;Â and &lt;em&gt;bootstrap2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here is the command we are going to trace during this example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tezos-client --addr 127.0.0.1 --port 9731 -l transfer 100 from bootstrap1 to bootstrap2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this command, we send just 100 tezzies between the two accounts, paying only for the default fees (0.05 tz).&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;-l&lt;/code&gt; option to request &lt;code&gt;tezos-client&lt;/code&gt;Â to log all the RPC calls it uses on the standard error (the console).&lt;/p&gt;
&lt;p&gt;The first query issued by &lt;code&gt;tezos-client&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;0: http://127.0.0.1:9731/chains/main/blocks/head/context/contracts/tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx/counter
&amp;lt;&amp;lt;&amp;lt;&amp;lt;0: 200 OK
&quot;2&quot;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&lt;/code&gt; is the Tezos address corresponding to &lt;code&gt;bootstrap1&lt;/code&gt; the payer of the operation. In Tezos, the &lt;em&gt;payer&lt;/em&gt; is the address responsible for paying the fees and burn (storage) of the transaction. In our case, it is also the source of the transfer. Here,Â &lt;code&gt;tezos-client&lt;/code&gt; requests the &lt;em&gt;counter&lt;/em&gt; of the payer, because all operations must have a different counter. This is an important feature, here, it will preventÂ &lt;code&gt;bootstrap2&lt;/code&gt; from sending the same operation over and over, emptying the account of &lt;code&gt;bootstrap1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, the counter is &lt;code&gt;2&lt;/code&gt;, probably because we already issued some former operations, so the next operation should have a counter of 3. The request is done on the block &lt;code&gt;head&lt;/code&gt; of the &lt;code&gt;main&lt;/code&gt; chain, an alias for the last block baked on the chain.&lt;/p&gt;
&lt;p&gt;The next query is:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;1: http://127.0.0.1:9731/chains/main/blocks/head/context/contracts/tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx/manager_key
&amp;lt;&amp;lt;&amp;lt;&amp;lt;1: 200 OK
{ &quot;manager&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
  &quot;key&quot;: &quot;edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav&quot; }&lt;/pre&gt;
&lt;p&gt;This time, the client requests the key of the account manager. For a keyhash address (tz&amp;#8230;), the manager is always itself, but this query is needed to know if the public key of the manager has been revealed. Here, the &lt;code&gt;key&lt;/code&gt; field contains a public key, which means a revelation operation has already been published. Otherwise, the client would have had to also create this revelation operation prior to the transfer (or together, actually). The revelation is mandatory, because all the nodes need to know the public key of the manager to validate the signature of the transfer.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s see the next query:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;2: http://127.0.0.1:9731/monitor/bootstrapped
&amp;lt;&amp;lt;&amp;lt;&amp;lt;2: 200 OK
{ &quot;block&quot;: &quot;BLyypN89WuTQyLtExGP6PEuZiu5WFDxys3GTUf7Vz4KvgKcvo2E&quot;,
  &quot;timestamp&quot;: &quot;2018-10-13T00:32:47Z&quot; }&lt;/pre&gt;
&lt;p&gt;This time, the client checks whether the node it is using is well connected to the network. A node is &lt;em&gt;bootstrapped&lt;/em&gt; if it has enough connections to other nodes, and its chain is synchronized with them. This step is needed to prevent the operation from being sent on an obsolete fork of the chain.&lt;/p&gt;
&lt;p&gt;Now, the next query requests the current configuration of the network.&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;3: http://127.0.0.1:9731/chains/main/blocks/head/context/constants
&amp;lt;&amp;lt;&amp;lt;&amp;lt;3: 200 OK
{ &quot;proof_of_work_nonce_size&quot;: 8,
  &quot;nonce_length&quot;: 32,
  &quot;max_revelations_per_block&quot;: 32,
  &quot;max_operation_data_length&quot;: 16384,
  &quot;preserved_cycles&quot;: 5,
  &quot;blocks_per_cycle&quot;: 4096,
  &quot;blocks_per_commitment&quot;: 32,
  &quot;blocks_per_roll_snapshot&quot;: 512,
  &quot;blocks_per_voting_period&quot;: 32768,
  &quot;time_between_blocks&quot;: [ &quot;60&quot;, &quot;75&quot; ],
  &quot;endorsers_per_block&quot;: 32, 
  &quot;hard_gas_limit_per_operation&quot;: &quot;400000&quot;,
  &quot;hard_gas_limit_per_block&quot;: &quot;4000000&quot;,
  &quot;proof_of_work_threshold&quot;: &quot;-1&quot;,
  &quot;tokens_per_roll&quot;: &quot;10000000000&quot;,
  &quot;michelson_maximum_type_size&quot;: 1000,
  &quot;seed_nonce_revelation_tip&quot;: &quot;125000&quot;,
  &quot;origination_burn&quot;: &quot;257000&quot;,
  &quot;block_security_deposit&quot;: &quot;512000000&quot;,
  &quot;endorsement_security_deposit&quot;: &quot;64000000&quot;, 
  &quot;block_reward&quot;: &quot;16000000&quot;,
  &quot;endorsement_reward&quot;: &quot;2000000&quot;,
  &quot;cost_per_byte&quot;: &quot;1000&quot;,
  &quot;hard_storage_limit_per_operation&quot;: &quot;60000&quot;
}&lt;/pre&gt;
&lt;p&gt;These constants may differ for different protocols, or different networks. They are for example different on mainnet, alphanet and zeronet. Among these constants, some of them are useful when issuing a transaction: mainlyÂ &lt;code&gt;hard_gas_limit_per_operation&lt;/code&gt;Â  Â andÂ &lt;code&gt;hard_storage_limit_per_operation&lt;/code&gt;Â . The first one is the maximum gas that can be set for a transaction, and the second one is the maximum storage that can be used. We don&amp;#8217;t plan to use them directly, but we will use them to compute an approximation of the gas and storage that we will set for the transaction.&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;4: http://127.0.0.1:9731/chains/main/blocks/head/hash
&amp;lt;&amp;lt;&amp;lt;&amp;lt;4: 200 OK
&quot;BLyypN89WuTQyLtExGP6PEuZiu5WFDxys3GTUf7Vz4KvgKcvo2E&quot;&lt;/pre&gt;
&lt;p&gt;This query is a bit redundant with the &lt;code&gt;/monitor/bootstrapped&lt;/code&gt; query, which already returned the last block baked on the chain. Anyway, it is useful if we are not working on the &lt;code&gt;main&lt;/code&gt; chain.&lt;/p&gt;
&lt;p&gt;The next query requests the &lt;code&gt;chain_id&lt;/code&gt; of the &lt;code&gt;main&lt;/code&gt; chain, which is typically useful to verify that we know the format of operations for this chain id:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;5: http://127.0.0.1:9731/chains/main/chain_id
&amp;lt;&amp;lt;&amp;lt;&amp;lt;5: 200 OK
&quot;NetXdQprcVkpaWU&quot;&lt;/pre&gt;
&lt;p&gt;Finally, the client tries to simulate the transaction, using the maximal gas and storage limits requested earlier. Since it is in simulation mode, the transaction is only ran locally on the node, and immediately backtracked. It is used to know if the transactions executes successfully, and to know the gas and storage actually used (to avoid paying fees for an erroneous transaction) :&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;6: http://127.0.0.1:9731/chains/main/blocks/head/helpers/scripts/run_operation
{ &quot;branch&quot;: &quot;BLyypN89WuTQyLtExGP6PEuZiu5WFDxys3GTUf7Vz4KvgKcvo2E&quot;,
  &quot;contents&quot;: [
    { &quot;kind&quot;: &quot;transaction&quot;,
      &quot;source&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
      &quot;fee&quot;: &quot;50000&quot;,
      &quot;counter&quot;: &quot;3&quot;,
      &quot;gas_limit&quot;: &quot;400000&quot;,
      &quot;storage_limit&quot;: &quot;60000&quot;,
      &quot;amount&quot;: &quot;100000000&quot;,
      &quot;destination&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot; } 
    ],
  &quot;signature&quot;:
    &quot;edsigtXomBKi5CTRf5cjATJWSyaRvhfYNHqSUGrn4SdbYRcGwQrUGjzEfQDTuqHhuA8b2d8NarZjz8TRf65WkpQmo423BtomS8Q&quot;
}&lt;/pre&gt;
&lt;p&gt;The operation is related to a &lt;em&gt;branch&lt;/em&gt;, and you can see that the &lt;code&gt;branch&lt;/code&gt; field is here set to the hash of the last block head. The branch field is used to prevent an operation from being executed on an alternative head, and also for garbage collection: an operation can be inserted only in one of the 64 blocks after the branch block, or it will be deleted.&lt;/p&gt;
&lt;p&gt;The result looks like this:&lt;/p&gt;
&lt;pre&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;6: 200 OK
{ &quot;contents&quot;: [ 
    { &quot;kind&quot;: &quot;transaction&quot;,
      &quot;source&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
      &quot;fee&quot;: &quot;50000&quot;,
      &quot;counter&quot;: &quot;3&quot;,
      &quot;gas_limit&quot;: &quot;400000&quot;,
      &quot;storage_limit&quot;: &quot;60000&quot;,
      &quot;amount&quot;: &quot;100000000&quot;,
      &quot;destination&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot;,
      &quot;metadata&quot;: { 
        &quot;balance_updates&quot;: [ 
         { &quot;kind&quot;: &quot;contract&quot;,
     Â  Â  Â  &quot;contract&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
           &quot;change&quot;: &quot;-50000&quot; },
         { &quot;kind&quot;: &quot;freezer&quot;, 
           &quot;category&quot;: &quot;fees&quot;,
           &quot;delegate&quot;: &quot;tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU&quot;,
     Â  Â  Â  &quot;level&quot;: 0, 
           &quot;change&quot;: &quot;50000&quot; } 
          ],
  Â      &quot;operation_result&quot;:
          { &quot;status&quot;: &quot;applied&quot;,
        Â  Â  &quot;balance_updates&quot;:Â [
             { &quot;kind&quot;: &quot;contract&quot;,
            Â  Â &quot;contract&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
            Â  Â &quot;change&quot;: &quot;-100000000&quot; },
      Â  Â  Â  Â { &quot;kind&quot;: &quot;contract&quot;,
      Â  Â  Â  Â  Â &quot;contract&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot;,
      Â  Â  Â  Â  Â &quot;change&quot;: &quot;100000000&quot; } 
             ], 
Â  Â  Â    &quot;consumed_gas&quot;: &quot;100&quot; } } } 
   ] 
}
&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;consumed_gas&lt;/code&gt; field in the &lt;code&gt;metadata&lt;/code&gt; section, that&amp;#8217;s the gas that we can expect the transaction to use on the real chain. Here, there is no storage consumed, otherwise, a &lt;code&gt;storage_size&lt;/code&gt; field would be present. The returned &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;applied&lt;/code&gt;, meaning that the transaction could be successfully simulated by the node.&lt;/p&gt;
&lt;p&gt;However, in the query, there was a field that we cannot easily infer: it is the &lt;code&gt;signature&lt;/code&gt; field. Indeed, the &lt;code&gt;tezos_client&lt;/code&gt; knows how to generate a signature for the transaction, knowing the public/private key of the manager. How can we do that in our wallet ? We will explain that in a next Tezos blog post.&lt;/p&gt;
&lt;p&gt;Again, the &lt;code&gt;tezos_client&lt;/code&gt; requests the last block head:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;7: http://127.0.0.1:9731/chains/main/blocks/head/hash
&amp;lt;&amp;lt;&amp;lt;&amp;lt;7: 200 OK
&quot;BLyypN89WuTQyLtExGP6PEuZiu5WFDxys3GTUf7Vz4KvgKcvo2E&quot;
&lt;/pre&gt;
&lt;p&gt;and the current chain id:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;8: http://127.0.0.1:9731/chains/main/chain_id
&amp;lt;&amp;lt;&amp;lt;&amp;lt;8: 200 OK
&quot;NetXdQprcVkpaWU&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last simulation is a prevalidation of the transaction, with the exact same parameters (gas and storage) with which it will be submitted on the official blockchain:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;9: http://127.0.0.1:9731/chains/main/blocks/head/helpers/preapply/operations
[ { &quot;protocol&quot;: &quot;PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt&quot;,
    &quot;branch&quot;: &quot;BLyypN89WuTQyLtExGP6PEuZiu5WFDxys3GTUf7Vz4KvgKcvo2E&quot;,
    &quot;contents&quot;: [ 
     { &quot;kind&quot;: &quot;transaction&quot;, 
       &quot;source&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;, 
       &quot;fee&quot;: &quot;50000&quot;,
       &quot;counter&quot;: &quot;3&quot;,
       &quot;gas_limit&quot;: &quot;200&quot;,
       &quot;storage_limit&quot;: &quot;0&quot;,
       &quot;amount&quot;: &quot;100000000&quot;,
       &quot;destination&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot; 
     } ], 
    &quot;signature&quot;: &quot;edsigu5Cb8WEmUZzoeGSL3sbSuswNFZoqRPq5nXA18Pg4RHbhnFqshL2Rw5QJBM94UxdWntQjmY7W5MqBDMhugLgqrRAWHyH5hD&quot; 
} ]&lt;/pre&gt;
&lt;p&gt;Notice that, in this query, the &lt;code&gt;gas_limit&lt;/code&gt; was set to &lt;code&gt;200&lt;/code&gt;. &lt;code&gt;tezos_client&lt;/code&gt; is a bit conservative, adding &lt;code&gt;100&lt;/code&gt; to the gas returned by the first simulation. Indeed, the gas can be different when the transaction is ran for inclusion, for example if a baker introduced another transaction before that interferes with this one (for example, a transaction that empties an account has an additionnal gas cost of &lt;code&gt;50&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;9: 200 OK
[ { &quot;contents&quot;: [
     { &quot;kind&quot;: &quot;transaction&quot;, 
       &quot;source&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
       &quot;fee&quot;: &quot;50000&quot;,
       &quot;counter&quot;: &quot;3&quot;,
       &quot;gas_limit&quot;: &quot;200&quot;,
       &quot;storage_limit&quot;: &quot;0&quot;,
       &quot;amount&quot;: &quot;100000000&quot;,
       &quot;destination&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot;,
       &quot;metadata&quot;: { 
         &quot;balance_updates&quot;: [ 
          { &quot;kind&quot;: &quot;contract&quot;,
            &quot;contract&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
            &quot;change&quot;: &quot;-50000&quot; },
          { &quot;kind&quot;: &quot;freezer&quot;,
            &quot;category&quot;: &quot;fees&quot;,
            &quot;delegate&quot;: &quot;tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU&quot;,
            &quot;level&quot;: 0,
            &quot;change&quot;: &quot;50000&quot; } ],
         &quot;operation_result&quot;: 
          { &quot;status&quot;: &quot;applied&quot;,
            &quot;balance_updates&quot;: [ 
             { &quot;kind&quot;: &quot;contract&quot;,
               &quot;contract&quot;: &quot;tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx&quot;,
               &quot;change&quot;: &quot;-100000000&quot; },
             { &quot;kind&quot;: &quot;contract&quot;,
               &quot;contract&quot;: &quot;tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN&quot;,
               &quot;change&quot;: &quot;100000000&quot; } ],
         &quot;consumed_gas&quot;: &quot;100&quot; } 
     } } ], 
    &quot;signature&quot;: &quot;edsigu5Cb8WEmUZzoeGSL3sbSuswNFZoqRPq5nXA18Pg4RHbhnFqshL2Rw5QJBM94UxdWntQjmY7W5MqBDMhugLgqrRAWHyH5hD&quot;
 } ]&lt;/pre&gt;
&lt;p&gt;Again, the &lt;code&gt;tezos_client&lt;/code&gt; had to sign the transaction with the manager private key. This will be explained in a next blog post.&lt;/p&gt;
&lt;p&gt;Since this prevalidation was successful, the client can now inject the transaction on the block chain:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;10: http://127.0.0.1:9731/injection/operation?chain=main
&quot;a75719f568f22f279b42fa3ce595c5d4d0227cc8cf2af351a21e50d2ab71ab3208000002298c03ed7d454a101eb7022bc95f7e5f41ac78d0860303c8010080c2d72f0000e7670f32038107a59a2b9cfefae36ea21f5aa63c00eff5b0ce828237f10bab4042a891d89e951de2c5ad4a8fa72e9514ee63fec9694a772b563bcac8ae0d332d57f24eae7d4a6fad784a8436b6ba03d05bf72e4408&quot;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;10: 200 OK
&quot;ooUo7nUZAbZKhTuX5NC999BuHs9TZBmtoTrCWT3jFnW7vMdN25U&quot;
&lt;/pre&gt;
&lt;p&gt;We can see that this request does not contain the JSON encoding of the transaction, but a binary version (in hexadecimal format). This binary version is what is stored in the blockchain, to decrease the size of the storage. It contains both a binary encoding of the transaction, and the signature of the transaction. tezos-client knows this binary format, but if we want to create our own wallet, we will need a way to compute it by ourselves.&lt;/p&gt;
&lt;p&gt;The node replies with the operation hash of the injected operation: the operation is now waiting for inclusion in the mempool of the node, and will be forwarded to other nodes so that the next baker can include it in the next block.&lt;/p&gt;
&lt;p&gt;I hope you have now a better understanding of how a wallet can use Tezos RPCs to issue a transaction. We now have two remaining questions, for a next blog post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to generate the binary format of an operation, from the JSON encoding ?&lt;/li&gt;
&lt;li&gt;How to sign an operation, so that we can include this signature in the run, preapply and injection RPCs ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we can reply to these questions, we will also be able to sign operations offline.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-1151 size-thumbnail alignleft&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-150x150.jpg&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;150&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-150x150.jpg 150w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-300x300.jpg 300w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-250x250.jpg 250w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-174x174.jpg 174w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278.jpg 718w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot; /&gt;&lt;strong&gt;Fabrice Le Fessant&lt;/strong&gt;: Fabrice is the founder of OCamlPro, and a member of the TzScan development team. Fabrice contributed to multiple projects around Tezos, in particular the first version of Liquidity, and its Michelson-to-Liquidity decompiler.Â Fabrice is a former researcher at INRIA, in peer-to-peer systems and programming languages, and developed several open-source projects, such as MLdonkey, JOCaml or the LAMP movie player.&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1160</id><title type="text">An Introduction to Tezos RPCs: a Basic Wallet</title><updated>2018-11-15T18:11:16-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-12-05T08:00:00-00:00</updated><logo>http://gallium.inria.fr/blog/</logo><link title="Gagallium" type="text/html" href="http://gallium.inria.fr/blog/index.rss" rel="related"/><link title="Gagallium" type="application/rss+xml" href="http://gallium.inria.fr/blog/index.rss" rel="self"/><generator>Stog</generator><id>http://gallium.inria.fr/blog/index.rss</id><title type="text">Gagallium</title><author><name>GaGallium</name></author></source><link href="http://gallium.inria.fr/blog/parser-construction-with-menhir-a-couple-appetizers" rel="alternate"/><content xml:base="http://gallium.inria.fr/blog/index.rss" type="html">

&lt;p&gt;This post is a shameless advertisement for Menhir, a parser generator for OCaml. It illustrates Menhirâs new input syntax, which was introduced on November 13, 2018. The code fragments shown below are excerpts of valid &lt;code&gt;.mly&lt;/code&gt; files.&lt;/p&gt;




&lt;h2 id=&quot;ingredients&quot;&gt;Ingredients&lt;/h2&gt;
&lt;p&gt;Suppose I would like to parse and evaluate our good old friends, the arithmetic expressions. For instance, the string &lt;code&gt;&amp;quot;(3 + 4) * 5 - 9&amp;quot;&lt;/code&gt; should be accepted and evaluated to the value &lt;code&gt;26&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I assume that I have a lexical analyzer that can chop up this string into a stream of basic tokens, or terminal symbols. My alphabet of terminal is the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;%token&amp;lt;int&amp;gt; INT
%token PLUS MINUS TIMES DIV LPAREN RPAREN EOL
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Based on this alphabet, I wish to define the syntax of (and obtain a parser for) arithmetic expressions. This exercise may seem old and tired, but let me try and see if I can add some new spice and style to it. In fact, let me do it twice, in two slightly different ways.&lt;/p&gt;
&lt;p&gt;So, how would you like your arithmetic expressions cooked?&lt;/p&gt;
&lt;h2 id=&quot;first-flavor-hot-off-the-oven-with-on-the-fly-evaluation&quot;&gt;First Flavor: Hot Off the Oven, With On-The-Fly Evaluation&lt;/h2&gt;
&lt;p&gt;In this first demo, I wish to evaluate an arithmetic expression, that is, find out which integer value it represents. Thus, I am eventually interested in just an integer result.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;%start&amp;lt;int&amp;gt; main
%%
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I wish to recognize an expression followed with an end-of-line symbol:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let main :=
  ~ = expr; EOL; &amp;lt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;~ = expr&lt;/code&gt; is a &lt;strong&gt;pun&lt;/strong&gt;, a shorthand for &lt;code&gt;expr = expr&lt;/code&gt;. It can be read as follows: âread an expression; evaluate it; let the variable &lt;code&gt;expr&lt;/code&gt; stand for its valueâ.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is a &lt;strong&gt;point-free semantic action&lt;/strong&gt;. In general, it is a shorthand for a semantic action that builds a tuple of the variables that have been bound earlier in the sequence. Thus, in this case, it is a shorthand for the semantic action &lt;code&gt;{ expr }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is now time to define &lt;code&gt;expr&lt;/code&gt; and thereby describe the syntax and the meaning of arithmetic expressions. To do this in a nonambiguous manner, one of several traditional approaches is to stratify the syntax in several levels, namely additive expressions, multiplicative expressions, and atomic expressions. These levels are also traditionally known as &lt;em&gt;expressions&lt;/em&gt;, &lt;em&gt;terms&lt;/em&gt;, and &lt;em&gt;factors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The topmost level is the level of additive expressions. In other words, an expression is just an additive expression:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let expr ==
  additive_expr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This definition has no runtime cost: it makes &lt;code&gt;expr&lt;/code&gt; a synonym for &lt;code&gt;additive_expr&lt;/code&gt;. In traditional Menhir speak, &lt;code&gt;expr&lt;/code&gt; is an &lt;code&gt;%inline&lt;/code&gt; nonterminal symbol.&lt;/p&gt;
&lt;p&gt;This definition introduces a useful level of indirection: if in the future I decide to introduce a new level in the syntax of expressions, all I have to do is update the definition of &lt;code&gt;expr&lt;/code&gt;; the places where &lt;code&gt;expr&lt;/code&gt; is used do not need to be updated. In other words, the fact that âan expression is just an additive expressionâ is an implementation detail, and should not be revealed.&lt;/p&gt;
&lt;p&gt;An additive expression is a nonempty, left-associative list of multiplicative expressions, separated with additive operators:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let additive_expr ==
  fold_left(additive_op, multiplicative_expr)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What does this mean? Well, quite obviously, the additive operators are &lt;code&gt;PLUS&lt;/code&gt; and &lt;code&gt;MINUS&lt;/code&gt;, which respectively denote addition or subtraction:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let additive_op ==
  | PLUS;  { ( + ) }
  | MINUS; { ( - ) }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Furthermore, a nonempty list of elements &lt;code&gt;elem&lt;/code&gt; separated by operators &lt;code&gt;op&lt;/code&gt; is: either a single element; or a (smaller) such list, followed with an operator, followed with an element. In the second case, the operator must be applied to the sum of the left-hand list and to the right-hand element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let fold_left(op, elem) :=
  | elem
  | sum = fold_left(op, elem); ~ = op; ~ = elem; { op sum elem }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a &lt;strong&gt;parameterized definition&lt;/strong&gt;. Because this definition is recursive, it cannot be macro-expanded away: we cannot use &lt;code&gt;==&lt;/code&gt; and must instead use &lt;code&gt;:=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So much for additive expressions. This scheme can now be reproduced, one level down: a multiplicative expression is a nonempty, left-associative list of atomic expressions, separated with multiplicative operators.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let multiplicative_expr ==
  fold_left(multiplicative_op, atomic_expr)

let multiplicative_op ==
  | TIMES; { ( * ) }
  | DIV;   { ( / ) }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There remains to define atomic expressions. In this demo, I wish to allow the use of &lt;code&gt;MINUS&lt;/code&gt; as a unary operator. Thus, an atomic expression shall be one of the following: an integer literal; an arbitrary expression between parentheses; or an application of a unary operator to an atomic expression.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let atomic_expr :=
  | INT
  | delimited(LPAREN, expr, RPAREN)
  | app(unary_op, atomic_expr)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is just one unary operator, &lt;code&gt;MINUS&lt;/code&gt;, whose meaning is integer negation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let unary_op ==
  | MINUS; { (~- ) }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There remains to explain &lt;code&gt;delimited(left, x, right)&lt;/code&gt; and &lt;code&gt;app(f, x)&lt;/code&gt;. My main motivation for introducing these auxiliary parameterized symbols is to make the definition of &lt;code&gt;atomic_expr&lt;/code&gt; prettier.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delimited(left, x, right)&lt;/code&gt; is in fact part of Menhirâs standard library, where it is defined as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;%public let delimited(left, x, right) ==
  left; ~ = x; right; &amp;lt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;app(f, x)&lt;/code&gt; recognizes the sequence &lt;code&gt;f; x&lt;/code&gt;. Its value is the application of the value of &lt;code&gt;f&lt;/code&gt; to the value of &lt;code&gt;x&lt;/code&gt;. It is defined as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let app(f, x) ==
  ~ = f; ~ = x; { f x }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, the arithmetic-expression parser-and-evaluator is complete.&lt;/p&gt;
&lt;p&gt;Menhir accepts it without complaining, which means that this grammar is in the class LR(1), therefore is &lt;strong&gt;unambiguous&lt;/strong&gt;. From it, Menhir generates an LR(1) parser, a deterministic pushdown automaton, whose &lt;strong&gt;performance is predictable&lt;/strong&gt;: provided each semantic action takes constant time, its time complexity is linear in the size of the input. Compared with other parsing techniques, guaranteed unambiguity and efficiency are two important strengths of LR(1) parsers.&lt;/p&gt;
&lt;h2 id=&quot;second-flavor-as-an-abstract-syntax-and-location-millefeuille&quot;&gt;Second Flavor: As An Abstract-Syntax-and-Location Millefeuille&lt;/h2&gt;
&lt;p&gt;Let me now be more ambitious. Instead of evaluating arithmetic expressions on the fly, let me build Abstract Syntax Trees. This opens the door to all kinds of symbolic computation: compilation down to native code, simplification, automatic differentiation, and so on.&lt;/p&gt;
&lt;p&gt;In a separate file, say &lt;code&gt;syntax.ml&lt;/code&gt;, I define the types of the ASTs that I wish to build:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;type unop =
  | OpNeg

type binop =
  | OpPlus | OpMinus | OpTimes | OpDiv

type 'a located =
  { loc: Lexing.position * Lexing.position; value: 'a }

type expr =
  raw_expr located

and raw_expr =
| ELiteral of int
| EUnOp of unop * expr
| EBinOp of expr * binop * expr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The types &lt;code&gt;unop&lt;/code&gt; and &lt;code&gt;binop&lt;/code&gt; are simple enumerated types.&lt;/p&gt;
&lt;p&gt;In the definition of the type &lt;code&gt;raw_expr&lt;/code&gt;, one recognizes three kinds of expressions: integer literals, applications of unary operators, and applications of binary operators. There is no data constructor for expressions in parentheses: although parentheses are a necessary feature of the concrete syntax, there is no need to record them in the abstract syntax.&lt;/p&gt;
&lt;p&gt;In an abstract syntax tree, I would like every subtree to be annotated with its location in the input text. This would be important, in a real-world programming language implementation, in order to produce error messages carry a source code location.&lt;/p&gt;
&lt;p&gt;To achieve this, I use a traditional technique: I define two types, &lt;code&gt;expr&lt;/code&gt; and &lt;code&gt;raw_expr&lt;/code&gt;, in a mutually recursive manner. An expression is a raw expression annotated with a location (a pair of a start position and an end position). A raw expression is an integer literal, an application of a unary operator to an expression, or an application of a binary operator to two expressions. Thus, like a cake, an abstract syntax tree has layered structure: one layer of location information, one layer of structural information, one layer of location information, one layer of structural information, and so on.&lt;/p&gt;
&lt;p&gt;Let me now move on to the description of the parser. This time, I am eventually interested in producing an abstract syntax tree.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;%start&amp;lt;Syntax.expr&amp;gt; main
%{ open Syntax %}
%%
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first few definitions are unchanged:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let main :=
  ~ = expr; EOL; &amp;lt;&amp;gt;

let expr ==
  additive_expr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This time around, I wonât use a generic definition along the lines of &lt;code&gt;fold_left(op, elem)&lt;/code&gt;. It can be done, though; this is left as an exercise for the reader! Here is a direct definition of additive expressions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let additive_expr :=
  | multiplicative_expr
  | located(
      ~ = additive_expr; ~ = additive_op; ~ = multiplicative_expr; &amp;lt;EBinOp&amp;gt;
    )

let additive_op ==
  | PLUS;  { OpPlus }
  | MINUS; { OpMinus }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In short, an additive expression is either a multiplicative expression, or an additive expression followed with an additive operator followed with a multiplicative expression.&lt;/p&gt;
&lt;p&gt;In the second production, I use three &lt;code&gt;~&lt;/code&gt; patterns in order to avoid the chore of naming the three semantic values. I again use &lt;strong&gt;a point-free semantic action&lt;/strong&gt;: &lt;code&gt;&amp;lt;EBinOp&amp;gt;&lt;/code&gt; means that the data constructor &lt;code&gt;EBinOp&lt;/code&gt; should be applied to a tuple of the three semantic values. At the cost of greater verbosity, one could equivalently write &lt;code&gt;e1 = additive_expr; op = additive_op; e2 = multiplicative_expr; { EBinOp (e1, op, e2) }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;EBinOp(e1, op, e2)&lt;/code&gt; has type &lt;code&gt;raw_expr&lt;/code&gt;, but I would like the semantic value of the nonterminal symbol &lt;code&gt;additive_expr&lt;/code&gt; to have type &lt;code&gt;expr&lt;/code&gt;. Therefore, I need to wrap this semantic value in a record of type &lt;code&gt;raw_expr located&lt;/code&gt;. This can be done in a lightweight and elegant manner just by wrapping the second production with &lt;code&gt;located(...)&lt;/code&gt;, where the parameterized nonterminal symbol &lt;code&gt;located(x)&lt;/code&gt; is defined once and for all as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let located(x) ==
  ~ = x; { { loc = $loc; value = x } }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;located(x)&lt;/code&gt; recognizes the same input as &lt;code&gt;x&lt;/code&gt;, and wraps the semantic value of type &lt;code&gt;'a&lt;/code&gt; produced by &lt;code&gt;x&lt;/code&gt; in a record of type &lt;code&gt;'a located&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One level down, multiplicative expressions are described via the same pattern:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let multiplicative_expr :=
  | atomic_expr
  | located(
      ~ = multiplicative_expr; ~ = multiplicative_op; ~ = atomic_expr; &amp;lt;EBinOp&amp;gt;
    )

let multiplicative_op ==
  | TIMES; { OpTimes }
  | DIV;   { OpDiv }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, as earlier, an atomic expression is one of: an expression between parentheses; an integer literal; an application of a unary operator to an atomic expression.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let atomic_expr :=
  | LPAREN; ~ = expr; RPAREN; &amp;lt;&amp;gt;
  | located(
    | ~ = INT; &amp;lt;ELiteral&amp;gt;
    | ~ = unary_op; ~ = atomic_expr; &amp;lt;EUnOp&amp;gt;
    )

let unary_op ==
  | MINUS; { OpNeg }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Only the last two cases in the definition of &lt;code&gt;atomic_expr&lt;/code&gt; are wrapped in &lt;code&gt;located(...)&lt;/code&gt;: in the first case, this is not necessary, as the expression already carries a location. Things are formulated in such a way that the computed locations are tight: the source code range associated with a parenthesized subexpression does not include the parentheses. One could of course easily adopt the reverse convention: this is left as another exercise for the reader!&lt;/p&gt;
&lt;h2 id=&quot;behind-the-scenes-or-in-the-kitchen&quot;&gt;Behind The Scenes, Or: In The Kitchen&lt;/h2&gt;
&lt;p&gt;If one expands away all symbols introduced by &lt;code&gt;==&lt;/code&gt;, expands away all parameterized symbols, and strips away all semantic actions, one finds that the two descriptions presented above represent the same LR(1) grammar, therefore give rise to the same deterministic pushdown automaton.&lt;/p&gt;
&lt;p&gt;This bare-bones grammar is printed by &lt;code&gt;menhir --only-preprocess-u&lt;/code&gt;, a useful inspection tool. It is printed in Menhirâs traditional syntax. Once manually translated to the modern syntax used in this article, it is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;%token DIV EOL INT LPAREN MINUS PLUS RPAREN TIMES
%start&amp;lt;unit&amp;gt; main

%%

let main :=
  additive_expr; EOL

let additive_expr :=
| multiplicative_expr
| additive_expr; PLUS; multiplicative_expr
| additive_expr; MINUS; multiplicative_expr

let multiplicative_expr :=
| atomic_expr
| multiplicative_expr; TIMES; atomic_expr
| multiplicative_expr; DIV; atomic_expr

let atomic_expr :=
| INT
| LPAREN; additive_expr; RPAREN
| MINUS; atomic_expr
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;spilling-the-sauce-a-syntax-error&quot;&gt;Spilling the Sauce: A Syntax Error&lt;/h2&gt;
&lt;p&gt;Suppose my fingers slip, and I make a syntax error in my grammar description:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;let main :=
  ~ = expr; EOL; &amp;lt;&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not to worry. Menhirâs parser for &lt;code&gt;.mly&lt;/code&gt; files is a Menhir-generated parser, and produces reasonable syntax error messages. Here, the semicolon that follows the semantic action is invalid:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span/&gt;File &amp;quot;parser.mly&amp;quot;, line 30, characters 19-20:
Error: syntax error after '&amp;lt;&amp;gt;' and before ';'.
At this point, one of the following is expected:
a bar '|' followed with an expression, or
another rule.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, &lt;strong&gt;LR(1) parsers can produce good syntax error messages&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;The full source code of &lt;a href=&quot;https://gitlab.inria.fr/fpottier/menhir/blob/master/demos/calc-new-syntax-dune/parser.mly&quot;&gt;the first demo&lt;/a&gt; and &lt;a href=&quot;https://gitlab.inria.fr/fpottier/menhir/blob/master/demos/calc-ast-dune/parser.mly&quot;&gt;the second demo&lt;/a&gt; is available online.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.inria.fr/fpottier/menhir/blob/master/doc/new-rule-syntax-summary.md&quot;&gt;A summary of the changes&lt;/a&gt; between the old and new syntaxes is also available.&lt;/p&gt;
&lt;p&gt;The syntax of Menhir is of course also documented in the &lt;a href=&quot;http://gallium.inria.fr/~fpottier/menhir/manual.html#sec5&quot;&gt;reference manual&lt;/a&gt;.&lt;/p&gt;


</content><id>http://gallium.inria.fr/blog/parser-construction-with-menhir-a-couple-appetizers</id><title type="text">Parser Construction With Menhir: A Couple Appetizers</title><updated>2018-11-14T08:00:00-00:00</updated><author><name>FranÃ§ois Pottier</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/11/08/first-open-source-release-of-tzscan/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/11/08/first-open-source-release-of-tzscan/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;In October 2017, after the Tezos ICO, OCamlPro started to work on a block explorer for Tezos. For us, it was the most important software that we could contribute to the community, after the node itself, of course. We used it internally to monitor the Tezos alphanet, until its official public release in February 2018, as &lt;a href=&quot;https://tzscan.io&quot;&gt;TzScan&lt;/a&gt;. One of TzScan main goals was to make the complex DPOS consensus algorithm of Tezos easier to understand, to follow, especially for bakers who will contribute to it.Â  Since its creation, we have been improving it every day, rushing for the Betanet in June 2018, and still now, monitoring all the Tezos networks, Mainnet, Alphanet and Zeronet.&lt;/p&gt;
&lt;p&gt;So we are pleased today to announce the first release of TzScan OS, the open-source version of &lt;a href=&quot;https://tzscan.io&quot;&gt;TzScan&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sources are available on Gitlab:&lt;a href=&quot;https://gitlab.com/tzscan/tzscan&quot;&gt;https://gitlab.com/tzscan/tzscan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The code, mostly OCaml, is distributed under &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;GNU GPL v3.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project contains:&lt;img class=&quot;alignright wp-image-1275 size-full&quot; title=&quot;TZScan architecture schema &quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/11/TzScanOS.png&quot; alt=&quot;TZScan architecture schema &quot; width=&quot;400&quot; height=&quot;518&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/11/TzScanOS.png 400w, http://www.ocamlpro.com/wp-content/uploads/2018/11/TzScanOS-232x300.png 232w&quot; sizes=&quot;(max-width: 400px) 100vw, 400px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The blockchain crawler, used to monitor the blockchain, and fill a PostgreSQL database&lt;/li&gt;
&lt;li&gt;The web interface, requesting information using a REST API&lt;/li&gt;
&lt;li&gt;The API server, using the PostgreSQL database to reply to API requests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can be used in two different modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remote Use: if you are not running a Tezos node, you might want to only run the web interface, using the official TzScan API server&lt;/li&gt;
&lt;li&gt;Local Use: if you are running a Tezos node, you can use the crawler and the API server to serve information on your node, to a locally running web interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Contribute&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to TzScan OS, a first step could be to translate TzScan in your language : check the file &lt;a href=&quot;https://gitlab.com/tzscan/tzscan/blob/master/static/lang-en.json&quot;&gt;lang-en.json &lt;/a&gt;for a list of strings to translate, and &lt;a href=&quot;https://gitlab.com/tzscan/tzscan/blob/master/static/lang-fr.json&quot;&gt;lang-fr.json&lt;/a&gt; for a partial translation!&lt;/p&gt;
&lt;h2&gt;OCamlPro&amp;#8217;s services around TzScan&lt;/h2&gt;
&lt;p&gt;TzScan OS can be used to monitor private/enterprise deployments of Tezos. OCamlPro is available to help and support such deployments.&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;We are thankful to the Tezos Foundation and Ryan Jesperson for their &lt;a href=&quot;http://www.ocamlpro.com/2018/10/17/ocamlpros-tzscan-grant-proposal-accepted-by-the-tezos-foundation-joint-press-release/&quot;&gt;support&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;All feedback is welcome!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-1151 size-thumbnail alignleft&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-150x150.jpg&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;150&quot; srcset=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-150x150.jpg 150w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-300x300.jpg 300w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-250x250.jpg 250w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278-174x174.jpg 174w, http://www.ocamlpro.com/wp-content/uploads/2018/10/fab-e1539950216278.jpg 718w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot; /&gt;&lt;strong&gt;Fabrice Le Fessant&lt;/strong&gt;: Fabrice is the founder of OCamlPro, and a member of the TzScan development team. Fabrice contributed to multiple projects around Tezos, in particular the first version of Liquidity, and its Michelson-to-Liquidity decompiler.Â Fabrice is a former researcher at INRIA, in peer-to-peer systems and programming languages, and developed several open-source projects, such as MLdonkey, JOCaml or the LAMP movie player.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1269</id><title type="text">First Open-Source Release of TzScan</title><updated>2018-11-08T13:30:17-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/11/06/liquidity-tutorial-a-game-with-an-oracle-for-random-numbers/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/11/06/liquidity-tutorial-a-game-with-an-oracle-for-random-numbers/#comments" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;h1 id=&quot;a-game-with-an-oracle&quot;&gt;A Game with an oracle&lt;/h1&gt;
&lt;p&gt;In this small tutorial, we will see how to write a chance game on the Tezos blockchain with Liquidity and a small external oracle which provides random numbers.&lt;/p&gt;
&lt;h2 id=&quot;principle-of-the-game&quot;&gt;Principle of the game&lt;/h2&gt;
&lt;p&gt;Rules of the game are handled by a smart contract on the Tezos blockchain.&lt;/p&gt;
&lt;p&gt;When a player decides to start a game, she must start by making a transaction (&lt;em&gt;i.e.&lt;/em&gt; a call) to the game smart contract with a number parameter (let&amp;#8217;s call it &lt;code&gt;n&lt;/code&gt;) between 0 and 100 (inclusively). The amount that is sent with this transaction constitute her bet &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A random number &lt;code&gt;r&lt;/code&gt; is then chosen by the oracle and the outcome of the game is decided by the smart contract.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The player &lt;strong&gt;loses&lt;/strong&gt; if her number &lt;code&gt;n&lt;/code&gt; is &lt;em&gt;greater&lt;/em&gt; than &lt;code&gt;r&lt;/code&gt;. In this case, she forfeits her bet amount and the game smart contract is resets (the money stays on the game smart contract).&lt;/li&gt;
&lt;li&gt;The player &lt;strong&gt;wins&lt;/strong&gt; if her number &lt;code&gt;n&lt;/code&gt; is &lt;em&gt;smaller or equal&lt;/em&gt; to &lt;code&gt;r&lt;/code&gt;. In this case, she gets back her initial bet &lt;code&gt;b&lt;/code&gt; plus a reward which is proportional to her bet and her chosen number &lt;code&gt;b * n / 100&lt;/code&gt;. This means that a higher number &lt;code&gt;n&lt;/code&gt;, while being a riskier choice (the following random number must be greater), yields a greater reward. The edge cases being &lt;code&gt;n = 0&lt;/code&gt; is an always winning input but the reward is always null, and &lt;code&gt;n = 100&lt;/code&gt; wins only if the random number is also &lt;code&gt;100&lt;/code&gt; but the player doubles her bet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;architecture-of-the-dapp&quot;&gt;Architecture of the DApp&lt;/h2&gt;
&lt;p&gt;Everything that happens on the blockchain is deterministic and reproducible which means that smart contracts cannot generate random numbers securely&lt;a id=&quot;fnref1&quot; class=&quot;footnoteRef&quot; href=&quot;#fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The following smart contract works in this manner. Once a user starts a game, the smart contract is put in a state where it awaits a random number from a trusted off-chain source. This trusted source is our random generator oracle. The oracle monitors the blockchain and generates and sends a random number to the smart contract once it detects that it is waiting for one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ocamlpro.com/wp-content/uploads/2018/10/game_arch.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Because the oracle waits for a &lt;code&gt;play&lt;/code&gt; transaction to be included in a block and sends the random number in a subsequent block, this means that a game round lasts at least two blocks&lt;a id=&quot;fnref2&quot; class=&quot;footnoteRef&quot; href=&quot;#fn2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;This technicality forces us to split our smart contract into two distinct entry points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A first entry point &lt;code&gt;play&lt;/code&gt; is called by a player who wants to start a game (it cannot be called twice). The code of this entry point saves the game parameters in the smart contract storage and stops execution (awaiting a random number).&lt;/li&gt;
&lt;li&gt;A second entry point &lt;code&gt;finish&lt;/code&gt;, which can only be called by the oracle, accepts random numbers as parameter. The code of this entry point computes the outcome of the current game based on the game parameters and the random number, and then proceeds accordingly. At the end of &lt;code&gt;finish&lt;/code&gt; the contract is reset and a new game can be started.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-game-smart-contract&quot;&gt;The Game Smart Contract&lt;/h2&gt;
&lt;p&gt;The smart contract game manipulates a storage of the following type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; game = {
  number : nat;
  bet : tez;
  player : key_hash;
}

&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; storage = {
  game : game &lt;span class=&quot;dt&quot;&gt;option&lt;/span&gt;;
  oracle_id : address;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The storage contains the address of the oracle, &lt;code&gt;oracle_id&lt;/code&gt;. It will only accept transactions coming from this address (&lt;em&gt;i.e.&lt;/em&gt; that are signed by the corresponding private key). It also contains an optional value &lt;code&gt;game&lt;/code&gt; that indicates if a game is being played or not.&lt;/p&gt;
&lt;p&gt;A game consists in three values, stored in a record:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt; is the number chosen by the player.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bet&lt;/code&gt; is the amount that was sent with the first transaction by the player. It constitute the bet amount.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;player&lt;/code&gt; is the key hash (tz1&amp;#8230;) on which the player who made the bet wishes to be payed in the event of a win.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also give an initializer function that can be used to deploy the contract with an initial value. It takes as argument the address of the oracle, which cannot be changed later on.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%init storage (oracle_id : address) =
  { game = (&lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; : game &lt;span class=&quot;dt&quot;&gt;option&lt;/span&gt;); oracle_id }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;the-play-entry-point&quot;&gt;The &lt;code&gt;play&lt;/code&gt; entry point&lt;/h3&gt;
&lt;p&gt;The first entry point, &lt;code&gt;play&lt;/code&gt; takes as argument a pair composed of: &amp;#8211; a natural number, which is the number chosen by the player &amp;#8211; and a key hash, which is the address on which a player wishes to be payed as well as the current storage of the smart contract.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%entry play (number : nat) storage = ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The first thing this contract does is validate the inputs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensure that the number is a valid choice, &lt;em&gt;i.e.&lt;/em&gt; is between 0 and 100 (natural numbers are always greater or equal to 0).
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; number &amp;gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;p &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;number must be &amp;lt;= 100&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Ensure that the contract has enough funds to pay the player in case she wins. The highest paying bet is to play &lt;code&gt;100&lt;/code&gt; which means that the user gets payed twice its original bet amount. At this point of the execution, the balance of the contract is already credited with the bet amount, so this check comes to ensuring that the balance is greater than twice the bet.
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;p * Current.amount () &amp;gt; Current.balance () &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;I don't have enough money for this bet&quot;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Ensure that no other game is currently being played so that a previous game is not erased.
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; storage.game &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
| &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; g -&amp;gt;
  &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;Game already started with&quot;&lt;/span&gt;, g)
| &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt;
  &lt;span class=&quot;co&quot;&gt;(* Actual code of entry point *)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rest of the code for this entry point consist in simply creating a new &lt;code&gt;game&lt;/code&gt; record &lt;code&gt;{ number; bet; player }&lt;/code&gt; and saving it to the smart contract&amp;#8217;s storage. This entry point always returns an empty list of operations because it does not make any contract calls or transfers.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; bet = Current.amount () &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; storage = storage.game &amp;lt;- &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; { number; bet; player } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
(([] : operation &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;), storage)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The new storage is returned and the execution stops at this point, waiting for someone (the oracle) to call the &lt;code&gt;finish&lt;/code&gt; entry point.&lt;/p&gt;
&lt;h3 id=&quot;the-finish-entry-point&quot;&gt;The &lt;code&gt;finish&lt;/code&gt; entry point&lt;/h3&gt;
&lt;p&gt;The second entry point, &lt;code&gt;finish&lt;/code&gt; takes as argument a natural number parameter, which is the random number generated by the oracle, as well as the current storage of the smart contract.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%entry finish (random_number : nat) storage = ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The random number can be any natural number (these are mathematically unbounded natural numbers) so we must make sure it is between 0 and 100 before proceeding. Instead of rejecting too big random numbers, we simply (Euclidean) divide it by 101 and keep the remainder, which is between 0 and 100. The oracle already generates random numbers between 0 and 100 so this operation will do nothing but is interesting to keep if we want to replace the random generator one day.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; random_number = &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; random_number / &lt;span class=&quot;dv&quot;&gt;101&lt;/span&gt;p &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
  | &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; ()
  | &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; (_, r) -&amp;gt; r &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Smart contracts are public objects on the Tezos blockchain so anyone can decide to call them. This means that permissions must be handled by the logic of the smart contract itself. In particular, we don&amp;#8217;t want &lt;code&gt;finish&lt;/code&gt; to be callable by anyone, otherwise it would mean that the player could choose its own random number. Here we make sure that the call comes from the oracle.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; Current.sender () &amp;lt;&amp;gt; storage.oracle_id &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;Random numbers cannot be generated&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We must also make sure that a game is currently being played otherwise this random number is quite useless.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; storage.game &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
| &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;No game already started&quot;&lt;/span&gt;
| &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; game -&amp;gt; ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The rest of the code in the entry point decides if the player won or lost, and generates the corresponding operations accordingly.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; random_number &amp;lt; game.number &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;(* Lose *)&lt;/span&gt;
  ([] : operation &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If the random number is smaller that the chosen number, the player lost. In this case no operation is generated and the money is kept by the smart contract.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;(* Win *)&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; gain = &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; (game.bet * game.number / &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;p) &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;tz
    | &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; (g, _) -&amp;gt; g &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; reimbursed = game.bet + gain &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
  [ Account.transfer ~dest:game.player ~amount:reimbursed ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Otherwise, if the random number is greater or equal to the previously chosen number, then the player won. We compute her gain and the reimbursement value (which is her original bet + her gain) and generate a transfer operation with this amount.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; storage = storage.game &amp;lt;- (&lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; : game &lt;span class=&quot;dt&quot;&gt;option&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
(ops, storage)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally, the storage of the smart contract is reset, meaning that the current game is erased. The list of generated operations and the reset storage is returned.&lt;/p&gt;
&lt;h3 id=&quot;a-safety-entry-point-fund&quot;&gt;A safety entry point: &lt;code&gt;fund&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;At anytime we authorize anyone (most likely the manager of the contract) to add funds to the contract&amp;#8217;s balance. This allows new players to participate in the game even if the contract has been depleted, by simply adding more funds to it.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%entry fund _ storage =
  ([] : operation &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;), storage&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This code does nothing, excepted accepting transfers with amounts.&lt;/p&gt;
&lt;h3 id=&quot;full-liquidity-code-of-the-game-smart-contract&quot;&gt;Full Liquidity Code of the Game Smart Contract&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode OCaml&quot;&gt;&lt;code class=&quot;sourceCode ocaml&quot;&gt;[%%version &lt;span class=&quot;fl&quot;&gt;0.403&lt;/span&gt;]

&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; game = {
  number : nat;
  bet : tez;
  player : key_hash;
}

&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; storage = {
  game : game &lt;span class=&quot;dt&quot;&gt;option&lt;/span&gt;;
  oracle_id : address;
}

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%init storage (oracle_id : address) =
  { game = (&lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; : game &lt;span class=&quot;dt&quot;&gt;option&lt;/span&gt;); oracle_id }

&lt;span class=&quot;co&quot;&gt;(* Start a new game *)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%entry play ((number : nat), (player : key_hash)) storage =
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; number &amp;gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;p &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;number must be &amp;lt;= 100&quot;&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; Current.amount () = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;tz &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;bet cannot be 0tz&quot;&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;p * Current.amount () &amp;gt; Current.balance () &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;I don't have enough money for this bet&quot;&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; storage.game &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
  | &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; g -&amp;gt;
    &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;Game already started with&quot;&lt;/span&gt;, g)
  | &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; bet = Current.amount () &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; storage = storage.game &amp;lt;- &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; { number; bet; player } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
    (([] : operation &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;), storage)

&lt;span class=&quot;co&quot;&gt;(* Receive a random number from the oracle and compute outcome of the&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   game *)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%entry finish (random_number : nat) storage =
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; random_number = &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; random_number / &lt;span class=&quot;dv&quot;&gt;101&lt;/span&gt;p &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; ()
    | &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; (_, r) -&amp;gt; r &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; Current.sender () &amp;lt;&amp;gt; storage.oracle_id &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;Random numbers cannot be generated&quot;&lt;/span&gt;);
  &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; storage.game &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
  | &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dt&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;No game already started&quot;&lt;/span&gt;
  | &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; game -&amp;gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; ops =
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; random_number &amp;lt; game.number &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;(* Lose *)&lt;/span&gt;
        ([] : operation &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;(* Win *)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; gain = &lt;span class=&quot;kw&quot;&gt;match&lt;/span&gt; (game.bet * game.number / &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;p) &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt;
          | &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; -&amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;tz
          | &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; (g, _) -&amp;gt; g &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; reimbursed = game.bet + gain &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
        [ Account.transfer ~dest:game.player ~amount:reimbursed ]
    &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; storage = storage.game &amp;lt;- (&lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; : game &lt;span class=&quot;dt&quot;&gt;option&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;
    (ops, storage)

&lt;span class=&quot;co&quot;&gt;(* accept funds *)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;%entry fund _ storage =
  ([] : operation &lt;span class=&quot;dt&quot;&gt;list&lt;/span&gt;), storage&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;the-oracle&quot;&gt;The Oracle&lt;/h2&gt;
&lt;p&gt;The oracle can be implemented using &lt;a href=&quot;http://tezos.gitlab.io/mainnet/api/rpc.html&quot;&gt;Tezos RPCs&lt;/a&gt; on a running Tezos node. The principle of the oracle is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Monitor new blocks in the chain.&lt;/li&gt;
&lt;li&gt;For each new block, look if it includes &lt;strong&gt;successful&lt;/strong&gt; transactions whose &lt;em&gt;destination&lt;/em&gt; is the &lt;em&gt;game smart contract&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Look at the parameters of the transaction to see if it is a call to either &lt;code&gt;play&lt;/code&gt;, &lt;code&gt;finish&lt;/code&gt; or &lt;code&gt;fund&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it is a successful call to &lt;code&gt;play&lt;/code&gt;, then we know that the smart contract is awaiting a random number.&lt;/li&gt;
&lt;li&gt;Generate a random number between 0 and 100 and make a call to the game smart contract with the appropriate private key (the transaction can be signed by a Ledger plugged to the oracle server for instance).&lt;/li&gt;
&lt;li&gt;Wait a small amount of time depending on blocks intervals for confirmation.&lt;/li&gt;
&lt;li&gt;Loop.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These can be implemented with the following RPCs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitoring blocks: &lt;a&gt;&lt;code&gt;/chains/main/blocks?[length=&amp;lt;int&amp;gt;]&lt;/code&gt; &amp;lt;&lt;/a&gt;&lt;a class=&quot;uri&quot; href=&quot;http://tezos.gitlab.io/mainnet/api/rpc.html#get-chains-chain-id-blocks&quot;&gt;http://tezos.gitlab.io/mainnet/api/rpc.html#get-chains-chain-id-blocks&lt;/a&gt;&lt;a&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Listing operations in blocks: &lt;a&gt;&lt;code&gt;/chains/main/blocks/&amp;lt;block_id&amp;gt;/operations/3&lt;/code&gt; &amp;lt;&lt;/a&gt;&lt;a class=&quot;uri&quot; href=&quot;http://tezos.gitlab.io/mainnet/api/rpc.html#get-block-id-operations-list-offset&quot;&gt;http://tezos.gitlab.io/mainnet/api/rpc.html#get-block-id-operations-list-offset&lt;/a&gt;&lt;a&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Getting the storage of a contract: &lt;a&gt;&lt;code&gt;/chains/main/blocks/&amp;lt;block_id&amp;gt;/context/contracts/&amp;lt;contract_id&amp;gt;/storage&lt;/code&gt; &amp;lt;&lt;/a&gt;&lt;a class=&quot;uri&quot; href=&quot;http://tezos.gitlab.io/mainnet/api/rpc.html#get-block-id-context-contracts-contract-id-storage&quot;&gt;http://tezos.gitlab.io/mainnet/api/rpc.html#get-block-id-context-contracts-contract-id-storage&lt;/a&gt;&lt;a&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Making transactions or contract calls:
&lt;ul&gt;
&lt;li&gt;Either call the &lt;code&gt;tezos-client&lt;/code&gt; binary (easiest if running on a server).&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;liquidity file.liq --call ...&lt;/code&gt; binary (private key must be in plain text so it is not recommended for production servers).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An implementation of a random number Oracle in OCaml (which uses the liquidity client to make transactions) can be found in this repository: &lt;a class=&quot;uri&quot; href=&quot;https://github.com/OCamlPro/liq_game/blob/master/src/crawler.ml&quot;&gt;https://github.com/OCamlPro/liq_game/blob/master/src/crawler.ml&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Try a version on the mainnet&lt;/h2&gt;
&lt;p&gt;This contract is deployed on the Tezos mainnet at the following address:Â Â &lt;a href=&quot;https://tzscan.io/KT1GgUJwMQoFayRYNwamRAYCvHBLzgorLoGo&quot;&gt;KT1GgUJwMQoFayRYNwamRAYCvHBLzgorLoGo&lt;/a&gt;, with the minor difference that the contract refunds 1 Î¼tz if the player loses to give some sort of feedback. You can try your luck by sending transactions (with a non zero amount) with a parameter of the form &lt;code&gt;Left (Pair 99 &quot;tz1LWub69XbTxdatJnBkm7caDQoybSgW4T3s&quot;)&lt;/code&gt; where &lt;code&gt;99&lt;/code&gt; is the number you want to play and &lt;code&gt;tz1LWub69XbTxdatJnBkm7caDQoybSgW4T3s&lt;/code&gt; is your refund address. You can do so by using either a wallet that supports passing parameters with transactions (like Tezbox) or the command line Tezos client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tezos-client transfer 10 from my_account to KT1GgUJwMQoFayRYNwamRAYCvHBLzgorLoGo --fee 0 --arg 'Left (Pair 50 &quot;tz1LWub69XbTxdatJnBkm7caDQoybSgW4T3s&quot;)'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;remarks&quot;&gt;Remarks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In this game, the oracle must be trusted and so it can cheat. To mitigate this drawback, the oracle can be used as a random number generator for several games, if random values are stored in an intermediate contract.&lt;/li&gt;
&lt;li&gt;If the oracle looks for events in the last baked block (head), then it is possible that the current chain will be discarded and that the random number transaction appears in another chain. In this case, the player that sees this happen can play another game with a chosen number if he sees the random number in the mempool. In practice, the oracle operation is created only on the branch where the first player started, so that this operation cannot be put on another branch, removing any risk of attack.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;Some contracts on Ethereum use block hashes as sources of randomness but these are easily manipulated by miners so they are not safe to use. There are also ways to have participants contribute parts of a random number with enforceable commitments &lt;a class=&quot;uri&quot; href=&quot;https://github.com/randao/randao&quot;&gt;https://github.com/randao/randao&lt;/a&gt;.&lt;a href=&quot;#fnref1&quot;&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/11/72x72/21a9.png&quot; alt=&quot;â©&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;The random number could technically be sent in the same block by monitoring the mempool but it is not a good idea because the miner could reorder the transactions which will make both of them fail, or worse she could replace her bet accordingly once she sees a random number in her mempool.&lt;a href=&quot;#fnref2&quot;&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/11/72x72/21a9.png&quot; alt=&quot;â©&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;table style=&quot;border-collapse: collapse; width: 100%;&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 24.1218%; vertical-align: top&quot; &gt;&lt;img class=&quot;alignnone size-thumbnail&quot; src=&quot;http://www.ocamlpro.com/wp-content/uploads/2017/07/AAEAAQAAAAAAAAYIAAAAJGU0ZWNkNGM1LTQ2YWMtNDMzYy05MzFkLWY0NjE0MzhmZWM5Yw.jpg&quot; width=&quot;178&quot; height=&quot;178&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;width: 75.8782%; vertical-align: top; line-height: 20px;&quot;&gt;&lt;strong&gt;Alain Mebsout&lt;/strong&gt;: Alain is a senior engineer at OCamlPro. Alain was involved in Tezos early in 2017, participating in the design of the ICO infrastructure and in particular, the Bitcoin and Ethereum smart contracts. Since then, Alain has been developing the Liquidity language, compiler and online editor, and has started working on the verification of Liquidity smart contracts. Alain also contributed some code in the Tezos node to improve Michelson. Alain holds a PhD in Computer Science on formal verification of programs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1163</id><title type="text">Liquidity Tutorial: A Game with an Oracle for Random Numbers</title><updated>2018-11-06T17:45:30-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2019-01-18T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/148.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.9+beta1&quot;&gt;first
beta release of Coq 8.9&lt;/a&gt; is available for testing.&lt;/p&gt;

&lt;p&gt;It features many quality-of-life improvements, including goal
differences as well as numeral and custom notations. For details, see the
&lt;a href=&quot;https://github.com/coq/coq/blob/V8.9+beta1/CHANGES.md&quot;&gt;CHANGES&lt;/a&gt;
file.&lt;/p&gt;

&lt;p&gt;Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug
reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;

 </content><id>https://coq.inria.fr/news/148.html</id><title type="text">Coq 8.9+beta1 is out</title><updated>2018-11-02T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2019-01-18T16:02:45-00:00</updated><rights type="text">Copyright 2019 OCaml Forge</rights><link title="OCaml Forge Project News" type="text/html" href="http://forge.ocamlcore.org/news/" rel="related"/><link title="OCaml Forge Project News" type="application/rss+xml" href="http://forge.ocamlcore.org/export/rss20_news.php" rel="self"/><generator>OCaml Forge RSS generator</generator><id>http://forge.ocamlcore.org/news/</id><title type="text">OCaml Forge Project News</title><author><name>OCamlCore Forge News</name></author></source><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=964" rel="alternate"/><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=964" rel="related"/><content xml:base="http://forge.ocamlcore.org/export/rss20_news.php" type="html">The forge and related websites will be down for a few hours on 2018-11-01 starting at around 20:30 CEST.

The previous downtime was not enough to do the full migration [1]. I will do my best to keep the downtime as short as possible.

In the meantime, you can use the &amp;quot;static&amp;quot; website that has been put in place:
https://forge-static.ocamlcore.org

[1]: https://forge.ocamlcore.org/forum/forum.php?forum_id=963</content><id>http://forge.ocamlcore.org/forum/forum.php?forum_id=964</id><title type="text">forge.ocamlcore.org expected downtime on 2018-11-01</title><updated>2018-11-01T16:53:48-00:00</updated><author><email>gildor-admin@users.forge.ocamlcore.org</email><name>Sylvain Le Gall</name></author></entry><entry><source><updated>2019-01-18T16:02:45-00:00</updated><rights type="text">Copyright 2019 OCaml Forge</rights><link title="OCaml Forge Project News" type="text/html" href="http://forge.ocamlcore.org/news/" rel="related"/><link title="OCaml Forge Project News" type="application/rss+xml" href="http://forge.ocamlcore.org/export/rss20_news.php" rel="self"/><generator>OCaml Forge RSS generator</generator><id>http://forge.ocamlcore.org/news/</id><title type="text">OCaml Forge Project News</title><author><name>OCamlCore Forge News</name></author></source><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=963" rel="alternate"/><link href="http://forge.ocamlcore.org/forum/forum.php?forum_id=963" rel="related"/><content xml:base="http://forge.ocamlcore.org/export/rss20_news.php" type="html">The forge and related websites will be down for a few hours on 2018-10-30 starting at around 21:00 CEST.

I will do my best to keep the downtime as short as possible.

In the meantime, you can use the &amp;quot;static&amp;quot; website that has been put in place:
https://forge-static.ocamlcore.org

</content><id>http://forge.ocamlcore.org/forum/forum.php?forum_id=963</id><title type="text">forge.ocamlcore.org expected downtime on 2018-10-30</title><updated>2018-11-01T16:53:38-00:00</updated><author><email>gildor-admin@users.forge.ocamlcore.org</email><name>Sylvain Le Gall</name></author></entry><entry><source><updated>2018-11-01T13:09:51-00:00</updated><link type="application/atom+xml" href="https://jobs.github.com/positions.atom?description=ocaml" rel="self"/><link type="text/html" href="https://jobs.github.com" rel="alternate"/><id>tag:jobs.github.com,2005:/positions</id><title type="text">GitHub Jobs </title><author><email>jobs@github.com</email><name>GitHub Jobs</name></author></source><published>2018-11-01T13:09:51-00:00</published><link type="text/html" href="https://jobs.github.com/positions/9e8ba450-e72e-11e7-926f-6ce07b7015c8" rel="alternate"/><content xml:base="https://jobs.github.com/positions.atom?description=ocaml" type="html">Jane Street is a proprietary quantitative trading firm, focusing primarily on trading equities and equity derivatives. We use innovative technology, a scientific approach, and a deep understanding of markets to stay successful in our highly competitive field. We operate around the clock and around the globe, employing over 500 people in offices in New York, London and Hong Kong.

The markets in which we trade change rapidly, but our intellectual approach changes faster still. Every day, we have new problems to solve and new theories to test. Our entrepreneurial culture is driven by our talented team of traders and programmers. At Jane Street, we don't come to work wanting to leave. We come to work excited to test new theories, have thought-provoking discussions, and maybe sneak in a game of ping-pong or two. Keeping our culture casual and our employees happy is of paramount importance to us.

As Jane Street grows, the quality of the development tools we use matters more and more.  We increasingly work on the OCaml compiler itself: adding useful language features, fine-tuning the type system and improving the performance of the generated code. Alongside this, we also work on the surrounding toolchain, developing new tools for profiling, debugging, documentation and build automation.

We're looking to hire a developer with experience working on compilers to join us. That experience might be from working on a production compiler in industry or from working on research compilers in an academic setting. No previous experience with OCaml or functional programming languages is required.

Weâre looking for candidates for both our London and New York offices. Benefits and compensation are highly competitive.
</content><id>urn:uuid:9e8ba450-e72e-11e7-926f-6ce07b7015c8</id><title type="text">Compiler Engineer</title><updated>2018-11-29T22:51:03-00:00</updated><author><email>jobs@github.com</email><name>GitHub Jobs</name></author></entry><entry><source><updated>2018-11-01T13:09:51-00:00</updated><link type="application/atom+xml" href="https://jobs.github.com/positions.atom?description=ocaml" rel="self"/><link type="text/html" href="https://jobs.github.com" rel="alternate"/><id>tag:jobs.github.com,2005:/positions</id><title type="text">GitHub Jobs </title><author><email>jobs@github.com</email><name>GitHub Jobs</name></author></source><published>2018-11-01T13:09:37-00:00</published><link type="text/html" href="https://jobs.github.com/positions/0a9333c4-71da-11e0-9ac7-692793c00b45" rel="alternate"/><content xml:base="https://jobs.github.com/positions.atom?description=ocaml" type="html">Software Developer 

Jane Street is a proprietary quantitative trading firm, focusing primarily on trading equities and equity derivatives. We use innovative technology, a scientific approach, and a deep understanding of markets to stay successful in our highly competitive field. We operate around the clock and around the globe, employing over 500 people in offices in New York, London and Hong Kong.

The markets in which we trade change rapidly, but our intellectual approach changes faster still. Every day, we have new problems to solve and new theories to test. Our entrepreneurial culture is driven by our talented team of traders and programmers. At Jane Street, we don't come to work wanting to leave. We come to work excited to test new theories, have thought-provoking discussions, and maybe sneak in a game of ping-pong or two. Keeping our culture casual and our employees happy is of paramount importance to us.

We are looking to hire great software developers with an interest in functional programming. OCaml, a statically typed functional programming language with similarities to Haskell, Scheme, Erlang, F# and SML, is our language of choice. We've got the largest team of OCaml developers in any industrial setting, and probably the world's largest OCaml codebase. We use OCaml for running our entire business, supporting everything from research to systems administration to trading systems. If you're interested in seeing how functional programming plays out in the real world, there's no better place.

The atmosphere is informal and intellectual. There is a focus on education, and people learn about software and trading, both through formal classes and on the job. The work is challenging, and you get to see the practical impact of your efforts in quick and dramatic terms. Jane Street is also small enough that people have the freedom to get involved in many different areas of the business. Compensation is highly competitive, and there's a lot of room for growth.

You can learn more about Jane Street and our technology from our main site, janestreet.com. You can also look at a a talk given at CMU about why Jane Street uses functional programming (http://ocaml.janestreet.com/?q=node/61), and our programming blog (http://ocaml.janestreet.com).

We also have extensive benefits, including:

* 90% book reimbursement for work-related books
* 90% tuition reimbursement for continuing education
* Excellent, zero-premium medical and dental insurance
* Free lunch delivered daily from a selection of restaurants
* Catered breakfasts and fresh brewed Peet's coffee
* An on-site, private gym in New York with towel service
* Kitchens fully stocked with a variety of snack choices
* Full company 401(k) match up to 6% of salary, vests immediately

More information at http://janestreet.com/culture/benefits/</content><id>urn:uuid:0a9333c4-71da-11e0-9ac7-692793c00b45</id><title type="text">Software Developer (Functional Programming)</title><updated>2018-11-29T22:19:54-00:00</updated><author><email>jobs@github.com</email><name>GitHub Jobs</name></author></entry><entry><source><updated>2018-12-12T00:00:00-00:00</updated><link href="https://opam.ocaml.org/blog/feed.xml" rel="self"/><contributor><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>{ Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:David.Allsopp(%C3%A0)cl.cam.ac.uk</uri><name>{ David Allsopp }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://anil.recoil.org</uri><name>{ Anil Madhavapeddy, Louis Gesbert }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert, Hannes Mehnert }</name></contributor><contributor><uri>https://opam.ocaml.org</uri><name>{ OCaml Platform Team }</name></contributor><contributor><uri>http://dave.recoil.org/</uri><name>{ Dave Scott }</name></contributor><contributor><uri>http://gazagnaire.org</uri><name>{ Thomas Gazagnaire }</name></contributor><contributor><uri>https://github.com/def-lkb</uri><name>{ Frederic Bour, Thomas Refis }</name></contributor><contributor><uri>http://roscidus.com/blog/</uri><name>{ Thomas Leonard }</name></contributor><contributor><uri>https://github.com/diml</uri><name>{ JÃ©rÃ©mie Dimino }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Thomas Gazagnaire }</name></contributor><id>https://opam.ocaml.org/blog/</id><title type="text">The OCaml Platform Blog</title><author><name>OCaml Platform</name></author><author><uri>https://opam.ocaml.org/</uri><name>The OCaml Platform Team</name></author></source><link type="text/html" href="https://opam.ocaml.org/blog/opam-2-0-1/" rel="alternate"/><link href="https://opam.ocaml.org/blog/opam-2-0-1/" rel="self"/><content xml:base="http://opam.ocaml.org/blog/feed.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">

<p>We are pleased to announce the release of <a href="https://github.com/ocaml/opam/releases/tag/2.0.1">opam 2.0.1</a>.</p>
<p>This new version contains mainly <a href="https://github.com/ocaml/opam/pull/3560">backported fixes</a>, some platform-specific:</p>
<ul><li>Cold boot for MacOS/CentOS/Alpine</li><li>Install checksum validation on MacOS</li><li>Archive extraction for OpenBSD now defaults to using <code>gtar</code></li><li>Fix compilation of mccs on MacOS and Nix platforms</li><li>Do not use GNU-sed specific features in the release Makefile, to fix build on OpenBSD/FreeBSD</li><li>Cleaning to enable reproducible builds</li><li>Update configure scripts</li></ul>

<p>And some opam specific:</p>
<ul><li>git: fix git fetch by sha1 for git &lt; 2.14</li><li>linting: add <code>test</code> variable warning and empty description error</li><li>upgrade: convert pinned but not installed opam files</li><li>error reporting: more comprehensible error message for tar extraction, and upgrade of git-url compilers</li><li>opam show: upgrade given local files</li><li>list: as opam 2.0.0 <code>list</code> doesn't return non-zero code if list is empty, add <code>--silent</code> option for a silent output and returns 1 if list is empty</li></ul>

<p><hr/>Installation instructions (unchanged):</p>
<ol><li><p>From binaries: run</p>
<pre><code>sh &lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)</code></pre>

<p>or download manually from <a href="https://github.com/ocaml/opam/releases/tag/2.0.1">the Github &quot;Releases&quot; page</a> to your PATH. In this case, don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed.</p>
</li><li><p>From source, using opam:</p>
<pre><code>opam update; opam install opam-devel</code></pre>

<p>(then copy the opam binary to your PATH as explained, and don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed)</p>
</li><li><p>From source, manually: see the instructions in the <a href="https://github.com/ocaml/opam/tree/2.0.1#compiling-this-repo">README</a>.</p>
</li></ol>

<p>We hope you enjoy this new major version, and remain open to <a href="https://github.com/ocaml/opam/issues">bug reports</a> and <a href="https://github.com/ocaml/opam/issues">suggestions</a>.</p>
<blockquote><p>NOTE: this article is cross-posted on <a href="https://opam.ocaml.org/blog/">opam.ocaml.org</a> and <a href="http://www.ocamlpro.com/category/blog/">ocamlpro.com</a>. Please head to the latter for the comments!</p>
</blockquote></div></content><id>https://opam.ocaml.org/blog/opam-2-0-1/</id><title type="text">opam 2.0.1 is out!</title><updated>2018-10-24T00:00:00-00:00</updated><author><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2018-10-19T00:00:00-00:00</published><link href="https://tarides.com/blog/2018-10-19-ocaml-git-2-0.html" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;I&amp;#39;m very happy to announce a new major release of &lt;code&gt;ocaml-git&lt;/code&gt; (2.0).
This release is a 2-year effort to get a revamped
streaming API offering a full control over memory
allocation. This new version also adds production-ready implementations of
the wire protocol: &lt;code&gt;git push&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; now work very reliably
using the raw Git and smart HTTP protocol (SSH support will come
soon). &lt;code&gt;git gc&lt;/code&gt; is also implemented, and all of the basic bricks are
now available to create Git servers. MirageOS support is available
out-of-the-box.&lt;/p&gt;
&lt;p&gt;Two years ago, we decided to rewrite &lt;code&gt;ocaml-git&lt;/code&gt; and split it into
standalone libraries. More details about these new libraries are also
given below.&lt;/p&gt;
&lt;p&gt;But first, let&amp;#39;s focus on &lt;code&gt;ocaml-git&lt;/code&gt;&amp;#39;s new design. The primary goal was
to fix memory consumption issues that our users noticed with the previous version,
and to make &lt;code&gt;git push&lt;/code&gt; work reliably. We also took care about
not breaking the API too much, to ease the transition for current users.&lt;/p&gt;
&lt;h2 id=&quot;Controlled-allocations&quot;&gt;Controlled allocations&lt;/h2&gt;

&lt;p&gt;There is a big difference in the way &lt;code&gt;ocaml-git&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;
are designed: &lt;code&gt;git&lt;/code&gt; is a short-lived command-line tool which does not
care that much about allocation policies, whereas we wanted to build a
library that can be linked with long-lived Git client and/or server
applications. We had to make some (performance) compromises to support
that use-case, at the benefit of tighter allocation policies â and hence
more predictable memory consumption patterns.
Other Git libraries such as &lt;a href='https://libgit2.org/'&gt;libgit2&lt;/a&gt;
also have to &lt;a href='https://libgit2.org/security/'&gt;deal&lt;/a&gt; with similar concerns.&lt;/p&gt;
&lt;p&gt;In order to keep a tight control on the allocated memory, we decided to
use &lt;a href='https://github.com/mirage/decompress'&gt;decompress&lt;/a&gt; instead of
&lt;code&gt;camlzip&lt;/code&gt;. &lt;code&gt;decompress&lt;/code&gt; allows the users to provide their own buffer
instead of allocating dynamically. This allowed us to keep a better
control on memory consumption. See below for more details on &lt;code&gt;decompress&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also used &lt;a href='https://github.com/inhabitedtype/angstrom'&gt;angstrom&lt;/a&gt; and
&lt;a href='https://github.com/mirage/encore'&gt;encore&lt;/a&gt; to provide a streaming interface
to encode and decode Git objects. The streaming API is currently hidden
to the end-user, but it helped us a lot to build abstraction and, again, on
managing the allocation policy of the library.&lt;/p&gt;
&lt;h2 id=&quot;Complete-PACK-file-support-including-GC&quot;&gt;Complete PACK file support (including GC)&lt;/h2&gt;

&lt;p&gt;In order to find the right abstraction for manipulating pack files in
a long-lived application, we experimented with
&lt;a href='https://github.com/dinosaure/sirodepac'&gt;various&lt;/a&gt;
&lt;a href='https://github.com/dinosaure/carton'&gt;prototypes&lt;/a&gt;. We haven&amp;#39;t found the
right abstractions just yet, but we believe the PACK format could be useful
to store any kind of data in the future (and not especially Git objects).&lt;/p&gt;
&lt;p&gt;We implemented &lt;code&gt;git gc&lt;/code&gt; by following the same heuristics as
&lt;a href='https://github.com/git/git/blob/master/Documentation/technical/pack-heuristics.txt'&gt;Git&lt;/a&gt;
to compress pack files and
we produce something similar in size â &lt;code&gt;decompress&lt;/code&gt; has a good ratio about
compression â and we are using &lt;code&gt;duff&lt;/code&gt;, our own implementation of &lt;code&gt;xdiff&lt;/code&gt;, the
binary diff algorithm used by Git (more details on &lt;code&gt;duff&lt;/code&gt; below).
We also had to re-implement the streaming algorithm to reconstruct &lt;code&gt;idx&lt;/code&gt; files on
the fly, when receiving pack file on the network.&lt;/p&gt;
&lt;p&gt;One notable feature of our compression algorithms is they work without
the assumption that the underlying system implements POSIX: hence,
they can work fully in-memory, in a browser using web storage or
inside a MirageOS unikernel with &lt;a href='https://github/g2p/wodan'&gt;wodan&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Production-ready-push-and-pull&quot;&gt;Production-ready push and pull&lt;/h2&gt;

&lt;p&gt;We re-implemented and abstracted the &lt;a href='https://github.com/git/git/blob/master/Documentation/technical/http-protocol.txt'&gt;Git Smart protocol&lt;/a&gt;, and used that
abstraction to make &lt;code&gt;git push&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; work over HTTP.  By
default we provide a &lt;a href='https://github.com/mirage/cohttp'&gt;cohttp&lt;/a&gt;
implementation but users can use their own â for instance based on
&lt;a href='https://github.com/inhabitedtype/httpaf'&gt;httpaf&lt;/a&gt;.
As proof-of-concept, the &lt;a href='https://github.com/mirage/ocaml-git/pull/227'&gt;initial
pull-request&lt;/a&gt; of &lt;code&gt;ocaml-git&lt;/code&gt; 2.0 was
created using this new implementation; moreover, we wrote a
prototype of a Git client compiled with &lt;code&gt;js_of_ocaml&lt;/code&gt;, which was able
to run &lt;code&gt;git pull&lt;/code&gt; over HTTP inside a browser!&lt;/p&gt;
&lt;p&gt;Finally, that implementation will allow MirageOS unikernels to synchronize their
internal state with external Git stores (hosted for instance on GitHub)
using push/pull mechanisms. We also expect to release a server-side implementation
of the smart HTTP protocol, so that the state of any unikernel can be inspected
via &lt;code&gt;git pull&lt;/code&gt;. Stay tuned for more updates on that topic!&lt;/p&gt;
&lt;h2 id=&quot;Standalone-Dependencies&quot;&gt;Standalone Dependencies&lt;/h2&gt;

&lt;p&gt;Below you can find the details of the new stable releases of libraries that are
used by &lt;code&gt;ocaml-git&lt;/code&gt; 2.0.&lt;/p&gt;
&lt;h3 id=&quot;optint-and-checkseum&quot;&gt;&lt;code&gt;optint&lt;/code&gt; and &lt;code&gt;checkseum&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In some parts of &lt;code&gt;ocaml-git&lt;/code&gt;, we need to compute a Circular
Redundancy Check value. It is 32-bit integer value. &lt;code&gt;optint&lt;/code&gt; provides
an abstraction of it but structurally uses an unboxed integer or a
boxed &lt;code&gt;int32&lt;/code&gt; value depending on target (32 bit or 64 bit architecture).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;checkseum&lt;/code&gt; relies on &lt;code&gt;optint&lt;/code&gt; and provides 3 implementations of CRC:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adler32 (used by &lt;code&gt;zlib&lt;/code&gt; format)&lt;/li&gt;&lt;li&gt;CRC32 (used by &lt;code&gt;gzip&lt;/code&gt; format and &lt;code&gt;git&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;CRC32-C (used by &lt;code&gt;wodan&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;checkseum&lt;/code&gt; uses the &lt;em&gt;linking trick&lt;/em&gt;: this means that users of the
library program against an abstract API (only the &lt;code&gt;cmi&lt;/code&gt; is provided);
at link-time, users have to select which implementation to use:
&lt;code&gt;checkseum.c&lt;/code&gt; (the C implementation) or &lt;code&gt;checkseum.ocaml&lt;/code&gt; (the OCaml
implementation). The process is currently a bit cumbersome but upcoming
&lt;code&gt;dune&lt;/code&gt; release will make that process much more transparent to the users.&lt;/p&gt;
&lt;h3 id=&quot;encore-angkor&quot;&gt;&lt;code&gt;encore&lt;/code&gt; (/&lt;em&gt;angkor&lt;/em&gt;/)&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;git&lt;/code&gt;, we work with Git &lt;em&gt;objects&lt;/em&gt; (&lt;em&gt;tree&lt;/em&gt;, &lt;em&gt;blob&lt;/em&gt; or
&lt;em&gt;commit&lt;/em&gt;). These objects are encoded in a specific format. Then,
the hash of these objects are computed from the encoded
result to get a unique identifier. For example, the hash of your last commit is:
&lt;code&gt;sha1(encode(commit))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A common operation in &lt;code&gt;git&lt;/code&gt; is to decode Git objects from an encoded
representation of them (especially in &lt;code&gt;.git/objects/*&lt;/code&gt; as a &lt;em&gt;loose&lt;/em&gt;
file) and restore them in another part of your Git repository (like in a
PACK file or on the command-line).&lt;/p&gt;
&lt;p&gt;Hence, we need to ensure that encoding is always deterministic, and
that decoding an encoded Git object is always the identity, e.g. there is
an &lt;em&gt;isomorphism&lt;/em&gt; between the decoder and the encoder.&lt;/p&gt;
&lt;pre class='ocaml'&gt;&lt;code class='ocaml'&gt;let decoder &amp;lt;.&amp;gt; encoder : value -&amp;gt; value = id
let encoder &amp;lt;.&amp;gt; decoder : string -&amp;gt; string = id&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='https://github.com/mirage/encore'&gt;encore&lt;/a&gt; is a library in which you
can describe a format (like Git format) and from it, we can derive a
streaming decoder &lt;strong&gt;and&lt;/strong&gt; encoder that are isomorphic by
construction.&lt;/p&gt;
&lt;h3 id=&quot;duff&quot;&gt;&lt;code&gt;duff&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/mirage/duff'&gt;duff&lt;/a&gt; is a pure implementation in
OCaml of the &lt;code&gt;xdiff&lt;/code&gt; algorithm.
Git has an optimized representation of your Git repository. It&amp;#39;s a
PACK file. This format uses a binary diff algorithm called &lt;code&gt;xdiff&lt;/code&gt;
to compress binary data. &lt;code&gt;xdiff&lt;/code&gt; takes a source A and a target B and try
to find common sub-strings between A and B.&lt;/p&gt;
&lt;p&gt;This is done by a Rabin&amp;#39;s fingerprint of the source A applied to the
target B. The fingerprint can then be used to produce a lightweight
representation of B in terms of sub-strings of A.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;duff&lt;/code&gt; implements this algorithm (with additional Git&amp;#39;s constraints,
regarding the size of the sliding windows) in OCaml. It provides a
small binary &lt;code&gt;xduff&lt;/code&gt; that complies with the format of Git without the &lt;code&gt;zlib&lt;/code&gt;
layer.&lt;/p&gt;
&lt;pre class='sh'&gt;&lt;code class='sh'&gt;$ xduff diff source target &amp;gt; target.xduff
$ xduff patch source &amp;lt; target.xduff &amp;gt; target.new
$ diff target target.new
$ echo $?
0&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;decompress&quot;&gt;&lt;code&gt;decompress&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/mirage/decompress'&gt;decompress&lt;/a&gt;
is a pure implementation in OCaml of &lt;code&gt;zlib&lt;/code&gt; and
&lt;code&gt;rfc1951&lt;/code&gt;. You can compress and decompress data flows and, obviously,
Git does this compression in &lt;em&gt;loose&lt;/em&gt; files and PACK files.&lt;/p&gt;
&lt;p&gt;It provides a non-blocking interface and is easily usable in a server
context. Indeed, the implementation never allocates and only relies on
what the user provides (&lt;code&gt;window&lt;/code&gt;, input and output buffer). Then, the
distribution provides an easy example of how to use &lt;code&gt;decompress&lt;/code&gt;:&lt;/p&gt;
&lt;pre class='ocaml'&gt;&lt;code class='ocaml'&gt;val inflate: ?level:int -&amp;gt; string -&amp;gt; string
val deflate: string -&amp;gt; string&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;digestif&quot;&gt;&lt;code&gt;digestif&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/mirage/digestif'&gt;digestif&lt;/a&gt; is a toolbox providing
many implementations of hash algorithms such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MD5&lt;/li&gt;&lt;li&gt;SHA1&lt;/li&gt;&lt;li&gt;SHA224&lt;/li&gt;&lt;li&gt;SHA256&lt;/li&gt;&lt;li&gt;SHA384&lt;/li&gt;&lt;li&gt;SHA512&lt;/li&gt;&lt;li&gt;BLAKE2B&lt;/li&gt;&lt;li&gt;BLAKE2S&lt;/li&gt;&lt;li&gt;RIPEMD160&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Like &lt;code&gt;checkseum&lt;/code&gt;, &lt;code&gt;digestif&lt;/code&gt; uses the linking trick too: from a
shared interface, it provides 2 implementations, in C (&lt;code&gt;digestif.c&lt;/code&gt;)
and OCaml (&lt;code&gt;digestif.ocaml&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Regarding Git, we use the SHA1 implementation and we are ready to
migrate &lt;code&gt;ocaml-git&lt;/code&gt; to BLAKE2{B,S} as the Git core team expects - and,
in the OCaml world, it is just a &lt;em&gt;functor&lt;/em&gt; application with
another implementation.&lt;/p&gt;
&lt;h3 id=&quot;eqaf&quot;&gt;&lt;code&gt;eqaf&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Some applications require that secret values are compared in constant
time. Functions like &lt;code&gt;String.equal&lt;/code&gt; do not have this property, so we
have decided to provide a small package â &lt;a href='https://github.com/mirage/eqaf'&gt;eqaf&lt;/a&gt; â
providing a &lt;em&gt;constant-time&lt;/em&gt; &lt;code&gt;equal&lt;/code&gt; function.
&lt;code&gt;digestif&lt;/code&gt; uses it to check equality of hashes â it also exposes
&lt;code&gt;unsafe_compare&lt;/code&gt; if you don&amp;#39;t care about timing attacks in your application.&lt;/p&gt;
&lt;p&gt;Of course, the biggest work on this package is not about the
implementation of the &lt;code&gt;equal&lt;/code&gt; function but a way to check the
constant-time assumption on this function. Using this, we did a
&lt;a href='https://github.com/mirage/eqaf/tree/master/test'&gt;benchmark&lt;/a&gt; on Linux,
Windows and Mac to check it.&lt;/p&gt;
&lt;p&gt;An interesting fact is that after various experiments, we replaced the
initial implementation in C (extracted from OpenBSD&amp;#39;s &lt;a href='https://man.openbsd.org/timingsafe_bcmp.3'&gt;timingsafe_memcmp&lt;/a&gt;) with an OCaml
implementation behaving in a much more predictable way on all the
tested platforms.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The upcoming version 2.0 of &lt;a href='https://irmin.io'&gt;Irmin&lt;/a&gt; is using ocaml-git
to create small applications that &lt;a href='https://github.com/mirage/irmin/blob/master/examples/push.ml'&gt;push and pull their state
to GitHub&lt;/a&gt;.
We think that Git offers a very nice model to persist data for distributed
applications and we hope that more people will use ocaml-git to experiment
and manipulate application data in Git. Please
&lt;a href='https://github.com/mirage/ocaml-git/issues'&gt;send us&lt;/a&gt; your feedback!&lt;/p&gt;
</content><id>https://tarides.com/blog/2018-10-19-ocaml-git-2-0.html</id><title type="text">ocaml-git 2.0</title><updated>2018-10-19T00:00:00-00:00</updated><author><name>Romain C.</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/10/17/ocamlpros-tzscan-grant-proposal-accepted-by-the-tezos-foundation-joint-press-release/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/10/17/ocamlpros-tzscan-grant-proposal-accepted-by-the-tezos-foundation-joint-press-release/#comments" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;h1&gt;Tezos Foundation and OCamlPro joint press release &amp;#8211; October 17, 2018&lt;/h1&gt;
&lt;p&gt;We are pleased to announceÂ  that the Tezos Foundation has issued a grant to &lt;span lang=&quot;zxx&quot;&gt;&lt;a href=&quot;#OCPbio&quot;&gt;OCamlPro&lt;/a&gt;&lt;/span&gt; to support its work on &lt;span lang=&quot;zxx&quot;&gt;&lt;a href=&quot;https://tzscan.io/&quot;&gt;TzScan&lt;/a&gt;&lt;/span&gt;, a block explorer for the Tezos blockchain that will be made open-source.&lt;/p&gt;
&lt;p&gt;OCamlPro is a French company and R&amp;amp;D lab, focused on OCaml and blockchain development. OCamlPro, which is an active community member and contributor to Tezos, has initiated several Tezos-related projects such as &lt;span lang=&quot;zxx&quot;&gt;&lt;a href=&quot;https://tzscan.io/&quot;&gt;TzScan&lt;/a&gt;&lt;/span&gt; and &lt;span lang=&quot;zxx&quot;&gt;&lt;a href=&quot;http://liquidity-lang.org/&quot;&gt;Liquidity&lt;/a&gt;&lt;/span&gt;, a high-level programming language for creating smart contracts in Tezos with an online editor, compiler and debugger, and features a decompiler to audit Michelson contracts.&lt;/p&gt;
&lt;p&gt;Open-source block explorers are a key component of a blockchain ecosystem by allowing users to more easily monitor transactions, network validators (âbakersâ), and the health of a network. OCamlPro will also provide documentation on Tezos and continue to improve the TzScan API, which may be used by applications such as wallets.&lt;/p&gt;
&lt;p&gt;The Tezos Foundationâs core mission is to support the long-term success of the Tezos protocol and ecosystem. By funding projects imagined by scientists, researchers, developers, entrepreneurs, and enthusiasts, the Foundation encourages decentralized development and robust participation.&lt;/p&gt;
&lt;p&gt;More information &lt;a href=&quot;https://tezos.foundation/news/tezos-foundation-issues-grant-to-ocamlpro-to-support-tzscan&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a id=&quot;OCPbio&quot;&gt;&lt;/a&gt;Curious about OCamlPro&amp;#8217;s blockchain activities?&lt;/h2&gt;
&lt;p&gt;OCamlPro is a French software company and R&amp;amp;D lab, born in 2011 and located in Paris and Essonne. We are dedicated to improving the quality of software, through the use of formal methods, and we promote the use of OCaml, a fast and expressive, statically typed state-of-the-art programming language, matured for more than 30 years in the French public research lab Inria.&lt;/p&gt;
&lt;p&gt;In 2014, OCamlPro has been involved in the Tezos project, helping with the Tezos protocol design and developing the prototype of Tezos, later to become the official Tezos software. In 2017, OCamlPro developed the ICO infrastructure for Tezos, including Bitcoin and Ethereum smart-contracts. OCamlPro self-funded two big projects around Tezos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The&lt;a href=&quot;https://tzscan.io/&quot;&gt; TzScan&lt;/a&gt; block-explorer for Tezos: TzScan provides many features specific to Tezos delegated proof-of-stake protocol, to make life easier for bakers. TzScan API can be used by applications, such as wallets and delegation services to provide additional information to their users.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://liquidity-lang.org/&quot;&gt;Liquidity&lt;/a&gt; language for Tezos smart-contracts. Liquidity is a programming language, compiled to Michelson. Its online editor can be used to write, deploy, run and debug smart contracts. It also features a decompiler from Michelson, that can be used to audit contracts written in other languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In 2018, OCamlPro worked with the Tezos Foundation and Tezos Core Development team to prepare the launch of the betanet network, and later, the mainnet network.&lt;/p&gt;
&lt;p&gt;With a team of 10 PhD-level developers working on Tezos, OCamlPro is one of the biggest spot of knowledge on Tezos. OCamlPro can provide many services to the Tezos community: improvement of Tezos software, development of specific software, features and new protocols, training and consulting and smart contract design, writing, and auditing. With tight connections with Inria and other French research labs and universities, OCamlPro is also involved in several research projects, related to blockchains or formal methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;western&quot;&gt;Formal methods: OCamlPro is involved in collaborative projects with academic and industrial partners to develop tools for software verification, such as the Alt-Ergo SMT Solver (from LRI).&lt;/li&gt;
&lt;li class=&quot;western&quot;&gt;OCaml tooling: we help optimize OCaml (flambda) and design development tools for OCaml (open-source most of the time). Such tools range from command-line tools (such as OPAM or ocp-build), or GUI tools (the OCaml Memory Profiler), to web-based tools (TryOCaml, the OCaml MOOC with the learn-OCaml platform of the OCaml Foundation of Inria).&lt;/li&gt;
&lt;/ul&gt;
</content><category term="TZScan"/><id>http://www.ocamlpro.com/?p=1132</id><title type="text">OCamlProâs TZScan grant proposal accepted by the Tezos Foundation â joint press release</title><updated>2018-10-17T13:28:52-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2018-10-17T00:00:00-00:00</published><link href="https://tarides.com/blog/2018-10-17-ocamlformat-0-8.html" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;We are proud to announce the release of OCamlFormat 0.8 (available on opam). To ease the transition from the previous 0.7 release here are some highlights of the new features of this release. The &lt;a href='https://github.com/ocaml-ppx/ocamlformat/blob/v0.8/CHANGES.md#08-2018-10-09'&gt;full changelog&lt;/a&gt; is available on the project repository.&lt;/p&gt;
&lt;h1 id=&quot;Precedence-of-options&quot;&gt;Precedence of options&lt;/h1&gt;

&lt;p&gt;In the previous version you could override command line options with &lt;code&gt;.ocamlformat&lt;/code&gt; files configuration. 0.8 fixed this so that the OCamlFormat configuration is first established by reading &lt;code&gt;.ocamlformat&lt;/code&gt; and &lt;code&gt;.ocp-indent&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;margin = 77
wrap-comments = true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, these files in current and all ancestor directories for each input file are used, as well as the global configuration defined in &lt;code&gt;$XDG_CONFIG_HOME/ocamlformat&lt;/code&gt;. The global &lt;code&gt;$XDG_CONFIG_HOME/ocamlformat&lt;/code&gt; configuration has the lowest priority, then the closer the directory is to the processed file, the higher the priority. In each directory, both &lt;code&gt;.ocamlformat&lt;/code&gt; and &lt;code&gt;.ocp-indent&lt;/code&gt; files are read, with &lt;code&gt;.ocamlformat&lt;/code&gt; files having the higher priority.&lt;/p&gt;
&lt;p&gt;For now &lt;code&gt;ocp-indent&lt;/code&gt; options support is very partial and is expected to be extended in the future.&lt;/p&gt;
&lt;p&gt;Then the parameters can be overriden with the &lt;code&gt;OCAMLFORMAT&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OCAMLFORMAT=field-space=tight,type-decl=compact&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally the parameters can be overriden again with the command lines parameters.&lt;/p&gt;
&lt;h1 id=&quot;Reading-input-from-stdin&quot;&gt;Reading input from stdin&lt;/h1&gt;

&lt;p&gt;It is now possible to read the input from stdin instead of OCaml files. The following command invokes OCamlFormat that reads its input from the pipe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;let f x = x + 1&amp;quot; | ocamlformat --name a.ml -&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-&lt;/code&gt; on the command line indicates that &lt;code&gt;ocamlformat&lt;/code&gt; should read from stdin instead of expecting input files. It is then necessary to use the &lt;code&gt;--name&lt;/code&gt; option to designate the input (&lt;code&gt;a.ml&lt;/code&gt; here).&lt;/p&gt;
&lt;h1 id=&quot;Preset-profiles&quot;&gt;Preset profiles&lt;/h1&gt;

&lt;p&gt;Preset profiles allow you to have a consistent configuration without needing to tune every option.&lt;/p&gt;
&lt;p&gt;Preset profiles set all options, overriding lower priority configuration. A preset profile can be set using the &lt;code&gt;--profile&lt;/code&gt; (or &lt;code&gt;-p&lt;/code&gt;) option. You can pass the option &lt;code&gt;--profile=&amp;lt;name&amp;gt;&lt;/code&gt; on the command line or add &lt;code&gt;profile = &amp;lt;name&amp;gt;&lt;/code&gt; in an &lt;code&gt;.ocamlformat&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;p&gt;The available profiles are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;default&lt;/code&gt; sets each option to its default value&lt;/li&gt;&lt;li&gt;&lt;code&gt;compact&lt;/code&gt; sets options for a generally compact code style&lt;/li&gt;&lt;li&gt;&lt;code&gt;sparse&lt;/code&gt; sets options for a generally sparse code style&lt;/li&gt;&lt;li&gt;&lt;code&gt;janestreet&lt;/code&gt; is the profile used at JaneStreet&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;To get a better feel of it, here is the formatting of the &lt;a href='https://github.com/ocaml/ocaml/blob/trunk/typing/env.ml#L227-L234'&gt;&lt;code&gt;mk_callback&lt;/code&gt;&lt;/a&gt; function from the OCaml compiler with the &lt;code&gt;compact&lt;/code&gt; profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mk_callback rest name desc = function
  | None -&amp;gt; nothing
  | Some f -&amp;gt; (
      fun () -&amp;gt;
        match rest with
        | [] -&amp;gt; f name None
        | (hidden, _) :: _ -&amp;gt; f name (Some (desc, hidden)) )&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then the same function formatted with the &lt;code&gt;sparse&lt;/code&gt; profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mk_callback rest name desc = function
  | None -&amp;gt;
      nothing
  | Some f -&amp;gt;
      fun () -&amp;gt;
        ( match rest with
        | [] -&amp;gt;
            f name None
        | (hidden, _) :: _ -&amp;gt;
            f name (Some (desc, hidden)) )&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;Project-root&quot;&gt;Project root&lt;/h1&gt;

&lt;p&gt;The project root of an input file is taken to be the nearest ancestor directory that contains a &lt;code&gt;.git&lt;/code&gt; or &lt;code&gt;.hg&lt;/code&gt; or &lt;code&gt;dune-project&lt;/code&gt; file.
If the new option &lt;code&gt;--disable-outside-detected-project&lt;/code&gt; is set, &lt;code&gt;.ocamlformat&lt;/code&gt; configuration files are not read outside of the current project. If no configuration file is found, formatting is disabled.&lt;/p&gt;
&lt;p&gt;A new option, &lt;code&gt;--root&lt;/code&gt; allows to specify the root directory for a project. If specified, OCamlFormat only takes into account &lt;code&gt;.ocamlformat&lt;/code&gt; configuration files inside the root directory and its subdirectories.&lt;/p&gt;
&lt;h1 id=&quot;Credits&quot;&gt;Credits&lt;/h1&gt;

&lt;p&gt;This release also contains many other changes and bug fixes that we cannot detail here. Check out the &lt;a href='https://github.com/ocaml-ppx/ocamlformat/blob/v0.8/CHANGES.md#08-2018-10-09'&gt;full changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Special thanks to our maintainers and contributors for this release: David Allsopp, Josh Berdine, Hugo Heuzard, Brandon Kase, Anil Madhavapeddy and Guillaume Petiot.&lt;/p&gt;
</content><id>https://tarides.com/blog/2018-10-17-ocamlformat-0-8.html</id><title type="text">OCamlFormat 0.8</title><updated>2018-10-17T00:00:00-00:00</updated><author><name>Guillaume P.</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2018-09-27T00:00:00-00:00</published><link href="https://tarides.com/blog.html#2018-09-27-ocaml-workshop-2018" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;The OCaml Users and Developers Workshop brings together industrial
users of OCaml with academics and hackers who are working on extending
the language, type system and tools. OCaml 2018 was held on September
27th, 2018 in St. Louis, Missouri, USA, colocated with ICFP 2018.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Check Tarides&amp;#39; talks: &lt;a href='https://docs.google.com/presentation/d/e/2PACX-1vRnRiGeBWC6ctpSge0gTFuxprNTiS2qtNpvax_A8pD6Ob5ySfL9_SlPKCIoLDCbmsYjTAkMFnlUwqSl/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p1'&gt;RFCs, all the way down!&lt;/a&gt; and &lt;a href='https://speakerdeck.com/avsm/the-ocaml-platform-1-dot-0-2018'&gt;The OCaml Platform 1.0&lt;/a&gt;.
&lt;/strong&gt;&lt;/p&gt;
</content><id>https://tarides.com/blog.html#2018-09-27-ocaml-workshop-2018</id><title type="text">OCaml Workshop 2018</title><updated>2018-09-27T00:00:00-00:00</updated><author><name>Romain C.</name></author></entry><entry><source><updated>2019-01-18T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/147.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.8.2&quot;&gt;8.8.2 release of Coq&lt;/a&gt; is available.&lt;/p&gt;
&lt;p&gt;Main changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The kernel does not tolerate capture of global universes by polymorphic universe binders, fixing a soundness break (triggered only through custom plugins)&lt;/li&gt;
&lt;li&gt;A PDF version of the reference manual is available once again.&lt;/li&gt;
&lt;li&gt;The coq-makefile targets &lt;code&gt;print-pretty-timed&lt;/code&gt;, &lt;code&gt;print-pretty-timed-diff&lt;/code&gt;, and &lt;code&gt;print-pretty-single-time-diff&lt;/code&gt; now correctly label the &quot;before&quot; and &quot;after&quot; columns, rather than swapping them.&lt;/li&gt;
&lt;li&gt;The Windows installer now includes many more external packages that can be individually selected for installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many other bug fixes and lots of documentation improvements (for details, see the &lt;a href=&quot;https://github.com/coq/coq/milestone/15?closed=1&quot;&gt;8.8.2 milestone&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;

 </content><id>https://coq.inria.fr/news/147.html</id><title type="text">Coq 8.8.2 is out</title><updated>2018-09-26T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="Jane Street Tech Blog" type="text/html" href="https://blog.janestreet.com" rel="related"/><link title="Jane Street Tech Blog" type="application/rss+xml" href="https://blog.janestreet.com/feed.xml" rel="self"/><id>https://blog.janestreet.com</id><title type="text">Jane Street Tech Blog</title><author><name>Jane Street</name></author></source><link href="https://blog.janestreet.com/how-to-shuffle-a-big-dataset/" rel="alternate"/><content xml:base="https://blog.janestreet.com/feed.xml" type="html">&lt;p&gt;At Jane Street, we often work with data that has a very low
signal-to-noise ratio, but fortunately we also have a &lt;em&gt;lot&lt;/em&gt; of data.
Where practitioners in many fields might be accustomed to
having tens or hundreds of thousands of correctly labeled
examples, some of our problems are more like having a billion training
examples whose labels have only a slight tendency to be correct.
These large datasets present a number of interesting engineering
challenges.  The one we address here: &lt;em&gt;How do you shuffle a really
large dataset?&lt;/em&gt;  (If youâre not familiar with why one might need this,
jump to the section &lt;a href=&quot;#whyshuffle&quot;&gt;Why shuffle&lt;/a&gt; below.)&lt;/p&gt;

</content><id>https://blog.janestreet.com/how-to-shuffle-a-big-dataset/</id><title type="text">How to shuffle a big dataset</title><updated>2018-09-26T00:00:00-00:00</updated><author><name>Jane Street</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="Jane Street Tech Blog" type="text/html" href="https://blog.janestreet.com" rel="related"/><link title="Jane Street Tech Blog" type="application/rss+xml" href="https://blog.janestreet.com/feed.xml" rel="self"/><id>https://blog.janestreet.com</id><title type="text">Jane Street Tech Blog</title><author><name>Jane Street</name></author></source><link href="https://blog.janestreet.com/deep-learning-experiments-in-ocaml/" rel="alternate"/><content xml:base="https://blog.janestreet.com/feed.xml" type="html">&lt;p&gt;Last year we held a machine learning seminar in our London office,
which was an opportunity to reproduce some classical deep learning
results with a nice twist: we used OCaml as a programming language
rather than Python. This allowed us to train models defined in a
functional way in OCaml on a GPU using TensorFlow.&lt;/p&gt;

</content><id>https://blog.janestreet.com/deep-learning-experiments-in-ocaml/</id><title type="text">Deep learning experiments in OCaml</title><updated>2018-09-20T00:00:00-00:00</updated><author><name>Jane Street</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/09/19/opam-2-0-0-release-and-repository-upgrade/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/09/19/opam-2-0-0-release-and-repository-upgrade/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;We are happy to announce the final release of &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.0&quot;&gt;opam 2.0.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few weeks ago, we released a &lt;a href=&quot;https://opam.ocaml.org/blog/opam-2-0-0-rc4&quot;&gt;last release candidate&lt;/a&gt; to be later promoted to 2.0.0, synchronised with the &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;opam package repository&lt;/a&gt; &lt;a href=&quot;https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/&quot;&gt;upgrade&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You are encouraged to update as soon as you see fit, to continue to get package updates: opam 2.0.0 supports the older formats, and 1.2.2 will no longer get regular updates. See the &lt;a href=&quot;http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html&quot;&gt;Upgrade Guide&lt;/a&gt; for details about the new features and changes.&lt;/p&gt;
&lt;p&gt;The website opam.ocaml.org has been updated, with the full 2.0.0 documentation pages. You can still find the documentation for the previous versions in the corresponding menu.&lt;/p&gt;
&lt;p&gt;Package maintainers should be aware of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the master branch of the &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;opam package repository&lt;/a&gt; is now in the 2.0.0 format&lt;/li&gt;
&lt;li&gt;package submissions must accordingly be made in the 2.0.0 format, or using the new version of &lt;code&gt;opam-publish&lt;/code&gt; (2.0.0)&lt;/li&gt;
&lt;li&gt;anything that was merged into the repository in 1.2 format has been automatically updated to the 2.0.0 format&lt;/li&gt;
&lt;li&gt;the 1.2 format repository has been forked to its own branch, and will only be updated for critical fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For custom repositories, the &lt;a href=&quot;https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/#Advice-for-custom-repository-maintainers&quot;&gt;advice&lt;/a&gt; remains the same.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Installation instructions (unchanged):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From binaries: run
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or download manually from &lt;a href=&quot;https://github.com/ocaml/opam/releases/tag/2.0.0&quot;&gt;the Github &amp;#8220;Releases&amp;#8221; page&lt;/a&gt; to your PATH. In this case, don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed.&lt;/li&gt;
&lt;li&gt;From source, using opam:
&lt;pre&gt;&lt;code&gt;opam update; opam install opam-devel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(then copy the opam binary to your PATH as explained, and don&amp;#8217;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed)&lt;/li&gt;
&lt;li&gt;From source, manually: see the instructions in the &lt;a href=&quot;https://github.com/ocaml/opam/tree/2.0.0-rc4#compiling-this-repo&quot;&gt;README&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope you enjoy this new major version, and remain open to &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;bug reports&lt;/a&gt; and &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;suggestions&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: this article is cross-posted on &lt;a href=&quot;https://opam.ocaml.org/blog/&quot;&gt;opam.ocaml.org&lt;/a&gt; and &lt;a href=&quot;http://www.ocamlpro.com/category/blog/&quot;&gt;ocamlpro.com&lt;/a&gt;. Please head to the latter for the comments!&lt;/p&gt;&lt;/blockquote&gt;
</content><category term="OPAM"/><id>http://www.ocamlpro.com/?p=1128</id><title type="text">opam 2.0.0 release and repository upgrade</title><updated>2018-09-19T08:03:33-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-12-12T00:00:00-00:00</updated><link href="https://opam.ocaml.org/blog/feed.xml" rel="self"/><contributor><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>{ Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:David.Allsopp(%C3%A0)cl.cam.ac.uk</uri><name>{ David Allsopp }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://anil.recoil.org</uri><name>{ Anil Madhavapeddy, Louis Gesbert }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert, Hannes Mehnert }</name></contributor><contributor><uri>https://opam.ocaml.org</uri><name>{ OCaml Platform Team }</name></contributor><contributor><uri>http://dave.recoil.org/</uri><name>{ Dave Scott }</name></contributor><contributor><uri>http://gazagnaire.org</uri><name>{ Thomas Gazagnaire }</name></contributor><contributor><uri>https://github.com/def-lkb</uri><name>{ Frederic Bour, Thomas Refis }</name></contributor><contributor><uri>http://roscidus.com/blog/</uri><name>{ Thomas Leonard }</name></contributor><contributor><uri>https://github.com/diml</uri><name>{ JÃ©rÃ©mie Dimino }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Thomas Gazagnaire }</name></contributor><id>https://opam.ocaml.org/blog/</id><title type="text">The OCaml Platform Blog</title><author><name>OCaml Platform</name></author><author><uri>https://opam.ocaml.org/</uri><name>The OCaml Platform Team</name></author></source><link type="text/html" href="https://opam.ocaml.org/blog/opam-2-0-0/" rel="alternate"/><link href="https://opam.ocaml.org/blog/opam-2-0-0/" rel="self"/><content xml:base="http://opam.ocaml.org/blog/feed.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">

<p>We are happy to announce the final release of <a href="https://github.com/ocaml/opam/releases/tag/2.0.0">opam 2.0.0</a>.</p>
<p>A few weeks ago, we released a <a href="https://opam.ocaml.org/blog/opam-2-0-0-rc4">last release candidate</a> to be later promoted to 2.0.0, synchronised with the <a href="https://github.com/ocaml/opam-repository">opam package repository</a> <a href="https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/">upgrade</a>.</p>
<p>You are encouraged to update as soon as you see fit, to continue to get package updates: opam 2.0.0 supports the older formats, and 1.2.2 will no longer get regular updates. See the <a href="http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html">Upgrade Guide</a> for details about the new features and changes.</p>
<p>The website opam.ocaml.org has been updated, with the full 2.0.0 documentation pages. You can still find the documentation for the previous versions in the corresponding menu.</p>
<p>Package maintainers should be aware of the following:</p>
<ul><li>the master branch of the <a href="https://github.com/ocaml/opam-repository">opam package repository</a> is now in the 2.0.0 format</li><li>package submissions must accordingly be made in the 2.0.0 format, or using the new version of <code>opam-publish</code> (2.0.0)</li><li>anything that was merged into the repository in 1.2 format has been automatically updated to the 2.0.0 format</li><li>the 1.2 format repository has been forked to its own branch, and will only be updated for critical fixes</li></ul>

<p>For custom repositories, the <a href="https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/#Advice-for-custom-repository-maintainers">advice</a> remains the same.</p>
<p><hr/>Installation instructions (unchanged):</p>
<ol><li><p>From binaries: run</p>
<pre><code>sh &lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)</code></pre>

<p>or download manually from <a href="https://github.com/ocaml/opam/releases/tag/2.0.0">the Github &quot;Releases&quot; page</a> to your PATH. In this case, don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed.</p>
</li><li><p>From source, using opam:</p>
<pre><code>opam update; opam install opam-devel</code></pre>

<p>(then copy the opam binary to your PATH as explained, and don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed)</p>
</li><li><p>From source, manually: see the instructions in the <a href="https://github.com/ocaml/opam/tree/2.0.0-rc4#compiling-this-repo">README</a>.</p>
</li></ol>

<p>We hope you enjoy this new major version, and remain open to <a href="https://github.com/ocaml/opam/issues">bug reports</a> and <a href="https://github.com/ocaml/opam/issues">suggestions</a>.</p>
<blockquote><p>NOTE: this article is cross-posted on <a href="https://opam.ocaml.org/blog/">opam.ocaml.org</a> and <a href="http://www.ocamlpro.com/category/blog/">ocamlpro.com</a>. Please head to the latter for the comments!</p>
</blockquote></div></content><id>https://opam.ocaml.org/blog/opam-2-0-0/</id><title type="text">opam 2.0.0 release and repository upgrade</title><updated>2018-09-18T00:00:00-00:00</updated><author><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro</name></author></entry><entry><source><updated>2018-11-16T13:48:42-00:00</updated><link href="http://kcsrk.info/" rel="alternate"/><link href="http://kcsrk.info/atom.xml" rel="self"/><id>http://kcsrk.info</id><title type="text">OCaml feed from KC Sivaramakrishnan</title><author><email>sk826@cl.cam.ac.uk</email><name>KC Sivaramakrishnan</name></author></source><link href="http://kcsrk.info/multicore/ocaml/benchmarks/2018/09/13/1543-multicore-ci/" rel="alternate"/><content xml:base="http://kcsrk.info/atom-ocaml.xml" type="html">&lt;p&gt;Over the past few weeks, at &lt;a href=&quot;http://ocamllabs.io/&quot;&gt;OCaml Labs&lt;/a&gt;, weâve deployed
continuous benchmarking infrastructure for &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;Multicore
OCaml&lt;/a&gt;. Live results are available
at &lt;a href=&quot;http://ocamllabs.io/multicore&quot;&gt;http://ocamllabs.io/multicore&lt;/a&gt;. Continuous
benchmarking has already enabled us to make &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore/pull/221&quot;&gt;informed
decisions&lt;/a&gt; about the
impact of our changes, and should come in handy over the next few months where
we polish off and tune the multicore runtime.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Currently, the benchmarks are all single-threaded and run on x86-64. Our current
aim is to quantify the performance impact of running single-threaded OCaml
programs using the multicore compiler. Moving forward, would would include
multi-threaded benchmarks and other architectures.&lt;/p&gt;

&lt;p&gt;The benchmarks and the benchmarking infrastructure were adapted from &lt;a href=&quot;https://github.com/OCamlPro/ocamlbench-repo&quot;&gt;OCamlProâs
benchmark suite&lt;/a&gt; aimed at
benchmarking &lt;a href=&quot;https://bench.flambda.ocamlpro.com/&quot;&gt;Flambda optimisation passes&lt;/a&gt;.
The difference with the new infrastructure is that all the data is generated as
static HTML and CSV files with data processing performed on the client side in
JavaScript. I find the new setup easier to manage and deploy.&lt;/p&gt;

&lt;h2 id=&quot;quality-of-benchmarks&quot;&gt;Quality of benchmarks&lt;/h2&gt;

&lt;p&gt;If you observe the results, you will see that multicore is slowest compared to
trunk OCaml on &lt;code class=&quot;highlighter-rouge&quot;&gt;menhir-standard&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;menhir-fancy&lt;/code&gt;. But if you look closely:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kcsrk.info/assets/menhir-too-fast.png&quot; alt=&quot;Binary tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;these benchmarks complete in less than 10 milliseconds. This is not enough time
to faithfully compare the implementations as constant factors such as runtime
initialisation and costs of single untimely major GC dominate any useful work.
In fact, almost half of the benchmarks complete within a second. The quality of
this benchmark suite ought to be improved.&lt;/p&gt;

&lt;h2 id=&quot;call-for-benchmarks&quot;&gt;Call for benchmarks&lt;/h2&gt;

&lt;p&gt;While we want longer running benchmarks, we would also like those benchmarks to
represent real OCaml programs found in the wild. If you have long running &lt;em&gt;real&lt;/em&gt;
OCaml programs, please consider adding it to the benchmark suite. Your
contribution will ensure that performance-oriented OCaml features such as
multicore and flambda are evaluated on representative OCaml programs.&lt;/p&gt;

&lt;h2 id=&quot;how-to-contribute&quot;&gt;How to contribute&lt;/h2&gt;

&lt;p&gt;Make a PR to &lt;code class=&quot;highlighter-rouge&quot;&gt;multicore&lt;/code&gt; branch of
&lt;a href=&quot;https://github.com/ocamllabs/ocamlbench-repo/tree/multicore&quot;&gt;ocamllabs/ocamlbench-repo&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;packages&lt;/code&gt; directory contains many examples for how to prepare programs for
benchmarking. Among these, &lt;code class=&quot;highlighter-rouge&quot;&gt;numerical-analysis-bench&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;menhir-bench&lt;/code&gt; are
simple and illustrative.&lt;/p&gt;

&lt;p&gt;The benchmarks themselves are run using &lt;a href=&quot;https://github.com/kayceesrk/ocamlbench-scripts&quot;&gt;these
scripts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;There is a handy Dockerfile to test benchmarking setup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; multicore-cb &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#takes a while; grab a coffee&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This builds the docker image for the benchmarking infrastructure. You can run
the benchmarks as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; multicore-cb bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/ocamlbench-scripts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./run-bench.sh &lt;span class=&quot;nt&quot;&gt;--nowait&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--lazy&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#takes a while; grab lunch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can view the results by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/logs/operf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 8080&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now on your host machine, point your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt; to
interactively visualise the benchmark results.&lt;/p&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;Aim to get your benchmark compiling with OCaml 4.06.1. You might have trouble
getting your benchmark to compile with the multicore compiler due to several
reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multicore compiler has syntax extensions for &lt;a href=&quot;http://kcsrk.info/ocaml/multicore/2015/05/20/effects-multicore/&quot;&gt;algebraic effect
handlers&lt;/a&gt;
which breaks packages that use ppx.&lt;/li&gt;
  &lt;li&gt;Multicore compiler has a different &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/1003&quot;&gt;C
API&lt;/a&gt; which breaks core dependencies
such as Lwt.&lt;/li&gt;
  &lt;li&gt;Certain features such as marshalling closures and custom tag objects are
unimplemented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you encounter trouble submitting benchmarks, please make an issue on
&lt;a href=&quot;https://github.com/kayceesrk/ocamlbench-scripts&quot;&gt;kayceesrk/ocamlbench-scripts&lt;/a&gt; repo.&lt;/p&gt;
</content><id>http://kcsrk.info/multicore/ocaml/benchmarks/2018/09/13/1543-multicore-ci</id><title type="text">Continuous Benchmarking &amp; Call for Benchmarks</title><updated>2018-09-13T15:43:00-00:00</updated><author><email>sk826@cl.cam.ac.uk</email><name>KC Sivaramakrishnan</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2018-09-06T00:00:00-00:00</published><link href="https://tarides.com/blog/2018-09-06-dune-1-2-0.html" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;After a tiny but important patch release as 1.1.1, the dune team is thrilled to
announce the release of dune 1.2.0! Here are some highlights of the new
features in that version. The full list of changes can be found &lt;a href='https://github.com/ocaml/dune/blob/e3af33b43a87d7fa2d15f7b41d8bd942302742ec/CHANGES.md#120-14092018'&gt;in the dune
repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Watch-mode&quot;&gt;Watch mode&lt;/h1&gt;

&lt;p&gt;When developing, it is common to edit a file, run a build, read the error
message, and fix the error. Since this is a very tight loop and developers are
doing this hundreds or thousands times a day, it is crucial to have the
quickest feedback possible.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dune build&lt;/code&gt; and &lt;code&gt;dune runtest&lt;/code&gt; now accept &lt;a href='https://dune.readthedocs.io/en/latest/usage.html#watch-mode'&gt;a &lt;code&gt;-w&lt;/code&gt;
flag&lt;/a&gt; that will
watch the filesystem for changes, and trigger a new build. This feature is
demonstrated here:&lt;/p&gt;
&lt;script async='' id='asciicast-jL7mcBevqR4O6M69vlG6mJSAj' src='https://asciinema.org/a/jL7mcBevqR4O6M69vlG6mJSAj.js'&gt;&lt;/script&gt;

&lt;h1 id=&quot;Better-error-messages&quot;&gt;Better error messages&lt;/h1&gt;

&lt;p&gt;Inspired by the great work done in
&lt;a href='http://elm-lang.org/blog/compiler-errors-for-humans'&gt;Elm&lt;/a&gt; and
&lt;a href='https://reasonml.github.io/blog/2017/08/25/way-nicer-error-messages.html'&gt;bucklescript&lt;/a&gt;,
dune now displays the relevant file in error messages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; % cat dune
(executable
 (name my_program)
 (librarys cmdliner)
)
 % dune build
File &amp;quot;dune&amp;quot;, line 3, characters 2-10:
3 |  (librarys cmdliner)
      ^^^^^^^^
Error: Unknown field librarys
Hint: did you mean libraries?&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many messages have also been improved, in particular to help users &lt;a href='https://dune.readthedocs.io/en/latest/migration.html#check-list'&gt;switching
from the &lt;code&gt;jbuild&lt;/code&gt; format to the &lt;code&gt;dune&lt;/code&gt;
format&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;dune-unstable-fmt&quot;&gt;dune unstable-fmt&lt;/h1&gt;

&lt;p&gt;Are you confused about how to format S-expressions? You are not alone.
That is why we are gradually introducing a formatter for &lt;code&gt;dune&lt;/code&gt; files. It can
transform a valid but ugly &lt;code&gt;dune&lt;/code&gt; into one that is consistently formatted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; % cat dune
(executable( name ls) (libraries cmdliner)
(preprocess (pps ppx_deriving.std)))
 % dune unstable-fmt dune
(executable
 (name ls)
 (libraries cmdliner)
 (preprocess
  (pps ppx_deriving.std)
 )
)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature is not ready yet for the end user (hence the &lt;code&gt;unstable&lt;/code&gt; part),
and in particular the concrete syntax is not stable yet.
But having it already in the code base will make it possible to build useful
integrations with &lt;code&gt;dune&lt;/code&gt; itself (to automatically reformat all dune files in a
project, for example) and common editors, so that they format &lt;code&gt;dune&lt;/code&gt; files on
save.&lt;/p&gt;
&lt;h1 id=&quot;First-class-support-of-findlib-plugins&quot;&gt;First class support of findlib plugins&lt;/h1&gt;

&lt;p&gt;It is now easy to support findlib plugins by just adding the &lt;code&gt;findlib.dynload&lt;/code&gt;
library dependency. Then you can use &lt;code&gt;Fl_dynload&lt;/code&gt; module in your code which
will automatically do the right thing. &lt;a href='https://dune.readthedocs.io/en/latest/advanced-topics.html#dynamic-loading-of-packages'&gt;A complete example can be found in the
dune manual&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Promote-only-certain-files&quot;&gt;Promote only certain files&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;dune promote&lt;/code&gt; command now accept a list of files. This is useful to
promote just the file that is opened in a text editor for example. Some emacs
bindings are provided to do this, which works particularly well with
&lt;a href='https://dune.readthedocs.io/en/latest/tests.html#inline-expectation-tests'&gt;inline expectation tests&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Deprecation-message-for-wrapped-modes&quot;&gt;Deprecation message for (wrapped) modes&lt;/h1&gt;

&lt;p&gt;By default, libraries are &lt;code&gt;(wrapped true)&lt;/code&gt;, which means that they expose a
single OCaml module (source files are exposed as submodules of this main
module). This is usually desired as it makes link-time name collisions less
likely. However, a lot of libraries are using &lt;code&gt;(wrapped false)&lt;/code&gt; (expose all
source files as modules) to keep compatibility.&lt;/p&gt;
&lt;p&gt;It can be challenging to transition from &lt;code&gt;(wrapped false)&lt;/code&gt; to &lt;code&gt;(wrapped true)&lt;/code&gt;
because it breaks compatibility. That is why we have added &lt;code&gt;(wrapped
(transition &amp;quot;message&amp;quot;))&lt;/code&gt; which will generate wrapped modules but keep unwrapped
modules with a deprecation message to help coordinate the change.&lt;/p&gt;
&lt;h1 id=&quot;Credits&quot;&gt;Credits&lt;/h1&gt;

&lt;p&gt;Special thanks to our contributors for this release: @aantron, @anuragsoni,
@bobot, @ddickstein, @dra27, @drjdn, @hongchangwu, @khady, @kodek16,
@prometheansacrifice and @ryyppy.&lt;/p&gt;
</content><id>https://tarides.com/blog/2018-09-06-dune-1-2-0.html</id><title type="text">Dune 1.2.0</title><updated>2018-09-06T00:00:00-00:00</updated><author><name>Etienne M.</name></author></entry><entry><source><updated>2018-08-25T09:31:17-00:00</updated><link title="Mathematics and Computation" type="text/html" href="http://math.andrej.com" rel="related"/><link title="Mathematics and Computation" type="application/rss+xml" href="http://math.andrej.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.8-alpha-40048</generator><id>http://math.andrej.com</id><title type="text">Mathematics and Computation</title><author><name>Andrej Bauer</name></author></source><link href="http://math.andrej.com/2018/08/25/how-to-implement-type-theory-in-an-hour/" rel="alternate"/><link href="http://math.andrej.com/2018/08/25/how-to-implement-type-theory-in-an-hour/#comments" rel="related"/><content xml:base="http://math.andrej.com/feed/" type="html">&lt;p&gt;I was purging the disk on my laptop of large files and found a video lecture which I forgot to publish. Here it is with some delay. I lectured on how to implement type theory at the &lt;a href=&quot;https://unimath.github.io/bham2017/&quot;&gt;School and Workshop on Univalent Mathematics&lt;/a&gt;Â in December 2017, at the University of Birmingham (UK).&lt;/p&gt;
&lt;p&gt;You may &lt;a href=&quot;https://vimeo.com/286652934&quot;&gt;watch the video&lt;/a&gt; and visit the accompanying GitHub repository &lt;a href=&quot;https://github.com/andrejbauer/spartan-type-theory&quot;&gt;spartan-type-theory&lt;/a&gt;.&lt;/p&gt;
</content><category term="Tutorial"/><id>http://math.andrej.com/?p=2013</id><title type="text">How to implement type theory in an hour</title><updated>2018-08-25T09:31:17-00:00</updated><author><name>Andrej Bauer</name></author></entry><entry><source><updated>2018-08-21T00:00:00-00:00</updated><link title="Drup's thingies" type="text/html" href="https://drup.github.io/" rel="related"/><link title="Drup's thingies" type="application/rss+xml" href="http://drup.github.io/feed-ocaml.xml" rel="self"/><id>https://drup.github.io/</id><title type="text">Drup's thingies</title><author><name>Gabriel Radanne</name></author></source><link href="https://drup.github.io/2018/08/21/ppx-tyre/" rel="alternate"/><content xml:base="http://drup.github.io/feed-ocaml.xml" type="html">
        
        
        
        &lt;p&gt;Some times ago, I released &lt;a href=&quot;/2016/08/12/tyre/&quot;&gt;Tyre&lt;/a&gt;, 
a library for Typed Regular Expressions
that allows matching, printing and routing. While many people expressed interest,
the syntax was (rightfully) considered too obtuse for practical usage.
Thanks to Petter A. â&lt;a href=&quot;https://github.com/paurkedal&quot;&gt;paurkedal&lt;/a&gt;â Urkedal, this should now be fixed!&lt;/p&gt;


        
        </content><id>https://drup.github.io/2018/08/21/ppx-tyre/</id><title type="text">Ann: A new ppx for tyre and new version of ppx_regexp | Drup's thingies</title><updated>2018-08-21T00:00:00-00:00</updated><author><name>Gabriel Radanne</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="Jane Street Tech Blog" type="text/html" href="https://blog.janestreet.com" rel="related"/><link title="Jane Street Tech Blog" type="application/rss+xml" href="https://blog.janestreet.com/feed.xml" rel="self"/><id>https://blog.janestreet.com</id><title type="text">Jane Street Tech Blog</title><author><name>Jane Street</name></author></source><link href="https://blog.janestreet.com/what-the-interns-have-wrought-2018/" rel="alternate"/><content xml:base="https://blog.janestreet.com/feed.xml" type="html">&lt;p&gt;Yet again, intern season is coming to a close, and so itâs time to
look back at what the interns have achieved in their short time with
us.  Iâm always impressed by what our interns manage to squeeze into
the summer, and this year is no different.&lt;/p&gt;

</content><id>https://blog.janestreet.com/what-the-interns-have-wrought-2018/</id><title type="text">What the interns have wrought, 2018 edition</title><updated>2018-08-06T00:00:00-00:00</updated><author><name>Jane Street</name></author></entry><entry><source><updated>2018-12-12T00:00:00-00:00</updated><link href="https://opam.ocaml.org/blog/feed.xml" rel="self"/><contributor><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>{ Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:David.Allsopp(%C3%A0)cl.cam.ac.uk</uri><name>{ David Allsopp }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://anil.recoil.org</uri><name>{ Anil Madhavapeddy, Louis Gesbert }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert, Hannes Mehnert }</name></contributor><contributor><uri>https://opam.ocaml.org</uri><name>{ OCaml Platform Team }</name></contributor><contributor><uri>http://dave.recoil.org/</uri><name>{ Dave Scott }</name></contributor><contributor><uri>http://gazagnaire.org</uri><name>{ Thomas Gazagnaire }</name></contributor><contributor><uri>https://github.com/def-lkb</uri><name>{ Frederic Bour, Thomas Refis }</name></contributor><contributor><uri>http://roscidus.com/blog/</uri><name>{ Thomas Leonard }</name></contributor><contributor><uri>https://github.com/diml</uri><name>{ JÃ©rÃ©mie Dimino }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Thomas Gazagnaire }</name></contributor><id>https://opam.ocaml.org/blog/</id><title type="text">The OCaml Platform Blog</title><author><name>OCaml Platform</name></author><author><uri>https://opam.ocaml.org/</uri><name>The OCaml Platform Team</name></author></source><link type="text/html" href="https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/" rel="alternate"/><link href="https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/" rel="self"/><content xml:base="http://opam.ocaml.org/blog/feed.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">

<p>A few days ago, we released <a href="https://opam.ocaml.org/blog/opam-2-0-0-rc4/">opam 2.0.0~rc4</a>, and explained that this final release candidate was expected be promoted to 2.0.0, in sync with an upgrade to the <a href="https://github.com/ocaml/opam-repository">opam package repository</a>. So here are the details about this!</p>
<h2 id="If-you-are-an-opam-user-and-don-39-t-maintain-opam-packages">If you are an opam user, and don't maintain opam packages</h2>

<ul><li><p>You are encouraged to <a href="https://opam.ocaml.org/blog/opam-2-0-0-rc4/">upgrade</a>) as soon as comfortable, and get used to the <a href="http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html">changes and new features</a></p>
</li><li><p>All packages installing in opam 1.2.2 should exist and install fine on 2.0.0~rc4 (if you find one that doesn't, <a href="https://github.com/ocaml/opam/issues">please report</a>!)</p>
</li><li><p>If you haven't updated by <strong>September 17th</strong>, the amount of updates and new packages you receive may become limited<a href="#foot-1">Â¹</a>.</p>
</li></ul>

<h2 id="So-what-will-happen-on-September-17th">So what will happen on September 17th ?</h2>

<ul><li><p>Opam 2.0.0~rc4 gets officially released as 2.0.0</p>
</li><li><p>On the <code>ocaml/opam-repository</code> Github repository, a 1.2 branch is forked, and the 2.0.0 branch is merged into the master branch</p>
</li><li><p>From then on, pull-requests to <code>ocaml/opam-repository</code> need to be in 2.0.0 format. Fixes to the 1.2 repository can be merged if important: pulls need to be requested against the 1.2 branch in that case.</p>
</li><li><p>The opam website shows the 2.0.0 repository by default (https://opam.ocaml.org/2.0-preview/ becomes https://opam.ocaml.org/)</p>
</li><li><p>The http repositories for 1.2 and 2.0 (as used by <code>opam update</code>) are accordingly moved, with proper redirections put in place</p>
</li></ul>

<h2 id="Advice-for-package-maintainers">Advice for package maintainers</h2>

<ul><li><p>Until September 17th, pull-requests filed to the master branch of <code>ocaml/opam-repository</code> need to be in 1.2.2 format</p>
</li><li><p>The CI checks for all PRs ensure that the package passes on both 1.2.2 and 2.0.0. After the 17th of september, only 2.0.0 will be checked (and 1.2.2 only if relevant fixes are required).</p>
</li><li><p>The 2.0.0 branch of the repository will contain the automatically updated 2.0.0 version of your package definitions</p>
</li><li><p>You can publish 1.2 packages while using opam 2.0.0 by installing <code>opam-publish.0.3.5</code> (running <code>opam pin opam-publish 0.3.5</code> is recommended)</p>
</li><li><p>You should only need to keep an opam 1.2 installation for more complex setups (multiple packages, or if you need to be able to test the 1.2 package installations locally). In this case you might want to use an alias, <em>e.g.</em> <code>alias opam.1.2=&quot;OPAMROOT=$HOME/.opam.1.2 ~/local/bin/opam.1.2</code>. You should also probably disable opam 2.0.0's automatic environment update in that case (<code>opam init --disable-shell-hook</code>)</p>
</li><li><p><code>opam-publish.2.0.0~beta</code> has a fully revamped interface, and many new features, like filing a single PR for multiple packages. It files pull-request <strong>in 2.0 format only</strong>, however. At the moment, it will file PR only to the 2.0.0 branch of the repository, but pushing 1.2 format packages to master is still preferred until September 17th.</p>
</li><li><p>It is also advised to keep in-source opam files in 1.2 format until that date, so as not to break uses of <code>opam pin add --dev-repo</code> by opam 1.2 users. The small <code>opam-package-upgrade</code> plugin can be used to upgrade single 1.2 <code>opam</code> files to 2.0 format.</p>
</li><li><p><a href="https://github.com/ocaml/ocaml-ci-scripts"><code>ocaml-ci-script</code></a> already switched to opam 2.0.0. To keep testing opam 1.2.2, you can set the variable <code>OPAM_VERSION=1.2.2</code> in the <code>.travis.yml</code> file.</p>
</li></ul>

<h2 id="Advice-for-custom-repository-maintainers">Advice for custom repository maintainers</h2>

<ul><li><p>The <code>opam admin upgrade</code> command can be used to upgrade your repository to 2.0.0 format. We recommand using it, as otherwise clients using opam 2.0.0 will do the upgrade locally every time. Add the option <code>--mirror</code> to continue serving both versions, with automatic redirects.</p>
</li><li><p>It's your place to decide when/if you want to switch your base repository to 2.0.0 format. You'll benefit from many new possibilities and safety features, but that will exclude users of earlier opam versions, as there is no backwards conversion tool.</p>
</li></ul>

<p><a id="foot-1">Â¹</a> Sorry for the inconvenience. We'd be happy if we could keep maintaining the 1.2.2 repository for more time; repository maintainers are doing an awesome job, but just don't have the resources to maintain both versions in parallel.</p>
</div></content><id>https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap/</id><title type="text">Last stretch! Repository upgrade and opam 2.0.0 roadmap</title><updated>2018-08-02T00:00:00-00:00</updated><author><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro</name></author></entry><entry><source><updated>2018-07-29T12:23:30-00:00</updated><logo>https://gaiustech.files.wordpress.com/2018/07/cropped-lynx.jpg?w=32</logo><link title="Ocaml â So I decided to take my work back underground" type="text/html" href="https://gaiustech.wordpress.com" rel="related"/><link title="Ocaml â So I decided to take my work back underground" type="application/rss+xml" href="http://gaiustech.wordpress.com/category/ocaml/feed/" rel="self"/><generator>http://wordpress.com/</generator><id>https://gaiustech.wordpress.com</id><title type="text">Ocaml â So I decided to take my work back underground</title><author><name>Gaius Hammond</name></author></source><link href="https://gaiustech.wordpress.com/2018/07/29/not-learning-is-a-skill-too/" rel="alternate"/><link href="https://gaiustech.wordpress.com/2018/07/29/not-learning-is-a-skill-too/#comments" rel="related"/><content xml:base="http://gaiustech.wordpress.com/category/ocaml/feed/" type="html">&lt;p&gt;To be successful in tech, it&amp;#8217;s well known that you must keep your skills up to date. The onus is on each individual to do this, no-one will do it for you, and companies that provide ongoing personal development are few and far between. Many companies would rather &lt;a href=&quot;https://www.theregister.co.uk/2018/02/06/ibm_retracts_agreed_voluntary_redundancies/&quot;&gt;&amp;#8220;remix our skills&amp;#8221;&lt;/a&gt;, which means laying off workers with one skill (on statutory minimum terms) and hiring people with the new skill. Which is short-termist in the extreme; the new workers are no better than the old, they just happened to enter the workforce later, and the churn means there is no accumulation of institutional knowledge. If you were one of the newer workers, why would you voluntarily step onto this treadmill and if you were a client, why would you hire such a firm when it provides no value-add over just hiring the staff you need yourself? Anyway, I digress.&lt;/p&gt;
&lt;p&gt;It is clear that C++11 was a enormous improvement over C++98. The list of &lt;a href=&quot;https://smartbear.com/blog/develop/the-biggest-changes-in-c11-and-why-you-should-care/&quot;&gt;new features&lt;/a&gt; is vast and all-encompassing, yet at the same time, backwards compatibility is preserved. You can have all the benefits of the new while preserving investment in the old (&amp;#8220;legacy&amp;#8221;). Upgrading your skills to C++11 was a very obvious thing to do, and because of the smooth transition, you could make quick wins as you brought yourself up to speed. That is just one example of the sort of thing I am talking about. You still need to put the effort in to learn it and seek out opportunities to use it, but the path from the old to the new is straightforward and there are early and frequent rewards along the way, and from there to C++14, 17, 20&amp;#8230;&lt;/p&gt;
&lt;p&gt;But I look around the current technology landscape and I see things that are only incremental improvements on existing programming languages or technologies and yet require a clean break with the past, which in practice means not only learning the new thing, but also rebuilding the ecosystem and tooling around it, porting/re-writing all the code, encountering all new bugs and edge cases, rediscovering the design patterns or new idioms in the language. The extent to which the new technology is &amp;#8220;better&amp;#8221; is dwarfed by the effort taken to use it, so where is the improved productivity coming from? Every project consists of either learning the language as you go, or maintaining and extending something written by someone who was learning the language as they went, perhaps gambling on getting in on the ground floor of the next big thing. But things only get big if people stick with them is the paradox!&lt;/p&gt;
&lt;p&gt;So I am pretty comfortable with my decision to mostly ignore lots of new things, including but not limited to Go, Rust, Julia, &lt;a href=&quot;https://blogs.msdn.microsoft.com/devops/2018/07/18/protecting-our-users-from-the-npm-eslint-package-breach/&quot;&gt;Node.js&lt;/a&gt;, Perl6 in favour of deepening my skills in C++, R, Python and pushing into new problem domains (e.g. &lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/&quot;&gt;ML/AI&lt;/a&gt;) with my tried and trusted tools. When something comes along that is a big enough leap forward over any of them, of course I&amp;#8217;ll jump &amp;#8211; just like I did when I learnt Java in 1995 and was getting paid for it the same year! I had a lot of fun with OCaml and Haskell too, but neither gained significant traction in the end, also &lt;a href=&quot;https://gaiustech.wordpress.com/2011/06/15/scala-quickstart-for-oracle-dbas/&quot;&gt;Scala&lt;/a&gt;. I don&amp;#8217;t see anything on the horizon, all the cutting edge stuff is appearing as &lt;a href=&quot;https://devblogs.nvidia.com/seven-things-numba/&quot;&gt;libraries&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B20&quot;&gt;features&lt;/a&gt; for my &amp;#8220;big 3&amp;#8221; while the newer ecosystems are scrambling to backfill their capabilities and will probably never match the breadth and depth, before falling out of fashion and fading away. I&amp;#8217;ll be interested in any comments arguing why I&amp;#8217;m wrong to discount them, or any pointers to things that &lt;i&gt;are&lt;/i&gt; sufficiently advanced to be worth taking a closer look at.&lt;/p&gt;
</content><category term="R"/><id>http://gaiustech.wordpress.com/?p=2540</id><title type="text">Not-learning is a skill too</title><updated>2018-07-29T12:23:30-00:00</updated><author><name>Gaius Hammond</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/07/26/opam-2-0-0-rc4-final-is-out/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/07/26/opam-2-0-0-rc4-final-is-out/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p&gt;We are happy to announce the &lt;a href='https://github.com/ocaml/opam/releases/tag/2.0.0-rc4'&gt;opam 2.0.0 final release candidate&lt;/a&gt;! &lt;img src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f37e.png&quot; alt=&quot;ð¾&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This release features a few bugfixes over &lt;a href='../opam-2-0-0-rc3'&gt;Release Candidate 3&lt;/a&gt;. &lt;strong&gt;It will be promoted to 2.0.0 proper within a few weeks, when the &lt;a href='https://github.com/ocaml/opam-repository'&gt;official repository&lt;/a&gt; format switches from 1.2.0 to 2.0.0.&lt;/strong&gt; After that date, updates to the 1.2.0 repository may become limited, as new features are getting used in packages.&lt;/p&gt;
&lt;p&gt;It is safe to update as soon as you see fit, since opam 2.0.0 supports the older formats. See the &lt;a href='http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html'&gt;Upgrade Guide&lt;/a&gt; for details about the new features and changes. If you are a package maintainer, you should keep publishing as before for now: the roadmap for the repository upgrade will be detailed shortly.&lt;/p&gt;
&lt;p&gt;The opam.ocaml.org pages have also been refreshed a bit, and the new version showing the 2.0.0 branch of the repository is already online at &lt;a href='http://opam.ocaml.org/2.0-preview/'&gt;http://opam.ocaml.org/2.0-preview/&lt;/a&gt; (report any issues &lt;a href='https://github.com/ocaml/opam2web/issues'&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;hr/&gt;Installation instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;From binaries: run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sh &amp;lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or download manually from &lt;a href='https://github.com/ocaml/opam/releases/tag/2.0.0-rc4'&gt;the Github &amp;quot;Releases&amp;quot; page&lt;/a&gt; to your PATH. In this case, don&amp;#39;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From source, using opam:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opam update; opam install opam-devel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(then copy the opam binary to your PATH as explained, and don&amp;#39;t forget to run &lt;code&gt;opam init --reinit -ni&lt;/code&gt; to enable sandboxing if you had version 2.0.0~rc manually installed)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From source, manually: see the instructions in the &lt;a href='https://github.com/ocaml/opam/tree/2.0.0-rc4#compiling-this-repo'&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope you enjoy this new version, and remain open to &lt;a href='https://github.com/ocaml/opam/issues'&gt;bug reports&lt;/a&gt; and &lt;a href='https://github.com/ocaml/opam/issues'&gt;suggestions&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: this article is cross-posted on &lt;a href='https://opam.ocaml.org/blog/'&gt;opam.ocaml.org&lt;/a&gt; and &lt;a href='http://www.ocamlpro.com/category/blog/'&gt;ocamlpro.com&lt;/a&gt;. Please head to the latter for the comments!&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1103</id><title type="text">opam 2.0.0 RC4-final is out!</title><updated>2018-07-26T14:05:25-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2018-12-12T00:00:00-00:00</updated><link href="https://opam.ocaml.org/blog/feed.xml" rel="self"/><contributor><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>{ Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert - OCamlPro }</name></contributor><contributor><uri>mailto:David.Allsopp(%C3%A0)cl.cam.ac.uk</uri><name>{ David Allsopp }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://anil.recoil.org</uri><name>{ Anil Madhavapeddy, Louis Gesbert }</name></contributor><contributor><uri>mailto:louis.gesbert(%C3%A0)ocamlpro.com</uri><name>{ Louis Gesbert, Hannes Mehnert }</name></contributor><contributor><uri>https://opam.ocaml.org</uri><name>{ OCaml Platform Team }</name></contributor><contributor><uri>http://dave.recoil.org/</uri><name>{ Dave Scott }</name></contributor><contributor><uri>http://gazagnaire.org</uri><name>{ Thomas Gazagnaire }</name></contributor><contributor><uri>https://github.com/def-lkb</uri><name>{ Frederic Bour, Thomas Refis }</name></contributor><contributor><uri>http://roscidus.com/blog/</uri><name>{ Thomas Leonard }</name></contributor><contributor><uri>https://github.com/diml</uri><name>{ JÃ©rÃ©mie Dimino }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Louis Gesbert }</name></contributor><contributor><uri>http://ocamlpro.com</uri><name>{ Thomas Gazagnaire }</name></contributor><id>https://opam.ocaml.org/blog/</id><title type="text">The OCaml Platform Blog</title><author><name>OCaml Platform</name></author><author><uri>https://opam.ocaml.org/</uri><name>The OCaml Platform Team</name></author></source><link type="text/html" href="https://opam.ocaml.org/blog/opam-2-0-0-rc4/" rel="alternate"/><link href="https://opam.ocaml.org/blog/opam-2-0-0-rc4/" rel="self"/><content xml:base="http://opam.ocaml.org/blog/feed.xml" type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">

<p>We are happy to announce the <a href="https://github.com/ocaml/opam/releases/tag/2.0.0-rc4">opam 2.0.0 final release candidate</a>! ð¾</p>
<p>This release features a few bugfixes over <a href="../opam-2-0-0-rc3">Release Candidate 3</a>. <strong>It will be promoted to 2.0.0 proper within a few weeks, when the <a href="https://github.com/ocaml/opam-repository">official repository</a> format switches from 1.2.0 to 2.0.0.</strong> After that date, updates to the 1.2.0 repository may become limited, as new features are getting used in packages.</p>
<p>It is safe to update as soon as you see fit, since opam 2.0.0 supports the older formats. See the <a href="http://opam.ocaml.org/2.0-preview/doc/Upgrade_guide.html">Upgrade Guide</a> for details about the new features and changes. If you are a package maintainer, you should keep publishing as before for now: the <a href="https://opam.ocaml.org/blog/opam-2-0-0-repo-upgrade-roadmap">roadmap</a> for the repository upgrade will be detailed shortly.</p>
<p>The opam.ocaml.org pages have also been refreshed a bit, and the new version showing the 2.0.0 branch of the repository is already online at <a href="http://opam.ocaml.org/2.0-preview/">http://opam.ocaml.org/2.0-preview/</a> (report any issues <a href="https://github.com/ocaml/opam2web/issues">here</a>).</p>
<p><hr/>Installation instructions:</p>
<ol><li><p>From binaries: run</p>
<pre><code>sh &lt;(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)</code></pre>

<p>or download manually from <a href="https://github.com/ocaml/opam/releases/tag/2.0.0-rc4">the Github &quot;Releases&quot; page</a> to your PATH. In this case, don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed.</p>
</li><li><p>From source, using opam:</p>
<pre><code>opam update; opam install opam-devel</code></pre>

<p>(then copy the opam binary to your PATH as explained, and don't forget to run <code>opam init --reinit -ni</code> to enable sandboxing if you had version 2.0.0~rc manually installed)</p>
</li><li><p>From source, manually: see the instructions in the <a href="https://github.com/ocaml/opam/tree/2.0.0-rc4#compiling-this-repo">README</a>.</p>
</li></ol>

<p>We hope you enjoy this new version, and remain open to <a href="https://github.com/ocaml/opam/issues">bug reports</a> and <a href="https://github.com/ocaml/opam/issues">suggestions</a>.</p>
<blockquote><p>NOTE: this article is cross-posted on <a href="https://opam.ocaml.org/blog/">opam.ocaml.org</a> and <a href="http://www.ocamlpro.com/category/blog/">ocamlpro.com</a>. Please head to the latter for the comments!</p>
</blockquote></div></content><id>https://opam.ocaml.org/blog/opam-2-0-0-rc4/</id><title type="text">opam 2.0.0 RC4-final is out!</title><updated>2018-07-26T00:00:00-00:00</updated><author><uri>mailto:raja.boujbel(%C3%A0)ocamlpro.com</uri><name>Raja Boujbel - OCamlPro, Louis Gesbert - OCamlPro</name></author></entry><entry><source><updated>2018-11-29T12:00:00-00:00</updated><link title="Frama-C RSS News" type="text/html" href="http://frama-c.com/" rel="related"/><link title="Frama-C RSS News" type="application/rss+xml" href="http://frama-c.com/rss.xml" rel="self"/><id>http://frama-c.com/</id><title type="text">Frama-C RSS News</title><author><name>Frama-C</name></author></source><link href="http://frama-c.com/index.html" rel="alternate"/><id>http://frama-c.com/index.html#5ebffaf422d72634057e5b0deaba301f</id><title type="text">frama-clang 0.0.6, compatible with Frama-C 17 Chlorine
   is out. Download ithere.</title><updated>2018-07-23T06:49:17-00:00</updated><author><name>Frama-C</name></author></entry><entry><source><updated>2018-08-25T09:31:17-00:00</updated><link title="Mathematics and Computation" type="text/html" href="http://math.andrej.com" rel="related"/><link title="Mathematics and Computation" type="application/rss+xml" href="http://math.andrej.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.8-alpha-40048</generator><id>http://math.andrej.com</id><title type="text">Mathematics and Computation</title><author><name>Andrej Bauer</name></author></source><link href="http://math.andrej.com/2018/07/22/algebraic-effects-and-handlers-at-oplss-2018/" rel="alternate"/><link href="http://math.andrej.com/2018/07/22/algebraic-effects-and-handlers-at-oplss-2018/#comments" rel="related"/><content xml:base="http://math.andrej.com/feed/" type="html">&lt;p&gt;I have had the honor to lecture at the &lt;a href=&quot;https://www.cs.uoregon.edu/research/summerschool/summer18/index.php&quot;&gt;Oregon Programming Language Summer School 2018&lt;/a&gt;Â on the topic of algebraic effects and handlers.Â The notes, materials and the lectures are available online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the GitHub repository with the &lt;a href=&quot;https://github.com/OPLSS/introduction-to-algebraic-effects-and-handlers&quot;&gt;course material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://www.cs.uoregon.edu/research/summerschool/summer18/topics.php&quot;&gt;OPLSS lecture materials&lt;/a&gt;, including notes and video recordings of the lectures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I gave four lectures which started with the mathematics of algebraic theories, explained how they can be used to model computational effects, how we make a programming language out of them, and how to program with handlers.&lt;/p&gt;
</content><category term="Videos"/><id>http://math.andrej.com/?p=2010</id><title type="text">Algebraic effects and handlers at OPLSS 2018</title><updated>2018-07-22T01:39:42-00:00</updated><author><name>Andrej Bauer</name></author></entry><entry><source><updated>2019-01-15T17:01:24-00:00</updated><logo>http://www.ocamlpro.com/wp-content/uploads/2018/02/apple-touch-icon-152x152-150x150.png</logo><link title="OCamlPro" type="text/html" href="http://www.ocamlpro.com" rel="related"/><link title="OCamlPro" type="application/rss+xml" href="http://www.ocamlpro.com/feed/" rel="self"/><generator>https://wordpress.org/?v=4.9.9</generator><id>http://www.ocamlpro.com</id><title type="text">OCamlPro</title><author><name>OCamlPro</name></author></source><link href="http://www.ocamlpro.com/2018/07/20/new-updates-on-tzscan-2/" rel="alternate"/><link href="http://www.ocamlpro.com/2018/07/20/new-updates-on-tzscan-2/#respond" rel="related"/><content xml:base="http://www.ocamlpro.com/feed/" type="html">&lt;p class=&quot;s570a4-10 iEJDri&quot;&gt;&lt;span class=&quot;s570a4-27 dkcuFY&quot;&gt;OCamlPro is pleased to announce the latest update of TZScan (&lt;a href=&quot;http://tzscan.io&quot;&gt;http://tzscan.io&lt;/a&gt;), its Tezos block explorer to ease the use of the Tezos network. TzScan is now ready for the protocol update scheduled for tomorrow. In addition to some minor bugfixes, the main novelties are: &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Displaying of obtained and &lt;a href=&quot;http://tzscan.io/tz3UoffC7FG7zfpmvmjUmUeAaHvzdcUvAj6r?default=rewards&quot;&gt;expected rewards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding of &lt;a href=&quot;http://tzscan.io/tz3UoffC7FG7zfpmvmjUmUeAaHvzdcUvAj6r&quot;&gt;internal transactions&lt;/a&gt; of smart contracts&lt;/li&gt;
&lt;li&gt;Adding of &lt;a href=&quot;http://tzscan.io/delegation-services&quot;&gt;delegation services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aliasing of known account and sponsors&lt;/li&gt;
&lt;li&gt;Improvements of UX, and faster navigation&lt;/li&gt;
&lt;li&gt;Improvements on desktop, tablets and mobiles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We continue to maintain the alphanet and zeronet branches in parallel of the betanet.&lt;br /&gt;
We keep on working hard to improve and add new features to TzScan. Further enhancements and optimizations are to come. Enjoy and play with our explorer!&lt;br /&gt;
If you have any suggestions or bugs to report, please notify us at &lt;a href=&quot;mailto:contact@tzscan.io&quot;&gt;contact@tzscan.io &lt;/a&gt;&lt;/p&gt;
</content><category term="Blog"/><id>http://www.ocamlpro.com/?p=1092</id><title type="text">OCamlProâs Tezos block explorer TzScanâs last updates</title><updated>2018-07-20T16:54:07-00:00</updated><author><name>OCamlPro</name></author></entry><entry><source><updated>2019-01-03T00:00:00-00:00</updated><link href="https://tarides.com/feed.xml" rel="self"/><id>https://tarides.com/</id><title type="text">Tarides</title><author><name>Tarides</name></author><author><name>Thomas G.</name></author><author><name>Zach S.</name></author><author><name>Etienne M.</name></author><author><name>Romain C.</name></author><author><name>Guillaume P.</name></author></source><published>2018-07-17T00:00:00-00:00</published><link href="https://tarides.com/blog.html#2018-07-17-station-f" rel="alternate"/><content xml:base="https://tarides.com/feed.xml" type="html">&lt;p&gt;We are thrilled to have been accepted into the Founders Progam&amp;#39;s 3rd
batch at &lt;a href='https://stationf.co/'&gt;Station F&lt;/a&gt;! Station F is
&amp;quot;the only startup campus gathering a whole entrepreneurial ecosystem
under one roof&amp;quot; and is providing 3000+ desks and 26 international
startup programs. Our Paris offices are now located in that incredible
place, close to &amp;quot;mÃ©tro Chevaleret&amp;quot; (Paris 13).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are in Paris, drop us an email to visit
&lt;a href=' https://stationf.co/campus/'&gt;our beautiful campus&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;
</content><id>https://tarides.com/blog.html#2018-07-17-station-f</id><title type="text">Station F</title><updated>2018-07-17T00:00:00-00:00</updated><author><name>Thomas G.</name></author></entry><entry><source><updated>2018-07-10T00:00:00-00:00</updated><logo>http://caml.inria.fr//pub/logos/caml-inria-fr.128x58.gif</logo><link title="The Caml Language" type="text/html" href="http://caml.inria.fr/" rel="related"/><link title="The Caml Language" type="application/rss+xml" href="http://caml.inria.fr/news.en.rss" rel="self"/><id>http://caml.inria.fr/</id><title type="text">The Caml Language</title><author><name>Caml INRIA</name></author></source><link href="http://caml.inria.fr/pub/distrib/ocaml-4.07/" rel="alternate"/><id>http://caml.inria.fr/pub/distrib/ocaml-4.07/#eac2175590735c5e6b52fb07633c3b18</id><title type="text">OCaml 4.07.0 released</title><updated>2018-07-10T00:00:00-00:00</updated><author><name>Caml INRIA</name></author></entry><entry><source><updated>2019-01-18T00:00:00-00:00</updated><link title="The Coq Proof Assistant" type="text/html" href="https://coq.inria.fr" rel="related"/><link title="The Coq Proof Assistant" type="application/rss+xml" href="http://coq.inria.fr/news/feed" rel="self"/><id>https://coq.inria.fr</id><title type="text">The Coq Proof Assistant</title><author><name>Coq</name></author></source><link href="https://coq.inria.fr/news/146.html" rel="alternate"/><content xml:base="http://coq.inria.fr/news/feed" type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/coq/coq/releases/tag/V8.8.1&quot;&gt;8.8.1 release of Coq&lt;/a&gt; is available.&lt;/p&gt;

&lt;p&gt;It includes four critical bug fixes, many other bug fixes, documentation improvements
and user message improvements.&lt;/p&gt;

&lt;p&gt;For details, see &lt;a href=&quot;https://github.com/coq/coq/blob/V8.8.1/CHANGES&quot;&gt;CHANGES&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/coq/coq/milestone/13?closed=1&quot;&gt;8.8.1 milestone&lt;/a&gt;.
Feedback and &lt;a href=&quot;https://github.com/coq/coq/issues&quot;&gt;bug reports&lt;/a&gt; are extremely welcome.&lt;/p&gt;


 </content><id>https://coq.inria.fr/news/146.html</id><title type="text">Coq 8.8.1 is out</title><updated>2018-07-09T00:00:00-00:00</updated><author><name>Coq</name></author></entry><entry><source><updated>2018-09-26T00:00:00-00:00</updated><link title="Jane Street Tech Blog" type="text/html" href="https://blog.janestreet.com" rel="related"/><link title="Jane Street Tech Blog" type="application/rss+xml" href="https://blog.janestreet.com/feed.xml" rel="self"/><id>https://blog.janestreet.com</id><title type="text">Jane Street Tech Blog</title><author><name>Jane Street</name></author></source><link href="https://blog.janestreet.com/plans-for-ocaml-408/" rel="alternate"/><content xml:base="https://blog.janestreet.com/feed.xml" type="html">&lt;p&gt;With the external release of OCaml 4.07.0 imminent, we in Jane Streetâs
Tools &amp;amp; Compilers group have been planning what we want to work on for
inclusion in OCaml 4.08. These days OCaml uses (or at least attempts) a
time-based release process with releases scheduled every 6 months. Weâre
trying to avoid rushing in changes at the last minute â as weâve been
prone to do in the past â so this list is restricted to things we could
conceivably finish in the next 4-5 months.&lt;/p&gt;

</content><id>https://blog.janestreet.com/plans-for-ocaml-408/</id><title type="text">Plans for OCaml 4.08</title><updated>2018-06-29T00:00:00-00:00</updated><author><name>Jane Street</name></author></entry></feed>