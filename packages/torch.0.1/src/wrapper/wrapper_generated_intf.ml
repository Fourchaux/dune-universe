(* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT BY HAND! *)

module type S = sig
  type t
  type scalar

  val abs :
    t ->
    t

  val abs_ :
    t ->
    t

  val abs_out :
    t ->
    t ->
    t

  val acos :
    t ->
    t

  val acos_ :
    t ->
    t

  val acos_out :
    t ->
    t ->
    t

  val adaptive_avg_pool1d :
    t ->
    output_size:int list ->
    t

  val adaptive_avg_pool2d :
    t ->
    output_size:int list ->
    t

  val adaptive_avg_pool2d_backward :
    grad_output:t ->
    t ->
    t

  val adaptive_avg_pool2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    t

  val adaptive_avg_pool2d_out :
    output:t ->
    t ->
    output_size:int list ->
    t

  val adaptive_avg_pool3d :
    t ->
    output_size:int list ->
    t

  val adaptive_avg_pool3d_backward :
    grad_output:t ->
    t ->
    t

  val adaptive_avg_pool3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    t

  val adaptive_avg_pool3d_out :
    output:t ->
    t ->
    output_size:int list ->
    t

  val adaptive_max_pool1d :
    t ->
    output_size:int list ->
    t * t

  val adaptive_max_pool2d :
    t ->
    output_size:int list ->
    t * t

  val adaptive_max_pool2d_backward :
    grad_output:t ->
    t ->
    indices:t ->
    t

  val adaptive_max_pool2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    indices:t ->
    t

  val adaptive_max_pool2d_out :
    output:t ->
    indices:t ->
    t ->
    output_size:int list ->
    t * t

  val adaptive_max_pool3d :
    t ->
    output_size:int list ->
    t * t

  val adaptive_max_pool3d_backward :
    grad_output:t ->
    t ->
    indices:t ->
    t

  val adaptive_max_pool3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    indices:t ->
    t

  val adaptive_max_pool3d_out :
    output:t ->
    indices:t ->
    t ->
    output_size:int list ->
    t * t

  val add :
    t ->
    t ->
    t

  val add1 :
    t ->
    scalar ->
    t

  val add_ :
    t ->
    t ->
    t

  val add_1 :
    t ->
    scalar ->
    t

  val add_out :
    t ->
    t ->
    t ->
    t

  val addbmm :
    t ->
    batch1:t ->
    batch2:t ->
    t

  val addbmm_ :
    t ->
    batch1:t ->
    batch2:t ->
    t

  val addbmm_out :
    t ->
    t ->
    batch1:t ->
    batch2:t ->
    t

  val addcdiv :
    t ->
    tensor1:t ->
    tensor2:t ->
    t

  val addcdiv_ :
    t ->
    tensor1:t ->
    tensor2:t ->
    t

  val addcdiv_out :
    t ->
    t ->
    tensor1:t ->
    tensor2:t ->
    t

  val addcmul :
    t ->
    tensor1:t ->
    tensor2:t ->
    t

  val addcmul_ :
    t ->
    tensor1:t ->
    tensor2:t ->
    t

  val addcmul_out :
    t ->
    t ->
    tensor1:t ->
    tensor2:t ->
    t

  val addmm :
    t ->
    mat1:t ->
    mat2:t ->
    t

  val addmm_ :
    t ->
    mat1:t ->
    mat2:t ->
    t

  val addmm_out :
    t ->
    t ->
    mat1:t ->
    mat2:t ->
    t

  val addmv :
    t ->
    mat:t ->
    vec:t ->
    t

  val addmv_ :
    t ->
    mat:t ->
    vec:t ->
    t

  val addmv_out :
    t ->
    t ->
    mat:t ->
    vec:t ->
    t

  val addr :
    t ->
    vec1:t ->
    vec2:t ->
    t

  val addr_ :
    t ->
    vec1:t ->
    vec2:t ->
    t

  val addr_out :
    t ->
    t ->
    vec1:t ->
    vec2:t ->
    t

  val alias :
    t ->
    t

  val all :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val all_out :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val alpha_dropout :
    t ->
    p:float ->
    train:bool ->
    t

  val alpha_dropout_ :
    t ->
    p:float ->
    train:bool ->
    t

  val any :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val any_out :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val arange1 :
    start:scalar ->
    end_:scalar ->
    options:Kind.t * Device.t ->
    t

  val arange2 :
    start:scalar ->
    end_:scalar ->
    step:scalar ->
    options:Kind.t * Device.t ->
    t

  val arange3 :
    end_:scalar ->
    options:Kind.t * Device.t ->
    t

  val arange_out1 :
    t ->
    start:scalar ->
    end_:scalar ->
    t

  val arange_out2 :
    t ->
    start:scalar ->
    end_:scalar ->
    step:scalar ->
    t

  val arange_out3 :
    t ->
    end_:scalar ->
    t

  val argmax1 :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val argmax2 :
    t ->
    t

  val argmin1 :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val argmin2 :
    t ->
    t

  val as_strided1 :
    t ->
    size:int list ->
    stride:int list ->
    t

  val as_strided2 :
    t ->
    size:int list ->
    stride:int list ->
    storage_offset:int ->
    t

  val as_strided_1 :
    t ->
    size:int list ->
    stride:int list ->
    t

  val as_strided_2 :
    t ->
    size:int list ->
    stride:int list ->
    storage_offset:int ->
    t

  val asin :
    t ->
    t

  val asin_ :
    t ->
    t

  val asin_out :
    t ->
    t ->
    t

  val atan :
    t ->
    t

  val atan2 :
    t ->
    t ->
    t

  val atan2_ :
    t ->
    t ->
    t

  val atan2_out :
    t ->
    t ->
    t ->
    t

  val atan_ :
    t ->
    t

  val atan_out :
    t ->
    t ->
    t

  val avg_pool1d :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool2d :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool2d_backward :
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool2d_out :
    output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool3d :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool3d_backward :
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val avg_pool3d_out :
    output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    t

  val baddbmm :
    t ->
    batch1:t ->
    batch2:t ->
    t

  val baddbmm_ :
    t ->
    batch1:t ->
    batch2:t ->
    t

  val baddbmm_out :
    t ->
    t ->
    batch1:t ->
    batch2:t ->
    t

  val bartlett_window1 :
    window_length:int ->
    options:Kind.t * Device.t ->
    t

  val bartlett_window2 :
    window_length:int ->
    periodic:bool ->
    options:Kind.t * Device.t ->
    t

  val batch_norm :
    t ->
    weight:t option ->
    bias:t option ->
    running_mean:t option ->
    running_var:t option ->
    training:bool ->
    momentum:float ->
    eps:float ->
    cudnn_enabled:bool ->
    t

  val bernoulli1 :
    t ->
    t

  val bernoulli2 :
    t ->
    p:float ->
    t

  val bernoulli_ :
    t ->
    p:t ->
    t

  val bernoulli_1 :
    t ->
    p:float ->
    t

  val bernoulli_out :
    t ->
    t ->
    t

  val bilinear :
    input1:t ->
    input2:t ->
    weight:t ->
    bias:t option ->
    t

  val binary_cross_entropy :
    t ->
    target:t ->
    weight:t ->
    reduction:int ->
    t

  val binary_cross_entropy_backward :
    grad_output:t ->
    t ->
    target:t ->
    weight:t option ->
    reduction:int ->
    t

  val binary_cross_entropy_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    weight:t option ->
    reduction:int ->
    t

  val binary_cross_entropy_out :
    output:t ->
    t ->
    target:t ->
    weight:t ->
    reduction:int ->
    t

  val bincount :
    t ->
    weights:t option ->
    minlength:int ->
    t

  val blackman_window1 :
    window_length:int ->
    options:Kind.t * Device.t ->
    t

  val blackman_window2 :
    window_length:int ->
    periodic:bool ->
    options:Kind.t * Device.t ->
    t

  val bmm :
    t ->
    mat2:t ->
    t

  val bmm_out :
    t ->
    t ->
    mat2:t ->
    t

  val cat :
    t list ->
    dim:int ->
    t

  val cat_out :
    t ->
    t list ->
    dim:int ->
    t

  val cauchy_ :
    t ->
    median:float ->
    sigma:float ->
    t

  val ceil :
    t ->
    t

  val ceil_ :
    t ->
    t

  val ceil_out :
    t ->
    t ->
    t

  val celu :
    t ->
    t

  val celu_ :
    t ->
    t

  val clamp :
    t ->
    min:scalar ->
    max:scalar ->
    t

  val clamp_ :
    t ->
    min:scalar ->
    max:scalar ->
    t

  val clamp_max :
    t ->
    max:scalar ->
    t

  val clamp_max_ :
    t ->
    max:scalar ->
    t

  val clamp_max_out :
    t ->
    t ->
    max:scalar ->
    t

  val clamp_min :
    t ->
    min:scalar ->
    t

  val clamp_min_ :
    t ->
    min:scalar ->
    t

  val clamp_min_out :
    t ->
    t ->
    min:scalar ->
    t

  val clamp_out :
    t ->
    t ->
    min:scalar ->
    max:scalar ->
    t

  val clone :
    t ->
    t

  val coalesce :
    t ->
    t

  val contiguous :
    t ->
    t

  val conv1d :
    t ->
    weight:t ->
    bias:t ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    groups:int ->
    t

  val conv2d :
    t ->
    weight:t ->
    bias:t ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    groups:int ->
    t

  val conv3d :
    t ->
    weight:t ->
    bias:t ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    groups:int ->
    t

  val conv_tbc :
    t ->
    weight:t ->
    bias:t ->
    pad:int ->
    t

  val conv_tbc_backward :
    t ->
    t ->
    weight:t ->
    bias:t ->
    pad:int ->
    t * t * t

  val conv_transpose1d :
    t ->
    weight:t ->
    bias:t ->
    stride:int list ->
    padding:int list ->
    output_padding:int list ->
    groups:int ->
    dilation:int list ->
    t

  val conv_transpose2d :
    t ->
    weight:t ->
    bias:t ->
    stride:int list ->
    padding:int list ->
    output_padding:int list ->
    groups:int ->
    dilation:int list ->
    t

  val conv_transpose3d :
    t ->
    weight:t ->
    bias:t ->
    stride:int list ->
    padding:int list ->
    output_padding:int list ->
    groups:int ->
    dilation:int list ->
    t

  val convolution :
    t ->
    weight:t ->
    bias:t option ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    transposed:bool ->
    output_padding:int list ->
    groups:int ->
    t

  val copy_sparse_to_sparse_ :
    t ->
    src:t ->
    non_blocking:bool ->
    t

  val cos :
    t ->
    t

  val cos_ :
    t ->
    t

  val cos_out :
    t ->
    t ->
    t

  val cosh :
    t ->
    t

  val cosh_ :
    t ->
    t

  val cosh_out :
    t ->
    t ->
    t

  val cosine_embedding_loss :
    input1:t ->
    input2:t ->
    target:t ->
    margin:float ->
    reduction:int ->
    t

  val cross :
    t ->
    t ->
    dim:int ->
    t

  val cross_out :
    t ->
    t ->
    t ->
    dim:int ->
    t

  val ctc_loss1 :
    log_probs:t ->
    targets:t ->
    input_lengths:int list ->
    target_lengths:int list ->
    blank:int ->
    reduction:int ->
    t

  val ctc_loss2 :
    log_probs:t ->
    targets:t ->
    input_lengths:t ->
    target_lengths:t ->
    blank:int ->
    reduction:int ->
    t

  val cudnn_affine_grid_generator :
    theta:t ->
    n:int ->
    c:int ->
    h:int ->
    w:int ->
    t

  val cudnn_affine_grid_generator_backward :
    grad:t ->
    n:int ->
    c:int ->
    h:int ->
    w:int ->
    t

  val cudnn_batch_norm :
    t ->
    weight:t ->
    bias:t option ->
    running_mean:t option ->
    running_var:t option ->
    training:bool ->
    exponential_average_factor:float ->
    epsilon:float ->
    t * t * t

  val cudnn_batch_norm_backward :
    t ->
    grad_output:t ->
    weight:t ->
    running_mean:t option ->
    running_var:t option ->
    save_mean:t option ->
    save_var:t option ->
    epsilon:float ->
    t * t * t

  val cudnn_convolution :
    t ->
    weight:t ->
    bias:t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val cudnn_convolution_backward_bias :
    grad_output:t ->
    t

  val cudnn_convolution_backward_input :
    self_size:int list ->
    grad_output:t ->
    weight:t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val cudnn_convolution_backward_weight :
    weight_size:int list ->
    grad_output:t ->
    t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val cudnn_convolution_transpose :
    t ->
    weight:t ->
    bias:t option ->
    padding:int list ->
    output_padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val cudnn_convolution_transpose_backward_bias :
    grad_output:t ->
    t

  val cudnn_convolution_transpose_backward_input :
    grad_output:t ->
    weight:t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val cudnn_convolution_transpose_backward_weight :
    weight_size:int list ->
    grad_output:t ->
    t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val cudnn_grid_sampler :
    t ->
    grid:t ->
    t

  val cudnn_grid_sampler_backward :
    t ->
    grid:t ->
    grad_output:t ->
    t * t

  val cumprod1 :
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val cumprod2 :
    t ->
    dim:int ->
    t

  val cumprod_out1 :
    t ->
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val cumprod_out2 :
    t ->
    t ->
    dim:int ->
    t

  val cumsum1 :
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val cumsum2 :
    t ->
    dim:int ->
    t

  val cumsum_out1 :
    t ->
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val cumsum_out2 :
    t ->
    t ->
    dim:int ->
    t

  val det :
    t ->
    t

  val detach :
    t ->
    t

  val detach_ :
    t ->
    t

  val diag :
    t ->
    diagonal:int ->
    t

  val diag_out :
    t ->
    t ->
    diagonal:int ->
    t

  val diagflat :
    t ->
    offset:int ->
    t

  val diagonal :
    t ->
    offset:int ->
    dim1:int ->
    dim2:int ->
    t

  val digamma :
    t ->
    t

  val digamma_ :
    t ->
    t

  val digamma_out :
    t ->
    t ->
    t

  val div :
    t ->
    t ->
    t

  val div1 :
    t ->
    scalar ->
    t

  val div_ :
    t ->
    t ->
    t

  val div_1 :
    t ->
    scalar ->
    t

  val div_out :
    t ->
    t ->
    t ->
    t

  val dot :
    t ->
    t ->
    t

  val dot_out :
    t ->
    t ->
    t ->
    t

  val dropout :
    t ->
    p:float ->
    train:bool ->
    t

  val dropout_ :
    t ->
    p:float ->
    train:bool ->
    t

  val eig :
    t ->
    eigenvectors:bool ->
    t * t

  val eig_out :
    res1:t ->
    res2:t ->
    t ->
    eigenvectors:bool ->
    t * t

  val elu :
    t ->
    t

  val elu_ :
    t ->
    t

  val elu_out :
    output:t ->
    t ->
    t

  val embedding :
    weight:t ->
    indices:t ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    sparse:bool ->
    t

  val embedding_backward :
    grad:t ->
    indices:t ->
    num_weights:int ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    sparse:bool ->
    t

  val embedding_bag :
    weight:t ->
    indices:t ->
    offsets:t ->
    scale_grad_by_freq:bool ->
    mode:int ->
    sparse:bool ->
    t * t * t * t

  val embedding_dense_backward :
    grad:t ->
    indices:t ->
    num_weights:int ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    t

  val embedding_renorm_ :
    t ->
    indices:t ->
    max_norm:float ->
    norm_type:float ->
    t

  val embedding_sparse_backward :
    grad:t ->
    indices:t ->
    num_weights:int ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    t

  val empty :
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val empty_like1 :
    t ->
    t

  val empty_like2 :
    t ->
    options:Kind.t * Device.t ->
    t

  val empty_out :
    t ->
    size:int list ->
    t

  val empty_strided :
    size:int list ->
    stride:int list ->
    options:Kind.t * Device.t ->
    t

  val eq :
    t ->
    t ->
    t

  val eq_ :
    t ->
    t ->
    t

  val eq_out :
    t ->
    t ->
    t ->
    t

  val erf :
    t ->
    t

  val erf_ :
    t ->
    t

  val erf_out :
    t ->
    t ->
    t

  val erfc :
    t ->
    t

  val erfc_ :
    t ->
    t

  val erfc_out :
    t ->
    t ->
    t

  val erfinv :
    t ->
    t

  val erfinv_ :
    t ->
    t

  val erfinv_out :
    t ->
    t ->
    t

  val exp :
    t ->
    t

  val exp_ :
    t ->
    t

  val exp_out :
    t ->
    t ->
    t

  val expand :
    t ->
    size:int list ->
    implicit:bool ->
    t

  val expand_as :
    t ->
    t ->
    t

  val expm1 :
    t ->
    t

  val expm1_ :
    t ->
    t

  val expm1_out :
    t ->
    t ->
    t

  val exponential_ :
    t ->
    lambd:float ->
    t

  val eye1 :
    n:int ->
    options:Kind.t * Device.t ->
    t

  val eye2 :
    n:int ->
    m:int ->
    options:Kind.t * Device.t ->
    t

  val eye_out1 :
    t ->
    n:int ->
    t

  val eye_out2 :
    t ->
    n:int ->
    m:int ->
    t

  val feature_alpha_dropout :
    t ->
    p:float ->
    train:bool ->
    t

  val feature_alpha_dropout_ :
    t ->
    p:float ->
    train:bool ->
    t

  val feature_dropout :
    t ->
    p:float ->
    train:bool ->
    t

  val feature_dropout_ :
    t ->
    p:float ->
    train:bool ->
    t

  val fft :
    t ->
    signal_ndim:int ->
    normalized:bool ->
    t

  val fill_ :
    t ->
    value:t ->
    t

  val fill_1 :
    t ->
    value:scalar ->
    t

  val flatten :
    t ->
    start_dim:int ->
    end_dim:int ->
    t

  val flip :
    t ->
    dims:int list ->
    t

  val floor :
    t ->
    t

  val floor_ :
    t ->
    t

  val floor_out :
    t ->
    t ->
    t

  val fmod :
    t ->
    t ->
    t

  val fmod_ :
    t ->
    t ->
    t

  val fmod_out :
    t ->
    t ->
    t ->
    t

  val frac :
    t ->
    t

  val frac_ :
    t ->
    t

  val frac_out :
    t ->
    t ->
    t

  val fractional_max_pool2d :
    t ->
    kernel_size:int list ->
    output_size:int list ->
    random_samples:t ->
    t * t

  val fractional_max_pool2d_backward :
    grad_output:t ->
    t ->
    kernel_size:int list ->
    output_size:int list ->
    indices:t ->
    t

  val fractional_max_pool2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    kernel_size:int list ->
    output_size:int list ->
    indices:t ->
    t

  val fractional_max_pool2d_out :
    output:t ->
    indices:t ->
    t ->
    kernel_size:int list ->
    output_size:int list ->
    random_samples:t ->
    t * t

  val frobenius_norm1 :
    t ->
    t

  val frobenius_norm2 :
    t ->
    dim:int list ->
    keepdim:bool ->
    t

  val frobenius_norm_out :
    t ->
    t ->
    dim:int list ->
    keepdim:bool ->
    t

  val full :
    size:int list ->
    fill_value:scalar ->
    options:Kind.t * Device.t ->
    t

  val full_like1 :
    t ->
    fill_value:scalar ->
    t

  val full_like2 :
    t ->
    fill_value:scalar ->
    options:Kind.t * Device.t ->
    t

  val full_out :
    t ->
    size:int list ->
    fill_value:scalar ->
    t

  val gather :
    t ->
    dim:int ->
    index:t ->
    t

  val gather_out :
    t ->
    t ->
    dim:int ->
    index:t ->
    t

  val ge :
    t ->
    t ->
    t

  val ge_ :
    t ->
    t ->
    t

  val ge_out :
    t ->
    t ->
    t ->
    t

  val gels :
    t ->
    a:t ->
    t * t

  val gels_out :
    res1:t ->
    res2:t ->
    t ->
    a:t ->
    t * t

  val geometric_ :
    t ->
    p:float ->
    t

  val geqrf :
    t ->
    t * t

  val geqrf_out :
    res1:t ->
    res2:t ->
    t ->
    t * t

  val ger :
    t ->
    vec2:t ->
    t

  val ger_out :
    t ->
    t ->
    vec2:t ->
    t

  val gesv :
    t ->
    a:t ->
    t * t

  val gesv_out :
    solution:t ->
    lu:t ->
    t ->
    a:t ->
    t * t

  val glu :
    t ->
    dim:int ->
    t

  val glu_backward :
    grad_output:t ->
    t ->
    dim:int ->
    t

  val glu_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    dim:int ->
    t

  val glu_out :
    output:t ->
    t ->
    dim:int ->
    t

  val grad :
    t ->
    t

  val grid_sampler :
    t ->
    grid:t ->
    interpolation_mode:int ->
    padding_mode:int ->
    t

  val grid_sampler_2d :
    t ->
    grid:t ->
    interpolation_mode:int ->
    padding_mode:int ->
    t

  val grid_sampler_2d_backward :
    grad_output:t ->
    t ->
    grid:t ->
    interpolation_mode:int ->
    padding_mode:int ->
    t * t

  val grid_sampler_3d :
    t ->
    grid:t ->
    interpolation_mode:int ->
    padding_mode:int ->
    t

  val grid_sampler_3d_backward :
    grad_output:t ->
    t ->
    grid:t ->
    interpolation_mode:int ->
    padding_mode:int ->
    t * t

  val group_norm :
    t ->
    num_groups:int ->
    weight:t option ->
    bias:t option ->
    eps:float ->
    cudnn_enabled:bool ->
    t

  val gru1 :
    t ->
    hx:t ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    t * t

  val gru2 :
    data:t ->
    batch_sizes:t ->
    hx:t ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    t * t

  val gru_cell :
    t ->
    hx:t ->
    w_ih:t ->
    w_hh:t ->
    b_ih:t option ->
    b_hh:t option ->
    t

  val gt :
    t ->
    t ->
    t

  val gt_ :
    t ->
    t ->
    t

  val gt_out :
    t ->
    t ->
    t ->
    t

  val hamming_window1 :
    window_length:int ->
    options:Kind.t * Device.t ->
    t

  val hamming_window2 :
    window_length:int ->
    periodic:bool ->
    options:Kind.t * Device.t ->
    t

  val hamming_window3 :
    window_length:int ->
    periodic:bool ->
    alpha:float ->
    options:Kind.t * Device.t ->
    t

  val hamming_window4 :
    window_length:int ->
    periodic:bool ->
    alpha:float ->
    beta:float ->
    options:Kind.t * Device.t ->
    t

  val hann_window1 :
    window_length:int ->
    options:Kind.t * Device.t ->
    t

  val hann_window2 :
    window_length:int ->
    periodic:bool ->
    options:Kind.t * Device.t ->
    t

  val hardshrink :
    t ->
    t

  val hardshrink_backward :
    grad_out:t ->
    t ->
    lambd:scalar ->
    t

  val hardtanh :
    t ->
    t

  val hardtanh_ :
    t ->
    t

  val hardtanh_out :
    output:t ->
    t ->
    t

  val hinge_embedding_loss :
    t ->
    target:t ->
    margin:float ->
    reduction:int ->
    t

  val histc :
    t ->
    bins:int ->
    t

  val histc_out :
    t ->
    t ->
    bins:int ->
    t

  val hspmm :
    mat1:t ->
    mat2:t ->
    t

  val hspmm_out :
    t ->
    mat1:t ->
    mat2:t ->
    t

  val ifft :
    t ->
    signal_ndim:int ->
    normalized:bool ->
    t

  val index :
    t ->
    indices:t list ->
    t

  val index_add_ :
    t ->
    dim:int ->
    index:t ->
    source:t ->
    t

  val index_copy_ :
    t ->
    dim:int ->
    index:t ->
    source:t ->
    t

  val index_fill_ :
    t ->
    dim:int ->
    index:t ->
    value:t ->
    t

  val index_put :
    t ->
    indices:t list ->
    values:t ->
    t

  val index_put_ :
    t ->
    indices:t list ->
    values:t ->
    t

  val index_select :
    t ->
    dim:int ->
    index:t ->
    t

  val index_select_out :
    t ->
    t ->
    dim:int ->
    index:t ->
    t

  val instance_norm :
    t ->
    weight:t option ->
    bias:t option ->
    running_mean:t option ->
    running_var:t option ->
    use_input_stats:bool ->
    momentum:float ->
    eps:float ->
    cudnn_enabled:bool ->
    t

  val inverse :
    t ->
    t

  val inverse_out :
    t ->
    t ->
    t

  val irfft :
    t ->
    signal_ndim:int ->
    normalized:bool ->
    onesided:bool ->
    signal_sizes:int list ->
    t

  val isclose :
    t ->
    t ->
    rtol:float ->
    atol:float ->
    equal_nan:bool ->
    t

  val kl_div :
    t ->
    target:t ->
    reduction:int ->
    t

  val kl_div_backward :
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val kthvalue :
    t ->
    k:int ->
    dim:int ->
    keepdim:bool ->
    t * t

  val kthvalue_out :
    values:t ->
    indices:t ->
    t ->
    k:int ->
    dim:int ->
    keepdim:bool ->
    t * t

  val l1_loss :
    t ->
    target:t ->
    reduction:int ->
    t

  val l1_loss_backward :
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val l1_loss_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val l1_loss_out :
    output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val layer_norm :
    t ->
    normalized_shape:int list ->
    weight:t option ->
    bias:t option ->
    eps:float ->
    cudnn_enable:bool ->
    t

  val le :
    t ->
    t ->
    t

  val le_ :
    t ->
    t ->
    t

  val le_out :
    t ->
    t ->
    t ->
    t

  val leaky_relu :
    t ->
    t

  val leaky_relu_ :
    t ->
    t

  val leaky_relu_out :
    output:t ->
    t ->
    t

  val lgamma :
    t ->
    t

  val lgamma_ :
    t ->
    t

  val lgamma_out :
    t ->
    t ->
    t

  val linear :
    t ->
    weight:t ->
    bias:t ->
    t

  val linspace1 :
    start:scalar ->
    end_:scalar ->
    options:Kind.t * Device.t ->
    t

  val linspace2 :
    start:scalar ->
    end_:scalar ->
    steps:int ->
    options:Kind.t * Device.t ->
    t

  val linspace_out1 :
    t ->
    start:scalar ->
    end_:scalar ->
    t

  val linspace_out2 :
    t ->
    start:scalar ->
    end_:scalar ->
    steps:int ->
    t

  val log :
    t ->
    t

  val log10 :
    t ->
    t

  val log10_ :
    t ->
    t

  val log10_out :
    t ->
    t ->
    t

  val log1p :
    t ->
    t

  val log1p_ :
    t ->
    t

  val log1p_out :
    t ->
    t ->
    t

  val log2 :
    t ->
    t

  val log2_ :
    t ->
    t

  val log2_out :
    t ->
    t ->
    t

  val log_ :
    t ->
    t

  val log_normal_ :
    t ->
    mean:float ->
    std:float ->
    t

  val log_out :
    t ->
    t ->
    t

  val log_sigmoid :
    t ->
    t

  val log_sigmoid_backward :
    grad_output:t ->
    t ->
    buffer:t ->
    t

  val log_sigmoid_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    buffer:t ->
    t

  val log_sigmoid_out :
    output:t ->
    t ->
    t

  val log_softmax :
    t ->
    dim:int ->
    t

  val logdet :
    t ->
    t

  val logspace1 :
    start:scalar ->
    end_:scalar ->
    options:Kind.t * Device.t ->
    t

  val logspace2 :
    start:scalar ->
    end_:scalar ->
    steps:int ->
    options:Kind.t * Device.t ->
    t

  val logspace_out1 :
    t ->
    start:scalar ->
    end_:scalar ->
    t

  val logspace_out2 :
    t ->
    start:scalar ->
    end_:scalar ->
    steps:int ->
    t

  val logsumexp :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val logsumexp_out :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val lstm1 :
    t ->
    hx:t list ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    t * t * t

  val lstm2 :
    data:t ->
    batch_sizes:t ->
    hx:t list ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    t * t * t

  val lstm_cell :
    t ->
    hx:t list ->
    w_ih:t ->
    w_hh:t ->
    b_ih:t option ->
    b_hh:t option ->
    t * t

  val lt :
    t ->
    t ->
    t

  val lt_ :
    t ->
    t ->
    t

  val lt_out :
    t ->
    t ->
    t ->
    t

  val margin_ranking_loss :
    input1:t ->
    input2:t ->
    target:t ->
    margin:float ->
    reduction:int ->
    t

  val masked_fill_ :
    t ->
    mask:t ->
    value:t ->
    t

  val masked_scatter_ :
    t ->
    mask:t ->
    source:t ->
    t

  val masked_select :
    t ->
    mask:t ->
    t

  val masked_select_out :
    t ->
    t ->
    mask:t ->
    t

  val matmul :
    t ->
    t ->
    t

  val matmul_out :
    t ->
    t ->
    t ->
    t

  val matrix_power :
    t ->
    n:int ->
    t

  val matrix_rank1 :
    t ->
    tol:float ->
    symmetric:bool ->
    t

  val matrix_rank2 :
    t ->
    symmetric:bool ->
    t

  val max :
    t ->
    t ->
    t

  val max1 :
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val max_out1 :
    t ->
    t ->
    t ->
    t

  val max_out2 :
    max:t ->
    max_values:t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val max_pool1d :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t

  val max_pool1d_with_indices :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t * t

  val max_pool2d :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t

  val max_pool2d_with_indices :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t * t

  val max_pool2d_with_indices_backward :
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:t ->
    t

  val max_pool2d_with_indices_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:t ->
    t

  val max_pool2d_with_indices_out :
    output:t ->
    indices:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t * t

  val max_pool3d :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t

  val max_pool3d_with_indices :
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t * t

  val max_pool3d_with_indices_backward :
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:t ->
    t

  val max_pool3d_with_indices_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:t ->
    t

  val max_pool3d_with_indices_out :
    output:t ->
    indices:t ->
    t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    t * t

  val max_unpool2d :
    t ->
    indices:t ->
    output_size:int list ->
    t

  val max_unpool2d_backward :
    grad_output:t ->
    t ->
    indices:t ->
    output_size:int list ->
    t

  val max_unpool2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    indices:t ->
    output_size:int list ->
    t

  val max_unpool2d_out :
    output:t ->
    t ->
    indices:t ->
    output_size:int list ->
    t

  val max_unpool3d :
    t ->
    indices:t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    t

  val max_unpool3d_backward :
    grad_output:t ->
    t ->
    indices:t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    t

  val max_unpool3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    indices:t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    t

  val max_unpool3d_out :
    output:t ->
    t ->
    indices:t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    t

  val max_values :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val mean1 :
    t ->
    dtype:Kind.t ->
    t

  val mean2 :
    t ->
    t

  val mean3 :
    t ->
    dim:int ->
    keepdim:bool ->
    dtype:Kind.t ->
    t

  val mean4 :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val mean5 :
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val mean_out1 :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    dtype:Kind.t ->
    t

  val mean_out2 :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val mean_out3 :
    t ->
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val median :
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val median_out :
    values:t ->
    indices:t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val min :
    t ->
    t ->
    t

  val min1 :
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val min_out1 :
    t ->
    t ->
    t ->
    t

  val min_out2 :
    min:t ->
    min_indices:t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val min_values :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val miopen_batch_norm :
    t ->
    weight:t ->
    bias:t option ->
    running_mean:t option ->
    running_var:t option ->
    training:bool ->
    exponential_average_factor:float ->
    epsilon:float ->
    t * t * t

  val miopen_batch_norm_backward :
    t ->
    grad_output:t ->
    weight:t ->
    running_mean:t option ->
    running_var:t option ->
    save_mean:t option ->
    save_var:t option ->
    epsilon:float ->
    t * t * t

  val miopen_convolution :
    t ->
    weight:t ->
    bias:t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val miopen_convolution_backward_bias :
    grad_output:t ->
    t

  val miopen_convolution_backward_input :
    self_size:int list ->
    grad_output:t ->
    weight:t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val miopen_convolution_backward_weight :
    weight_size:int list ->
    grad_output:t ->
    t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val miopen_convolution_transpose :
    t ->
    weight:t ->
    bias:t option ->
    padding:int list ->
    output_padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val miopen_convolution_transpose_backward_input :
    grad_output:t ->
    weight:t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val miopen_convolution_transpose_backward_weight :
    weight_size:int list ->
    grad_output:t ->
    t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    t

  val mkldnn_convolution :
    t ->
    weight:t ->
    bias:t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    t

  val mkldnn_convolution_backward_input :
    self_size:int list ->
    grad_output:t ->
    weight:t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    bias_defined:bool ->
    t

  val mkldnn_convolution_backward_weights :
    weight_size:int list ->
    grad_output:t ->
    t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    bias_defined:bool ->
    t * t

  val mm :
    t ->
    mat2:t ->
    t

  val mm_out :
    t ->
    t ->
    mat2:t ->
    t

  val mode :
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val mode_out :
    values:t ->
    indices:t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t * t

  val mse_loss :
    t ->
    target:t ->
    reduction:int ->
    t

  val mse_loss_backward :
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val mse_loss_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val mse_loss_out :
    output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val mul :
    t ->
    t ->
    t

  val mul1 :
    t ->
    scalar ->
    t

  val mul_ :
    t ->
    t ->
    t

  val mul_1 :
    t ->
    scalar ->
    t

  val mul_out :
    t ->
    t ->
    t ->
    t

  val multilabel_margin_loss :
    t ->
    target:t ->
    reduction:int ->
    t

  val multilabel_margin_loss_backward :
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    is_target:t ->
    t

  val multilabel_margin_loss_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    is_target:t ->
    t

  val multilabel_margin_loss_out :
    output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val multinomial :
    t ->
    num_samples:int ->
    replacement:bool ->
    t

  val multinomial_out :
    t ->
    t ->
    num_samples:int ->
    replacement:bool ->
    t

  val mv :
    t ->
    vec:t ->
    t

  val mv_out :
    t ->
    t ->
    vec:t ->
    t

  val mvlgamma :
    t ->
    p:int ->
    t

  val mvlgamma_ :
    t ->
    p:int ->
    t

  val narrow :
    t ->
    dim:int ->
    start:int ->
    length:int ->
    t

  val narrow_copy :
    t ->
    dim:int ->
    start:int ->
    length:int ->
    t

  val native_clone :
    t ->
    t

  val native_norm :
    t ->
    t

  val native_pow :
    t ->
    exponent:scalar ->
    t

  val native_pow_out :
    t ->
    t ->
    exponent:scalar ->
    t

  val native_resize_as_ :
    t ->
    the_template:t ->
    t

  val native_zero_ :
    t ->
    t

  val ne :
    t ->
    t ->
    t

  val ne_ :
    t ->
    t ->
    t

  val ne_out :
    t ->
    t ->
    t ->
    t

  val neg :
    t ->
    t

  val neg_ :
    t ->
    t

  val neg_out :
    t ->
    t ->
    t

  val nll_loss :
    t ->
    target:t ->
    weight:t ->
    reduction:int ->
    ignore_index:int ->
    t

  val nll_loss2d :
    t ->
    target:t ->
    weight:t ->
    reduction:int ->
    ignore_index:int ->
    t

  val nll_loss2d_backward :
    grad_output:t ->
    t ->
    target:t ->
    weight:t option ->
    reduction:int ->
    ignore_index:int ->
    total_weight:t ->
    t

  val nll_loss2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    weight:t option ->
    reduction:int ->
    ignore_index:int ->
    total_weight:t ->
    t

  val nll_loss2d_out :
    output:t ->
    t ->
    target:t ->
    weight:t ->
    reduction:int ->
    ignore_index:int ->
    t

  val nll_loss_backward :
    grad_output:t ->
    t ->
    target:t ->
    weight:t option ->
    reduction:int ->
    ignore_index:int ->
    total_weight:t ->
    t

  val nll_loss_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    weight:t option ->
    reduction:int ->
    ignore_index:int ->
    total_weight:t ->
    t

  val nll_loss_out :
    output:t ->
    t ->
    target:t ->
    weight:t ->
    reduction:int ->
    ignore_index:int ->
    t

  val nonzero :
    t ->
    t

  val nonzero_out :
    t ->
    t ->
    t

  val norm1 :
    t ->
    t

  val norm2 :
    t ->
    p:scalar ->
    dim:int ->
    keepdim:bool ->
    t

  val norm_except_dim :
    v:t ->
    pow:int ->
    dim:int ->
    t

  val norm_out :
    t ->
    t ->
    p:scalar ->
    dim:int ->
    keepdim:bool ->
    t

  val normal :
    mean:t ->
    std:t ->
    t

  val normal1 :
    mean:t ->
    std:float ->
    t

  val normal2 :
    mean:float ->
    std:t ->
    t

  val normal_ :
    t ->
    mean:float ->
    std:float ->
    t

  val normal_out1 :
    output:t ->
    mean:t ->
    std:float ->
    t

  val normal_out2 :
    output:t ->
    mean:float ->
    std:t ->
    t

  val normal_out3 :
    output:t ->
    mean:t ->
    std:t ->
    t

  val nuclear_norm :
    t ->
    keepdim:bool ->
    t

  val nuclear_norm_out :
    t ->
    t ->
    keepdim:bool ->
    t

  val ones :
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val ones_like1 :
    t ->
    t

  val ones_like2 :
    t ->
    options:Kind.t * Device.t ->
    t

  val ones_out :
    t ->
    size:int list ->
    t

  val orgqr :
    t ->
    input2:t ->
    t

  val orgqr_out :
    t ->
    t ->
    input2:t ->
    t

  val ormqr :
    t ->
    input2:t ->
    input3:t ->
    left:bool ->
    transpose:bool ->
    t

  val ormqr_out :
    t ->
    t ->
    input2:t ->
    input3:t ->
    left:bool ->
    transpose:bool ->
    t

  val pairwise_distance :
    x1:t ->
    x2:t ->
    p:float ->
    eps:float ->
    keepdim:bool ->
    t

  val pdist :
    t ->
    p:float ->
    t

  val permute :
    t ->
    dims:int list ->
    t

  val pin_memory :
    t ->
    t

  val pinverse :
    t ->
    rcond:float ->
    t

  val pixel_shuffle :
    t ->
    upscale_factor:int ->
    t

  val poisson :
    t ->
    t

  val polygamma :
    n:int ->
    t ->
    t

  val polygamma_ :
    t ->
    n:int ->
    t

  val polygamma_out :
    t ->
    n:int ->
    t ->
    t

  val potri :
    t ->
    upper:bool ->
    t

  val potri_out :
    output:t ->
    t ->
    upper:bool ->
    t

  val potrs :
    t ->
    input2:t ->
    upper:bool ->
    t

  val potrs_out :
    t ->
    t ->
    input2:t ->
    upper:bool ->
    t

  val pow :
    t ->
    exponent:t ->
    t

  val pow1 :
    t ->
    exponent:scalar ->
    t

  val pow_ :
    t ->
    exponent:t ->
    t

  val pow_out1 :
    t ->
    t ->
    exponent:t ->
    t

  val pow_out2 :
    t ->
    t ->
    exponent:scalar ->
    t

  val prelu :
    t ->
    weight:t ->
    t

  val prelu_backward :
    grad_output:t ->
    t ->
    weight:t ->
    t * t

  val prod1 :
    t ->
    dtype:Kind.t ->
    t

  val prod2 :
    t ->
    t

  val prod3 :
    t ->
    dim:int ->
    keepdim:bool ->
    dtype:Kind.t ->
    t

  val prod4 :
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val prod5 :
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val prod_out1 :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    dtype:Kind.t ->
    t

  val prod_out2 :
    t ->
    t ->
    dim:int ->
    keepdim:bool ->
    t

  val prod_out3 :
    t ->
    t ->
    dim:int ->
    dtype:Kind.t ->
    t

  val put_ :
    t ->
    index:t ->
    source:t ->
    accumulate:bool ->
    t

  val qr :
    t ->
    t * t

  val qr_out :
    res1:t ->
    res2:t ->
    t ->
    t * t

  val rand :
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val rand_like1 :
    t ->
    t

  val rand_like2 :
    t ->
    options:Kind.t * Device.t ->
    t

  val rand_out :
    t ->
    size:int list ->
    t

  val randint1 :
    high:int ->
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val randint2 :
    low:int ->
    high:int ->
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val randint_like1 :
    t ->
    high:int ->
    t

  val randint_like2 :
    t ->
    low:int ->
    high:int ->
    t

  val randint_like3 :
    t ->
    high:int ->
    options:Kind.t * Device.t ->
    t

  val randint_like4 :
    t ->
    low:int ->
    high:int ->
    options:Kind.t * Device.t ->
    t

  val randint_out1 :
    t ->
    high:int ->
    size:int list ->
    t

  val randint_out2 :
    t ->
    low:int ->
    high:int ->
    size:int list ->
    t

  val randn :
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val randn_like1 :
    t ->
    t

  val randn_like2 :
    t ->
    options:Kind.t * Device.t ->
    t

  val randn_out :
    t ->
    size:int list ->
    t

  val random_1 :
    t ->
    from:int ->
    to_:int ->
    t

  val random_2 :
    t ->
    to_:int ->
    t

  val random_3 :
    t ->
    t

  val randperm :
    n:int ->
    options:Kind.t * Device.t ->
    t

  val randperm_out :
    t ->
    n:int ->
    t

  val range1 :
    start:scalar ->
    end_:scalar ->
    options:Kind.t * Device.t ->
    t

  val range2 :
    start:scalar ->
    end_:scalar ->
    step:scalar ->
    options:Kind.t * Device.t ->
    t

  val range_out1 :
    t ->
    start:scalar ->
    end_:scalar ->
    t

  val range_out2 :
    t ->
    start:scalar ->
    end_:scalar ->
    step:scalar ->
    t

  val reciprocal :
    t ->
    t

  val reciprocal_ :
    t ->
    t

  val reciprocal_out :
    t ->
    t ->
    t

  val reflection_pad1d :
    t ->
    padding:int list ->
    t

  val reflection_pad1d_backward :
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val reflection_pad1d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val reflection_pad1d_out :
    output:t ->
    t ->
    padding:int list ->
    t

  val reflection_pad2d :
    t ->
    padding:int list ->
    t

  val reflection_pad2d_backward :
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val reflection_pad2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val reflection_pad2d_out :
    output:t ->
    t ->
    padding:int list ->
    t

  val relu :
    t ->
    t

  val relu_ :
    t ->
    t

  val remainder :
    t ->
    t ->
    t

  val remainder_ :
    t ->
    t ->
    t

  val remainder_out :
    t ->
    t ->
    t ->
    t

  val repeat :
    t ->
    repeats:int list ->
    t

  val replication_pad1d :
    t ->
    padding:int list ->
    t

  val replication_pad1d_backward :
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad1d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad1d_out :
    output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad2d :
    t ->
    padding:int list ->
    t

  val replication_pad2d_backward :
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad2d_out :
    output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad3d :
    t ->
    padding:int list ->
    t

  val replication_pad3d_backward :
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    padding:int list ->
    t

  val replication_pad3d_out :
    output:t ->
    t ->
    padding:int list ->
    t

  val reshape :
    t ->
    shape:int list ->
    t

  val reshape_as :
    t ->
    t ->
    t

  val resize_ :
    t ->
    size:int list ->
    t

  val resize_as_ :
    t ->
    the_template:t ->
    t

  val rfft :
    t ->
    signal_ndim:int ->
    normalized:bool ->
    onesided:bool ->
    t

  val rnn_relu1 :
    t ->
    hx:t ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    t * t

  val rnn_relu2 :
    data:t ->
    batch_sizes:t ->
    hx:t ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    t * t

  val rnn_relu_cell :
    t ->
    hx:t ->
    w_ih:t ->
    w_hh:t ->
    b_ih:t option ->
    b_hh:t option ->
    t

  val rnn_tanh1 :
    t ->
    hx:t ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    t * t

  val rnn_tanh2 :
    data:t ->
    batch_sizes:t ->
    hx:t ->
    params:t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    t * t

  val rnn_tanh_cell :
    t ->
    hx:t ->
    w_ih:t ->
    w_hh:t ->
    b_ih:t option ->
    b_hh:t option ->
    t

  val roipooling2d_backward :
    t ->
    rois:t ->
    pooledheight:int ->
    pooledwidth:int ->
    spatialscale:float ->
    gradoutput:t ->
    argmaxes:t ->
    t

  val rot90 :
    t ->
    k:int ->
    dims:int list ->
    t

  val round :
    t ->
    t

  val round_ :
    t ->
    t

  val round_out :
    t ->
    t ->
    t

  val rrelu :
    t ->
    training:bool ->
    t

  val rrelu_ :
    t ->
    training:bool ->
    t

  val rrelu_with_noise :
    t ->
    noise:t ->
    training:bool ->
    t

  val rrelu_with_noise_ :
    t ->
    noise:t ->
    training:bool ->
    t

  val rrelu_with_noise_out :
    output:t ->
    t ->
    noise:t ->
    training:bool ->
    t

  val rsqrt :
    t ->
    t

  val rsqrt_ :
    t ->
    t

  val rsqrt_out :
    t ->
    t ->
    t

  val s_native_addmm :
    t ->
    mat1:t ->
    mat2:t ->
    t

  val s_native_addmm_ :
    t ->
    mat1:t ->
    mat2:t ->
    t

  val s_native_addmm_out :
    t ->
    t ->
    mat1:t ->
    mat2:t ->
    t

  val scatter_ :
    t ->
    dim:int ->
    index:t ->
    src:t ->
    t

  val scatter_add_ :
    t ->
    dim:int ->
    index:t ->
    src:t ->
    t

  val select :
    t ->
    dim:int ->
    index:int ->
    t

  val selu :
    t ->
    t

  val selu_ :
    t ->
    t

  val set_ :
    t ->
    source:t ->
    t

  val set_1 :
    t ->
    t

  val set_requires_grad :
    t ->
    r:bool ->
    t

  val sigmoid :
    t ->
    t

  val sigmoid_ :
    t ->
    t

  val sigmoid_out :
    t ->
    t ->
    t

  val sign :
    t ->
    t

  val sign_ :
    t ->
    t

  val sign_out :
    t ->
    t ->
    t

  val sin :
    t ->
    t

  val sin_ :
    t ->
    t

  val sin_out :
    t ->
    t ->
    t

  val sinh :
    t ->
    t

  val sinh_ :
    t ->
    t

  val sinh_out :
    t ->
    t ->
    t

  val slice :
    t ->
    dim:int ->
    start:int ->
    end_:int ->
    step:int ->
    t

  val slogdet :
    t ->
    t * t

  val smm :
    t ->
    mat2:t ->
    t

  val smooth_l1_loss :
    t ->
    target:t ->
    reduction:int ->
    t

  val smooth_l1_loss_backward :
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val smooth_l1_loss_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val smooth_l1_loss_out :
    output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val soft_margin_loss :
    t ->
    target:t ->
    reduction:int ->
    t

  val soft_margin_loss_backward :
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val soft_margin_loss_backward_out :
    grad_input:t ->
    grad_output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val soft_margin_loss_out :
    output:t ->
    t ->
    target:t ->
    reduction:int ->
    t

  val softmax :
    t ->
    dim:int ->
    t

  val softplus :
    t ->
    t

  val softplus_out :
    output:t ->
    t ->
    t

  val softshrink :
    t ->
    t

  val softshrink_out :
    output:t ->
    t ->
    t

  val sort :
    t ->
    dim:int ->
    descending:bool ->
    t * t

  val sort_out :
    values:t ->
    indices:t ->
    t ->
    dim:int ->
    descending:bool ->
    t * t

  val sparse_coo_tensor :
    indices:t ->
    values:t ->
    t

  val sparse_coo_tensor1 :
    indices:t ->
    values:t ->
    size:int list ->
    t

  val sparse_coo_tensor2 :
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val sparse_coo_tensor3 :
    indices:t ->
    values:t ->
    options:Kind.t * Device.t ->
    t

  val sparse_coo_tensor4 :
    indices:t ->
    values:t ->
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val sparse_resize_ :
    t ->
    size:int list ->
    sparsedims:int ->
    densedims:int ->
    t

  val sparse_resize_and_clear_ :
    t ->
    size:int list ->
    sparsedims:int ->
    densedims:int ->
    t

  val sqrt :
    t ->
    t

  val sqrt_ :
    t ->
    t

  val sqrt_out :
    t ->
    t ->
    t

  val squeeze1 :
    t ->
    t

  val squeeze2 :
    t ->
    dim:int ->
    t

  val squeeze_1 :
    t ->
    t

  val squeeze_2 :
    t ->
    dim:int ->
    t

  val sspaddmm :
    t ->
    mat1:t ->
    mat2:t ->
    t

  val sspaddmm_out :
    t ->
    t ->
    mat1:t ->
    mat2:t ->
    t

  val stack :
    t list ->
    dim:int ->
    t

  val stack_out :
    t ->
    t list ->
    dim:int ->
    t

  val std1 :
    t ->
    unbiased:bool ->
    t

  val std2 :
    t ->
    dim:int ->
    unbiased:bool ->
    keepdim:bool ->
    t

  val std_out :
    t ->
    t ->
    dim:int ->
    unbiased:bool ->
    keepdim:bool ->
    t

  val stft :
    t ->
    n_fft:int ->
    hop_length:int ->
    win_length:int ->
    window:t option ->
    normalized:bool ->
    onesided:bool ->
    t

  val sub :
    t ->
    t ->
    t

  val sub1 :
    t ->
    scalar ->
    t

  val sub_ :
    t ->
    t ->
    t

  val sub_1 :
    t ->
    scalar ->
    t

  val sub_out :
    t ->
    t ->
    t ->
    t

  val sum1 :
    t ->
    dtype:Kind.t ->
    t

  val sum2 :
    t ->
    t

  val sum3 :
    t ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.t ->
    t

  val sum4 :
    t ->
    dim:int list ->
    keepdim:bool ->
    t

  val sum5 :
    t ->
    dim:int list ->
    dtype:Kind.t ->
    t

  val sum_out1 :
    t ->
    t ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.t ->
    t

  val sum_out2 :
    t ->
    t ->
    dim:int list ->
    keepdim:bool ->
    t

  val sum_out3 :
    t ->
    t ->
    dim:int list ->
    dtype:Kind.t ->
    t

  val svd :
    t ->
    some:bool ->
    t * t * t

  val svd_out :
    res1:t ->
    res2:t ->
    res3:t ->
    t ->
    some:bool ->
    t * t * t

  val symeig :
    t ->
    eigenvectors:bool ->
    upper:bool ->
    t * t

  val symeig_out :
    res1:t ->
    res2:t ->
    t ->
    eigenvectors:bool ->
    upper:bool ->
    t * t

  val tr :
    t ->
    t

  val t_ :
    t ->
    t

  val take :
    t ->
    index:t ->
    t

  val take_out :
    t ->
    t ->
    index:t ->
    t

  val tan :
    t ->
    t

  val tan_ :
    t ->
    t

  val tan_out :
    t ->
    t ->
    t

  val tanh :
    t ->
    t

  val tanh_ :
    t ->
    t

  val tanh_out :
    t ->
    t ->
    t

  val tensordot :
    t ->
    t ->
    dims_self:int list ->
    dims_other:int list ->
    t

  val to1 :
    t ->
    device:Device.t ->
    t

  val to2 :
    t ->
    device:Device.t ->
    dtype:Kind.t ->
    non_blocking:bool ->
    t

  val to3 :
    t ->
    dtype:Kind.t ->
    non_blocking:bool ->
    t

  val to4 :
    t ->
    device:Device.t ->
    non_blocking:bool ->
    t

  val to5 :
    t ->
    t ->
    non_blocking:bool ->
    t

  val to_dense :
    t ->
    t

  val topk :
    t ->
    k:int ->
    dim:int ->
    largest:bool ->
    sorted:bool ->
    t * t

  val topk_out :
    values:t ->
    indices:t ->
    t ->
    k:int ->
    dim:int ->
    largest:bool ->
    sorted:bool ->
    t * t

  val totype :
    t ->
    scalar_type:Kind.t ->
    t

  val transpose :
    t ->
    dim0:int ->
    dim1:int ->
    t

  val transpose_ :
    t ->
    dim0:int ->
    dim1:int ->
    t

  val tril :
    t ->
    diagonal:int ->
    t

  val tril_ :
    t ->
    diagonal:int ->
    t

  val tril_out :
    t ->
    t ->
    diagonal:int ->
    t

  val triplet_margin_loss :
    anchor:t ->
    positive:t ->
    negative:t ->
    margin:float ->
    p:float ->
    eps:float ->
    swap:bool ->
    reduction:int ->
    t

  val triu :
    t ->
    diagonal:int ->
    t

  val triu_ :
    t ->
    diagonal:int ->
    t

  val triu_out :
    t ->
    t ->
    diagonal:int ->
    t

  val trtrs :
    t ->
    a:t ->
    upper:bool ->
    transpose:bool ->
    unitriangular:bool ->
    t * t

  val trtrs_out :
    res1:t ->
    res2:t ->
    t ->
    a:t ->
    upper:bool ->
    transpose:bool ->
    unitriangular:bool ->
    t * t

  val trunc :
    t ->
    t

  val trunc_ :
    t ->
    t

  val trunc_out :
    t ->
    t ->
    t

  val type_as :
    t ->
    t ->
    t

  val unfold :
    t ->
    dimension:int ->
    size:int ->
    step:int ->
    t

  val uniform_ :
    t ->
    from:float ->
    to_:float ->
    t

  val unsqueeze :
    t ->
    dim:int ->
    t

  val unsqueeze_ :
    t ->
    dim:int ->
    t

  val upsample_bilinear2d :
    t ->
    output_size:int list ->
    align_corners:bool ->
    t

  val upsample_bilinear2d_backward :
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    t

  val upsample_bilinear2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    t

  val upsample_bilinear2d_out :
    output:t ->
    t ->
    output_size:int list ->
    align_corners:bool ->
    t

  val upsample_linear1d :
    t ->
    output_size:int list ->
    align_corners:bool ->
    t

  val upsample_linear1d_backward :
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    t

  val upsample_linear1d_backward_out :
    grad_input:t ->
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    t

  val upsample_linear1d_out :
    output:t ->
    t ->
    output_size:int list ->
    align_corners:bool ->
    t

  val upsample_nearest1d :
    t ->
    output_size:int list ->
    t

  val upsample_nearest1d_backward :
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    t

  val upsample_nearest1d_backward_out :
    grad_input:t ->
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    t

  val upsample_nearest1d_out :
    output:t ->
    t ->
    output_size:int list ->
    t

  val upsample_nearest2d :
    t ->
    output_size:int list ->
    t

  val upsample_nearest2d_backward :
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    t

  val upsample_nearest2d_backward_out :
    grad_input:t ->
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    t

  val upsample_nearest2d_out :
    output:t ->
    t ->
    output_size:int list ->
    t

  val upsample_nearest3d :
    t ->
    output_size:int list ->
    t

  val upsample_nearest3d_backward :
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    t

  val upsample_nearest3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    t

  val upsample_nearest3d_out :
    output:t ->
    t ->
    output_size:int list ->
    t

  val upsample_trilinear3d :
    t ->
    output_size:int list ->
    align_corners:bool ->
    t

  val upsample_trilinear3d_backward :
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    t

  val upsample_trilinear3d_backward_out :
    grad_input:t ->
    grad_output:t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    t

  val upsample_trilinear3d_out :
    output:t ->
    t ->
    output_size:int list ->
    align_corners:bool ->
    t

  val var1 :
    t ->
    unbiased:bool ->
    t

  val var2 :
    t ->
    dim:int ->
    unbiased:bool ->
    keepdim:bool ->
    t

  val var_out :
    t ->
    t ->
    dim:int ->
    unbiased:bool ->
    keepdim:bool ->
    t

  val view :
    t ->
    size:int list ->
    t

  val view_as :
    t ->
    t ->
    t

  val where :
    condition:t ->
    t ->
    t ->
    t

  val zero_ :
    t ->
    t

  val zeros :
    size:int list ->
    options:Kind.t * Device.t ->
    t

  val zeros_like1 :
    t ->
    t

  val zeros_like2 :
    t ->
    options:Kind.t * Device.t ->
    t

  val zeros_out :
    t ->
    size:int list ->
    t

end
